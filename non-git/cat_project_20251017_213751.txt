# Concatenated project snapshot
# Generated: 2025-10-17T21:37:51+00:00
# Git: reference-lists @ 63ee5ad

===== SKIP (binary) app/assets/builds/.keep =====

===== BEGIN app/assets/builds/tailwind.css =====
/*! tailwindcss v4.1.13 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
    'Noto Color Emoji';
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New',
    monospace;
    --color-black: #000;
    --spacing: 0.25rem;
    --container-md: 28rem;
    --container-5xl: 64rem;
    --container-6xl: 72rem;
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-5xl: 3rem;
    --text-5xl--line-height: 1;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji');
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  ::-webkit-calendar-picker-indicator {
    line-height: 1;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type='button'], [type='reset'], [type='submit']), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden='until-found'])) {
    display: none !important;
  }
}
@layer utilities {
  .diff {
    @layer daisyui.component {
      position: relative;
      display: grid;
      width: 100%;
      overflow: hidden;
      webkit-user-select: none;
      user-select: none;
      grid-template-rows: 1fr 1.8rem 1fr;
      direction: ltr;
      container-type: inline-size;
      grid-template-columns: auto 1fr;
      &:focus-visible, &:has(.diff-item-1:focus-visible) {
        outline-style: var(--tw-outline-style);
        outline-width: 2px;
        outline-offset: 1px;
        outline-color: var(--color-base-content);
      }
      &:focus-visible {
        outline-style: var(--tw-outline-style);
        outline-width: 2px;
        outline-offset: 1px;
        outline-color: var(--color-base-content);
        .diff-resizer {
          min-width: 95cqi;
          max-width: 95cqi;
        }
      }
      &:has(.diff-item-1:focus-visible) {
        outline-style: var(--tw-outline-style);
        outline-width: 2px;
        outline-offset: 1px;
        .diff-resizer {
          min-width: 5cqi;
          max-width: 5cqi;
        }
      }
      @supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
        &:focus {
          .diff-resizer {
            min-width: 5cqi;
            max-width: 5cqi;
          }
        }
        &:has(.diff-item-1:focus) {
          .diff-resizer {
            min-width: 95cqi;
            max-width: 95cqi;
          }
        }
      }
    }
  }
  .modal {
    @layer daisyui.component {
      pointer-events: none;
      visibility: hidden;
      position: fixed;
      inset: calc(0.25rem * 0);
      margin: calc(0.25rem * 0);
      display: grid;
      height: 100%;
      max-height: none;
      width: 100%;
      max-width: none;
      align-items: center;
      justify-items: center;
      background-color: transparent;
      padding: calc(0.25rem * 0);
      color: inherit;
      transition: visibility 0.3s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
      overflow: clip;
      overscroll-behavior: contain;
      z-index: 999;
      scrollbar-gutter: auto;
      &::backdrop {
        display: none;
      }
    }
    @layer daisyui.modifier {
      &.modal-open, &[open], &:target, .modal-toggle:checked + & {
        pointer-events: auto;
        visibility: visible;
        opacity: 100%;
        transition: visibility 0s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
        background-color: oklch(0% 0 0/ 0.4);
        .modal-box {
          translate: 0 0;
          scale: 1;
          opacity: 1;
        }
      }
      @starting-style {
        &.modal-open, &[open], &:target, .modal-toggle:checked + & {
          opacity: 0%;
        }
      }
    }
  }
  .drawer-side {
    :where(&) {
      @layer daisyui.component {
        overflow-x: hidden;
        overflow-y: hidden;
      }
    }
    @layer daisyui.component {
      pointer-events: none;
      visibility: hidden;
      position: fixed;
      inset-inline-start: calc(0.25rem * 0);
      top: calc(0.25rem * 0);
      z-index: 10;
      grid-column-start: 1;
      grid-row-start: 1;
      display: grid;
      width: 100%;
      grid-template-columns: repeat(1, minmax(0, 1fr));
      grid-template-rows: repeat(1, minmax(0, 1fr));
      align-items: flex-start;
      justify-items: start;
      overscroll-behavior: contain;
      background-color: transparent;
      opacity: 0%;
      transition: opacity 0.2s ease-out 0.1s allow-discrete, visibility 0.3s ease-out 0.1s allow-discrete;
      height: 100vh;
      height: 100dvh;
      > .drawer-overlay {
        position: sticky;
        top: calc(0.25rem * 0);
        cursor: pointer;
        place-self: stretch;
        background-color: oklch(0% 0 0 / 40%);
      }
      > * {
        grid-column-start: 1;
        grid-row-start: 1;
      }
      > *:not(.drawer-overlay) {
        will-change: transform;
        transition: translate 0.3s ease-out, width 0.2s ease-out;
        translate: -100%;
        [dir="rtl"] & {
          translate: 100%;
        }
      }
    }
  }
  .fab {
    @layer daisyui.component {
      pointer-events: none;
      position: fixed;
      inset-inline-end: calc(0.25rem * 4);
      bottom: calc(0.25rem * 4);
      z-index: 999;
      display: flex;
      flex-direction: column-reverse;
      align-items: flex-end;
      gap: calc(0.25rem * 2);
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
      white-space: nowrap;
      > * {
        pointer-events: auto;
        display: flex;
        align-items: center;
        gap: calc(0.25rem * 2);
        &:hover, &:has(:focus-visible) {
          z-index: 1;
        }
      }
      > [tabindex] {
        &:first-child {
          position: relative;
          display: grid;
          transition-property: opacity, visibility, rotate;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        }
      }
      .fab-close {
        position: absolute;
        inset-inline-end: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
      }
      .fab-main-action {
        position: absolute;
        inset-inline-end: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
      }
      &:focus-within {
        &:has(.fab-close), &:has(.fab-main-action) {
          > [tabindex] {
            rotate: 90deg;
            opacity: 0%;
          }
        }
        > [tabindex]:first-child {
          pointer-events: none;
        }
        > :nth-child(n + 2) {
          visibility: visible;
          --tw-scale-x: 100%;
          --tw-scale-y: 100%;
          --tw-scale-z: 100%;
          scale: var(--tw-scale-x) var(--tw-scale-y);
          opacity: 100%;
        }
      }
      > :nth-child(n + 2) {
        visibility: hidden;
        --tw-scale-x: 80%;
        --tw-scale-y: 80%;
        --tw-scale-z: 80%;
        scale: var(--tw-scale-x) var(--tw-scale-y);
        opacity: 0%;
        transition-property: opacity, scale, visibility;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        &.fab-main-action, &.fab-close {
          --tw-scale-x: 100%;
          --tw-scale-y: 100%;
          --tw-scale-z: 100%;
          scale: var(--tw-scale-x) var(--tw-scale-y);
        }
      }
      > :nth-child(3) {
        transition-delay: 30ms;
      }
      > :nth-child(4) {
        transition-delay: 60ms;
      }
      > :nth-child(5) {
        transition-delay: 90ms;
      }
      > :nth-child(6) {
        transition-delay: 120ms;
      }
    }
  }
  .drawer-open {
    @layer daisyui.modifier {
      :where(& > .drawer-side) {
        overflow-y: auto;
      }
      > .drawer-toggle {
        display: none;
        & ~ .drawer-side {
          pointer-events: auto;
          visibility: visible;
          position: sticky;
          display: block;
          width: auto;
          overscroll-behavior: auto;
          opacity: 100%;
          & > .drawer-overlay {
            cursor: default;
            background-color: transparent;
          }
          & > *:not(.drawer-overlay) {
            translate: 0%;
            [dir="rtl"] & {
              translate: 0%;
            }
          }
        }
        &:checked ~ .drawer-side {
          pointer-events: auto;
          visibility: visible;
        }
      }
    }
  }
  .drawer-toggle {
    @layer daisyui.component {
      position: fixed;
      height: calc(0.25rem * 0);
      width: calc(0.25rem * 0);
      appearance: none;
      opacity: 0%;
      &:checked {
        & ~ .drawer-side {
          pointer-events: auto;
          visibility: visible;
          overflow-y: auto;
          opacity: 100%;
          scrollbar-color: currentColor oklch(0 0 0 / calc(var(--page-has-backdrop, 0) * 0.4));
          @supports (color: color-mix(in lab, red, red)) {
            scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) oklch(0 0 0 / calc(var(--page-has-backdrop, 0) * 0.4));
          }
          & > *:not(.drawer-overlay) {
            translate: 0%;
          }
        }
      }
      &:focus-visible ~ .drawer-content label.drawer-button {
        outline: 2px solid;
        outline-offset: 2px;
      }
    }
  }
  .tooltip {
    @layer daisyui.component {
      position: relative;
      display: inline-block;
      --tt-bg: var(--color-neutral);
      --tt-off: calc(100% + 0.5rem);
      --tt-tail: calc(100% + 1px + 0.25rem);
      & > .tooltip-content, &[data-tip]:before {
        position: absolute;
        max-width: 20rem;
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 2);
        padding-block: calc(0.25rem * 1);
        text-align: center;
        white-space: normal;
        color: var(--color-neutral-content);
        opacity: 0%;
        font-size: 0.875rem;
        line-height: 1.25;
        background-color: var(--tt-bg);
        width: max-content;
        pointer-events: none;
        z-index: 2;
        --tw-content: attr(data-tip);
        content: var(--tw-content);
      }
      @media (prefers-reduced-motion: no-preference) {
        & > .tooltip-content, &[data-tip]:before, &:after {
          transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms;
        }
      }
      &:after {
        opacity: 0%;
        background-color: var(--tt-bg);
        content: "";
        pointer-events: none;
        width: 0.625rem;
        height: 0.25rem;
        display: block;
        position: absolute;
        mask-repeat: no-repeat;
        mask-position: -1px 0;
        --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
        mask-image: var(--mask-tooltip);
      }
      &.tooltip-open, &[data-tip]:not([data-tip=""]):hover, &:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover, &:has(:focus-visible) {
        > .tooltip-content, &[data-tip]:before, &:after {
          opacity: 100%;
          --tt-pos: 0rem;
        }
        @media (prefers-reduced-motion: no-preference) {
          & > .tooltip-content, &[data-tip]:before, &:after {
            transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0s, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0ms;
          }
        }
      }
    }
    @layer daisyui.modifier {
      > .tooltip-content, &[data-tip]:before {
        transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
        inset: auto auto var(--tt-off) 50%;
      }
      &:after {
        transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
        inset: auto auto var(--tt-tail) 50%;
      }
    }
  }
  .tab {
    @layer daisyui.component {
      position: relative;
      display: inline-flex;
      cursor: pointer;
      appearance: none;
      flex-wrap: wrap;
      align-items: center;
      justify-content: center;
      text-align: center;
      webkit-user-select: none;
      user-select: none;
      &:hover {
        @media (hover: hover) {
          color: var(--color-base-content);
        }
      }
      --tab-p: 1rem;
      --tab-bg: var(--color-base-100);
      --tab-border-color: var(--color-base-300);
      --tab-radius-ss: 0;
      --tab-radius-se: 0;
      --tab-radius-es: 0;
      --tab-radius-ee: 0;
      --tab-order: 0;
      --tab-radius-min: calc(0.75rem - var(--border));
      border-color: #0000;
      order: var(--tab-order);
      height: var(--tab-height);
      font-size: 0.875rem;
      padding-inline-start: var(--tab-p);
      padding-inline-end: var(--tab-p);
      &:is(input[type="radio"]) {
        min-width: fit-content;
        &:after {
          content: attr(aria-label);
        }
      }
      &:is(label) {
        position: relative;
        input {
          position: absolute;
          inset: calc(0.25rem * 0);
          cursor: pointer;
          appearance: none;
          opacity: 0%;
        }
      }
      &:checked, &:is(label:has(:checked)), &:is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"]) {
        & + .tab-content {
          display: block;
          height: calc(100% - var(--tab-height) + var(--border));
        }
      }
      &:not( :checked, label:has(:checked), :hover, .tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"] ) {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
        }
      }
      &:not(input):empty {
        flex-grow: 1;
        cursor: default;
      }
      &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:focus-visible, &:is(label:has(:checked:focus-visible)) {
        outline: 2px solid currentColor;
        outline-offset: -5px;
      }
      &[disabled] {
        pointer-events: none;
        opacity: 40%;
      }
    }
  }
  .menu {
    @layer daisyui.component {
      display: flex;
      width: fit-content;
      flex-direction: column;
      flex-wrap: wrap;
      padding: calc(0.25rem * 2);
      --menu-active-fg: var(--color-neutral-content);
      --menu-active-bg: var(--color-neutral);
      font-size: 0.875rem;
      :where(li ul) {
        position: relative;
        margin-inline-start: calc(0.25rem * 4);
        padding-inline-start: calc(0.25rem * 2);
        white-space: nowrap;
        &:before {
          position: absolute;
          inset-inline-start: calc(0.25rem * 0);
          top: calc(0.25rem * 3);
          bottom: calc(0.25rem * 3);
          background-color: var(--color-base-content);
          opacity: 10%;
          width: var(--border);
          content: "";
        }
      }
      :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
        display: none;
      }
      :where(li:not(.menu-title) > *:not(ul, details, .menu-title, .btn)), :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
        display: grid;
        grid-auto-flow: column;
        align-content: flex-start;
        align-items: center;
        gap: calc(0.25rem * 2);
        border-radius: var(--radius-field);
        padding-inline: calc(0.25rem * 3);
        padding-block: calc(0.25rem * 1.5);
        text-align: start;
        transition-property: color, background-color, box-shadow;
        transition-duration: 0.2s;
        transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
        grid-auto-columns: minmax(auto, max-content) auto max-content;
        text-wrap: balance;
        user-select: none;
      }
      :where(li > details > summary) {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
        &::-webkit-details-marker {
          display: none;
        }
      }
      :where(li > details > summary), :where(li > .menu-dropdown-toggle) {
        &:after {
          justify-self: flex-end;
          display: block;
          height: 0.375rem;
          width: 0.375rem;
          rotate: -135deg;
          translate: 0 -1px;
          transition-property: rotate, translate;
          transition-duration: 0.2s;
          content: "";
          transform-origin: 50% 50%;
          box-shadow: 2px 2px inset;
          pointer-events: none;
        }
      }
      :where(li > details[open] > summary):after, :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
        rotate: 45deg;
        translate: 0 1px;
      }
      :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn) {
        &.menu-focus, &:focus-visible {
          cursor: pointer;
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          color: var(--color-base-content);
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
        cursor: pointer;
        background-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
        }
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
        box-shadow: 0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset;
      }
      :where(li:empty) {
        background-color: var(--color-base-content);
        opacity: 10%;
        margin: 0.5rem 1rem;
        height: 1px;
      }
      :where(li) {
        position: relative;
        display: flex;
        flex-shrink: 0;
        flex-direction: column;
        flex-wrap: wrap;
        align-items: stretch;
        .badge {
          justify-self: flex-end;
        }
        & > *:not(ul, .menu-title, details, .btn):active, & > *:not(ul, .menu-title, details, .btn).menu-active, & > details > summary:active {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
          color: var(--menu-active-fg);
          background-color: var(--menu-active-bg);
          background-size: auto, calc(var(--noise) * 100%);
          background-image: none, var(--fx-noise);
          &:not(&:active) {
            box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
          }
        }
        &.menu-disabled {
          pointer-events: none;
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
      }
      .dropdown:focus-within {
        .menu-dropdown-toggle:after {
          rotate: 45deg;
          translate: 0 1px;
        }
      }
      .dropdown-content {
        margin-top: calc(0.25rem * 2);
        padding: calc(0.25rem * 2);
        &:before {
          display: none;
        }
      }
    }
  }
  .floating-label {
    @layer daisyui.component {
      position: relative;
      display: block;
      input {
        display: block;
        &::placeholder {
          transition: top 0.1s ease-out, translate 0.1s ease-out, scale 0.1s ease-out, opacity 0.1s ease-out;
        }
      }
      textarea {
        &::placeholder {
          transition: top 0.1s ease-out, translate 0.1s ease-out, scale 0.1s ease-out, opacity 0.1s ease-out;
        }
      }
      > span {
        position: absolute;
        inset-inline-start: calc(0.25rem * 3);
        z-index: 1;
        background-color: var(--color-base-100);
        padding-inline: calc(0.25rem * 1);
        opacity: 0%;
        font-size: 0.875rem;
        top: calc(var(--size-field, 0.25rem) * 10 / 2);
        line-height: 1;
        border-radius: 2px;
        pointer-events: none;
        translate: 0 -50%;
        transition: top 0.1s ease-out, translate 0.1s ease-out, scale 0.1s ease-out, opacity 0.1s ease-out;
      }
      &:focus-within, &:not(:has(input:placeholder-shown, textarea:placeholder-shown)) {
        ::placeholder {
          opacity: 0%;
          top: 0;
          translate: -12.5% calc(-50% - 0.125em);
          scale: 0.75;
          pointer-events: auto;
        }
        > span {
          opacity: 100%;
          top: 0;
          translate: -12.5% calc(-50% - 0.125em);
          scale: 0.75;
          pointer-events: auto;
          z-index: 2;
        }
      }
      &:has(:disabled, [disabled]) {
        > span {
          opacity: 0%;
        }
      }
      &:has(.input-xs, .select-xs, .textarea-xs) span {
        font-size: 0.6875rem;
        top: calc(var(--size-field, 0.25rem) * 6 / 2);
      }
      &:has(.input-sm, .select-sm, .textarea-sm) span {
        font-size: 0.75rem;
        top: calc(var(--size-field, 0.25rem) * 8 / 2);
      }
      &:has(.input-md, .select-md, .textarea-md) span {
        font-size: 0.875rem;
        top: calc(var(--size-field, 0.25rem) * 10 / 2);
      }
      &:has(.input-lg, .select-lg, .textarea-lg) span {
        font-size: 1.125rem;
        top: calc(var(--size-field, 0.25rem) * 12 / 2);
      }
      &:has(.input-xl, .select-xl, .textarea-xl) span {
        font-size: 1.375rem;
        top: calc(var(--size-field, 0.25rem) * 14 / 2);
      }
    }
  }
  .collapse-arrow {
    @layer daisyui.modifier {
      > .collapse-title:after {
        position: absolute;
        display: block;
        height: 0.5rem;
        width: 0.5rem;
        transform: translateY(-100%) rotate(45deg);
        @media (prefers-reduced-motion: no-preference) {
          transition-property: all;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          transition-duration: 0.2s;
        }
        top: 50%;
        inset-inline-end: 1.4rem;
        content: "";
        transform-origin: 75% 75%;
        box-shadow: 2px 2px;
        pointer-events: none;
      }
    }
  }
  .collapse-plus {
    @layer daisyui.modifier {
      > .collapse-title:after {
        position: absolute;
        display: block;
        height: 0.5rem;
        width: 0.5rem;
        @media (prefers-reduced-motion: no-preference) {
          transition-property: all;
          transition-duration: 300ms;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        }
        top: 0.9rem;
        inset-inline-end: 1.4rem;
        content: "+";
        pointer-events: none;
      }
    }
  }
  .diff-item-2 {
    @layer daisyui.component {
      position: relative;
      grid-column-start: 1;
      grid-row: span 3 / span 3;
      grid-row-start: 1;
      &:after {
        pointer-events: none;
        position: absolute;
        top: calc(1/2 * 100%);
        right: 1px;
        bottom: calc(0.25rem * 0);
        z-index: 2;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-base-100);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-100) 50%, transparent);
        }
        width: 1.2rem;
        height: 1.8rem;
        border: 2px solid var(--color-base-100);
        content: "";
        outline: 1px solid var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          outline: 1px solid color-mix(in oklab, var(--color-base-content) 5%, #0000);
        }
        outline-offset: -3px;
        backdrop-filter: blur(8px);
        box-shadow: 0 1px 2px 0 oklch(0% 0 0 / 0.1);
        translate: 50% -50%;
      }
      > * {
        pointer-events: none;
        position: absolute;
        top: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
        left: calc(0.25rem * 0);
        height: 100%;
        width: 100cqi;
        max-width: none;
        object-fit: cover;
        object-position: center;
      }
      @supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
        &:after {
          content: none;
        }
      }
    }
  }
  .pika-single {
    @layer daisyui.component {
      &:is(div) {
        user-select: none;
        font-size: 0.75rem;
        z-index: 999;
        display: inline-block;
        position: relative;
        color: var(--color-base-content);
        background-color: var(--color-base-100);
        border-radius: var(--radius-box);
        border: var(--border) solid var(--color-base-200);
        padding: 0.5rem;
        &:before, &:after {
          content: "";
          display: table;
        }
        &:after {
          clear: both;
        }
        &.is-hidden {
          display: none;
        }
        &.is-bound {
          position: absolute;
        }
        .pika-lendar {
          css-float: left;
        }
        .pika-title {
          position: relative;
          text-align: center;
          select {
            cursor: pointer;
            position: absolute;
            z-index: 999;
            margin: 0;
            left: 0;
            top: 5px;
            opacity: 0;
          }
        }
        .pika-label {
          display: inline-block;
          position: relative;
          z-index: 999;
          overflow: hidden;
          margin: 0;
          padding: 5px 3px;
          background-color: var(--color-base-100);
        }
        .pika-prev, .pika-next {
          display: block;
          cursor: pointer;
          position: absolute;
          top: 0;
          outline: none;
          border: 0;
          width: 2.25rem;
          height: 2.25rem;
          color: #0000;
          font-size: 1.2em;
          border-radius: var(--radius-field);
          &:hover {
            background-color: var(--color-base-200);
          }
          &.is-disabled {
            cursor: default;
            opacity: 0.2;
          }
          &:before {
            display: inline-block;
            width: 2.25rem;
            height: 2.25rem;
            line-height: 2.25;
            color: var(--color-base-content);
          }
        }
        .pika-prev {
          left: 0;
          &:before {
            content: "‹";
          }
        }
        .pika-next {
          right: 0;
          &:before {
            content: "›";
          }
        }
        .pika-select {
          display: inline-block;
        }
        .pika-table {
          width: 100%;
          border-collapse: collapse;
          border-spacing: 0;
          border: 0;
          th, td {
            padding: 0;
          }
          th {
            opacity: 0.6;
            text-align: center;
            width: 2.25rem;
            height: 2.25rem;
          }
        }
        .pika-button {
          cursor: pointer;
          display: block;
          outline: none;
          border: 0;
          margin: 0;
          width: 2.25rem;
          height: 2.25rem;
          padding: 5px;
          text-align: right;
          text-align: center;
        }
        .pika-week {
          color: var(--color-base-content);
        }
        .is-today {
          .pika-button {
            background: var(--color-primary);
            color: var(--color-primary-content);
          }
        }
        .is-selected, .has-event {
          .pika-button {
            &, &:hover {
              color: var(--color-base-100);
              background-color: var(--color-base-content);
              border-radius: var(--radius-field);
            }
          }
        }
        .has-event {
          .pika-button {
            background: var(--color-base-primary);
          }
        }
        .is-disabled, .is-inrange {
          .pika-button {
            background: var(--color-base-primary);
          }
        }
        .is-startrange {
          .pika-button {
            color: var(--color-base-100);
            background: var(--color-base-content);
            border-radius: var(--radius-field);
          }
        }
        .is-endrange {
          .pika-button {
            color: var(--color-base-100);
            background: var(--color-base-content);
            border-radius: var(--radius-field);
          }
        }
        .is-disabled {
          .pika-button {
            pointer-events: none;
            cursor: default;
            color: var(--color-base-content);
            opacity: 0.3;
          }
        }
        .is-outside-current-month {
          .pika-button {
            color: var(--color-base-content);
            opacity: 0.3;
          }
        }
        .is-selection-disabled {
          pointer-events: none;
          cursor: default;
        }
        .pika-button:hover, .pika-row.pick-whole-week:hover .pika-button {
          color: var(--color-base-content);
          background-color: var(--color-base-200);
          border-radius: var(--radius-field);
        }
        .pika-table abbr {
          text-decoration: none;
          font-weight: normal;
        }
      }
    }
  }
  .diff-item-1 {
    @layer daisyui.component {
      position: relative;
      z-index: 1;
      grid-column-start: 1;
      grid-row: span 3 / span 3;
      grid-row-start: 1;
      overflow: hidden;
      border-right: 2px solid var(--color-base-100);
      &:focus-visible {
        --tw-outline-style: none;
        outline-style: none;
      }
      > * {
        pointer-events: none;
        position: absolute;
        top: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
        left: calc(0.25rem * 0);
        height: 100%;
        width: 100cqi;
        max-width: none;
        object-fit: cover;
        object-position: center;
      }
    }
  }
  .dock {
    @layer daisyui.component {
      position: fixed;
      right: calc(0.25rem * 0);
      bottom: calc(0.25rem * 0);
      left: calc(0.25rem * 0);
      z-index: 1;
      display: flex;
      width: 100%;
      flex-direction: row;
      align-items: center;
      justify-content: space-around;
      background-color: var(--color-base-100);
      padding: calc(0.25rem * 2);
      color: currentcolor;
      border-top: 0.5px solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-top: 0.5px solid color-mix(in oklab, var(--color-base-content) 5%, #0000);
      }
      height: 4rem;
      height: calc(4rem + env(safe-area-inset-bottom));
      padding-bottom: env(safe-area-inset-bottom);
      > * {
        position: relative;
        margin-bottom: calc(0.25rem * 2);
        display: flex;
        height: 100%;
        max-width: calc(0.25rem * 32);
        flex-shrink: 1;
        flex-basis: 100%;
        cursor: pointer;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 1px;
        border-radius: var(--radius-box);
        background-color: transparent;
        transition: opacity 0.2s ease-out;
        @media (hover: hover) {
          &:hover {
            opacity: 80%;
          }
        }
        &[aria-disabled="true"], &[disabled] {
          &, &:hover {
            pointer-events: none;
            color: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
            }
            opacity: 100%;
          }
        }
        .dock-label {
          font-size: 0.6875rem;
        }
        &:after {
          content: "";
          position: absolute;
          height: calc(0.25rem * 1);
          width: calc(0.25rem * 6);
          border-radius: calc(infinity * 1px);
          background-color: transparent;
          bottom: 0.2rem;
          border-top: 3px solid transparent;
          transition: background-color 0.1s ease-out, text-color 0.1s ease-out, width 0.1s ease-out;
        }
      }
    }
  }
  .dropdown {
    @layer daisyui.component {
      position: relative;
      display: inline-block;
      position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
      & > *:not(summary):focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      .dropdown-content {
        position: absolute;
      }
      &:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) .dropdown-content, &.dropdown-hover:not(:hover) [tabindex]:first-child:focus:not(:focus-visible) ~ .dropdown-content {
        display: none;
        transform-origin: top;
        opacity: 0%;
        scale: 95%;
      }
      &[popover], .dropdown-content {
        z-index: 999;
        @media (prefers-reduced-motion: no-preference) {
          animation: dropdown 0.2s;
          transition-property: opacity, scale, display;
          transition-behavior: allow-discrete;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        }
      }
      @starting-style {
        &[popover], .dropdown-content {
          scale: 95%;
          opacity: 0;
        }
      }
      &.dropdown-open, &:not(.dropdown-hover):focus, &:focus-within {
        > [tabindex]:first-child {
          pointer-events: none;
        }
        .dropdown-content {
          opacity: 100%;
        }
      }
      &.dropdown-hover:hover {
        .dropdown-content {
          opacity: 100%;
          scale: 100%;
        }
      }
      &:is(details) {
        summary {
          &::-webkit-details-marker {
            display: none;
          }
        }
      }
      &.dropdown-open, &:focus, &:focus-within {
        .dropdown-content {
          scale: 100%;
        }
      }
      &:where([popover]) {
        background: #0000;
      }
      &[popover] {
        position: fixed;
        color: inherit;
        @supports not (position-area: bottom) {
          margin: auto;
          &.dropdown-open:not(:popover-open) {
            display: none;
            transform-origin: top;
            opacity: 0%;
            scale: 95%;
          }
          &::backdrop {
            background-color: color-mix(in oklab, #000 30%, #0000);
          }
        }
        &:not(.dropdown-open, :popover-open) {
          display: none;
          transform-origin: top;
          opacity: 0%;
          scale: 95%;
        }
      }
    }
  }
  .btn {
    :where(&) {
      @layer daisyui.component {
        width: unset;
      }
    }
    .prose & {
      text-decoration-line: none;
    }
    @layer daisyui.component {
      display: inline-flex;
      flex-shrink: 0;
      cursor: pointer;
      flex-wrap: nowrap;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 1.5);
      text-align: center;
      vertical-align: middle;
      outline-offset: 2px;
      webkit-user-select: none;
      user-select: none;
      padding-inline: var(--btn-p);
      color: var(--btn-fg);
      --tw-prose-links: var(--btn-fg);
      height: var(--size);
      font-size: var(--fontsize, 0.875rem);
      font-weight: 600;
      outline-color: var(--btn-color, var(--color-base-content));
      transition-property: color, background-color, border-color, box-shadow;
      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
      transition-duration: 0.2s;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      background-color: var(--btn-bg);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--btn-noise);
      border-width: var(--border);
      border-style: solid;
      border-color: var(--btn-border);
      text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
      touch-action: manipulation;
      box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
      --size: calc(var(--size-field, 0.25rem) * 10);
      --btn-bg: var(--btn-color, var(--color-base-200));
      --btn-fg: var(--color-base-content);
      --btn-p: 1rem;
      --btn-border: var(--btn-bg);
      @supports (color: color-mix(in lab, red, red)) {
        --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
      }
      --btn-shadow: 0 3px 2px -2px var(--btn-bg),
      0 4px 3px -2px var(--btn-bg);
      @supports (color: color-mix(in lab, red, red)) {
        --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
      0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
      }
      --btn-noise: var(--fx-noise);
      @media (hover: hover) {
        &:hover {
          --btn-bg: var(--btn-color, var(--color-base-200));
          @supports (color: color-mix(in lab, red, red)) {
            --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
          }
        }
      }
      &:focus-visible, &:has(:focus-visible) {
        outline-width: 2px;
        outline-style: solid;
        isolation: isolate;
      }
      &:active:not(.btn-active) {
        translate: 0 0.5px;
        --btn-bg: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
        }
        --btn-border: var(--btn-color, var(--color-base-200));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
        }
        --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
      }
      &:is(input[type="checkbox"], input[type="radio"]) {
        appearance: none;
        &::after {
          content: attr(aria-label);
        }
      }
      &:where(input:checked:not(.filter .btn)) {
        --btn-color: var(--color-primary);
        --btn-fg: var(--color-primary-content);
        isolation: isolate;
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        &:not(.btn-link, .btn-ghost) {
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          box-shadow: none;
        }
        pointer-events: none;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
        @media (hover: hover) {
          &:hover {
            pointer-events: none;
            background-color: var(--color-neutral);
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
            }
            --btn-border: #0000;
            --btn-fg: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
            }
          }
        }
      }
    }
    &[disabled] {
      @layer daisyui.modifier {
        &:not(.btn-link, .btn-ghost) {
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          box-shadow: none;
        }
        pointer-events: none;
        --btn-border: #0000;
        --btn-noise: none;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
        @media (hover: hover) {
          &:hover {
            pointer-events: none;
            background-color: var(--color-neutral);
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
            }
            --btn-border: #0000;
            --btn-fg: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
            }
          }
        }
      }
    }
  }
  .loading {
    @layer daisyui.component {
      pointer-events: none;
      display: inline-block;
      aspect-ratio: 1 / 1;
      background-color: currentcolor;
      vertical-align: middle;
      width: calc(var(--size-selector, 0.25rem) * 6);
      mask-size: 100%;
      mask-repeat: no-repeat;
      mask-position: center;
      mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
    }
  }
  .btn-disabled {
    @layer daisyui.modifier {
      &:not(.btn-link, .btn-ghost) {
        background-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
        }
        box-shadow: none;
      }
      pointer-events: none;
      --btn-border: #0000;
      --btn-noise: none;
      --btn-fg: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
      }
      @media (hover: hover) {
        &:hover {
          pointer-events: none;
          background-color: var(--color-neutral);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
          }
          --btn-border: #0000;
          --btn-fg: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
          }
        }
      }
    }
  }
  .tab-disabled {
    @layer daisyui.modifier {
      pointer-events: none;
      opacity: 40%;
    }
  }
  .react-day-picker {
    @layer daisyui.component {
      user-select: none;
      background-color: var(--color-base-100);
      border-radius: var(--radius-box);
      border: var(--border) solid var(--color-base-200);
      font-size: 0.75rem;
      display: inline-block;
      position: relative;
      overflow: clip;
      &[dir="rtl"] {
        .rdp-nav {
          .rdp-chevron {
            transform-origin: 50%;
            transform: rotate(180deg);
          }
        }
      }
      * {
        box-sizing: border-box;
      }
      .rdp-day {
        width: 2.25rem;
        height: 2.25rem;
        text-align: center;
      }
      .rdp-day_button {
        cursor: pointer;
        font: inherit;
        color: inherit;
        width: 2.25rem;
        height: 2.25rem;
        border: 2px solid #0000;
        border-radius: var(--radius-field);
        background: 0 0;
        justify-content: center;
        align-items: center;
        margin: 0;
        padding: 0;
        display: flex;
        &:disabled {
          cursor: revert;
        }
        &:hover {
          background-color: var(--color-base-200);
        }
      }
      .rdp-caption_label {
        z-index: 1;
        white-space: nowrap;
        border: 0;
        align-items: center;
        display: inline-flex;
        position: relative;
      }
      .rdp-button_next {
        border-radius: var(--radius-field);
        &:hover {
          background-color: var(--color-base-200);
        }
      }
      .rdp-button_previous {
        border-radius: var(--radius-field);
        &:hover {
          background-color: var(--color-base-200);
        }
      }
      .rdp-button_next, .rdp-button_previous {
        cursor: pointer;
        font: inherit;
        color: inherit;
        appearance: none;
        width: 2.25rem;
        height: 2.25rem;
        background: 0 0;
        border: none;
        justify-content: center;
        align-items: center;
        margin: 0;
        padding: 0;
        display: inline-flex;
        position: relative;
        &:disabled, &[aria-disabled="true"] {
          cursor: revert;
          opacity: 0.5;
        }
        &:disabled:hover, &[aria-disabled="true"]:hover {
          background-color: transparent;
        }
      }
      .rdp-chevron {
        fill: var(--color-base-content);
        width: 1rem;
        height: 1rem;
        display: inline-block;
      }
      .rdp-dropdowns {
        align-items: center;
        gap: 0.5rem;
        display: inline-flex;
        position: relative;
      }
      .rdp-dropdown {
        z-index: 2;
        opacity: 0;
        appearance: none;
        cursor: inherit;
        line-height: inherit;
        border: none;
        width: 100%;
        margin: 0;
        padding: 0;
        position: absolute;
        inset-block: 0;
        inset-inline-start: 0;
        &:focus-visible {
          ~ .rdp-caption_label {
            outline: 5px auto highlight;
            outline: 5px auto -webkit-focus-ring-color;
          }
        }
      }
      .rdp-dropdown_root {
        align-items: center;
        display: inline-flex;
        position: relative;
        &[data-disabled="true"] {
          .rdp-chevron {
            opacity: 0.5;
          }
        }
      }
      .rdp-month_caption {
        height: 2.75rem;
        font-size: 0.75rem;
        font-weight: inherit;
        place-content: center;
        display: flex;
      }
      .rdp-months {
        gap: 2rem;
        flex-wrap: wrap;
        max-width: fit-content;
        padding: 0.5rem;
        display: flex;
        position: relative;
      }
      .rdp-month_grid {
        border-collapse: collapse;
      }
      .rdp-nav {
        height: 2.75rem;
        inset-block-start: 0;
        inset-inline-end: 0;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        padding-inline: 0.5rem;
        display: flex;
        position: absolute;
        top: 0.25rem;
      }
      .rdp-weekday {
        opacity: 0.6;
        padding: 0.5rem 0rem;
        text-align: center;
        font-size: smaller;
        font-weight: 500;
      }
      .rdp-week_number {
        opacity: 0.6;
        height: 2.25rem;
        width: 2.25rem;
        border: none;
        border-radius: 100%;
        text-align: center;
        font-size: small;
        font-weight: 400;
      }
      .rdp-today:not(.rdp-outside) {
        .rdp-day_button {
          background: var(--color-primary);
          color: var(--color-primary-content);
        }
      }
      .rdp-selected {
        font-weight: inherit;
        font-size: 0.75rem;
        .rdp-day_button {
          color: var(--color-base-100);
          background-color: var(--color-base-content);
          border-radius: var(--radius-field);
          border: none;
          &:hover {
            background-color: var(--color-base-content);
          }
        }
      }
      .rdp-outside {
        opacity: 0.75;
      }
      .rdp-disabled {
        opacity: 0.5;
      }
      .rdp-hidden {
        visibility: hidden;
        color: var(--color-base-content);
      }
      .rdp-range_start {
        .rdp-day_button {
          border-radius: var(--radius-field) 0 0 var(--radius-field);
        }
      }
      .rdp-range_start .rdp-day_button {
        background-color: var(--color-base-content);
        color: var(--color-base-100);
      }
      .rdp-range_middle {
        background-color: var(--color-base-200);
      }
      .rdp-range_middle .rdp-day_button {
        border: unset;
        border-radius: unset;
        color: inherit;
      }
      .rdp-range_end {
        color: var(--color-base-content);
        .rdp-day_button {
          border-radius: 0 var(--radius-field) var(--radius-field) 0;
        }
      }
      .rdp-range_end .rdp-day_button {
        background-color: var(--color-base-content);
        color: var(--color-base-100);
      }
      .rdp-range_start.rdp-range_end {
        background: revert;
      }
      .rdp-focusable {
        cursor: pointer;
      }
      .rdp-footer {
        border-top: var(--border) solid var(--color-base-200);
        padding: 0.5rem;
      }
    }
  }
  .countdown {
    &.countdown {
      line-height: 1em;
    }
    @layer daisyui.component {
      display: inline-flex;
      & > * {
        visibility: hidden;
        position: relative;
        display: inline-block;
        overflow-y: clip;
        transition: width 0.4s ease-out 0.2s;
        height: 1em;
        --value-v: calc(mod(max(0, var(--value)), 1000));
        --value-hundreds: calc(round(to-zero, var(--value-v) / 100, 1));
        --value-tens: calc(round(to-zero, mod(var(--value-v), 100) / 10, 1));
        --value-ones: calc(mod(var(--value-v), 100));
        --show-hundreds: clamp(clamp(0, var(--digits, 1) - 2, 1), var(--value-hundreds), 1);
        --show-tens: clamp(
        clamp(0, var(--digits, 1) - 1, 1),
        var(--value-tens) + var(--show-hundreds),
        1
      );
        --first-digits: calc(round(to-zero, var(--value-v) / 10, 1));
        width: calc(1ch + var(--show-tens) * 1ch + var(--show-hundreds) * 1ch);
        direction: ltr;
        &:before, &:after {
          visibility: visible;
          position: absolute;
          overflow-x: clip;
          content: "00\A 01\A 02\A 03\A 04\A 05\A 06\A 07\A 08\A 09\A 10\A 11\A 12\A 13\A 14\A 15\A 16\A 17\A 18\A 19\A 20\A 21\A 22\A 23\A 24\A 25\A 26\A 27\A 28\A 29\A 30\A 31\A 32\A 33\A 34\A 35\A 36\A 37\A 38\A 39\A 40\A 41\A 42\A 43\A 44\A 45\A 46\A 47\A 48\A 49\A 50\A 51\A 52\A 53\A 54\A 55\A 56\A 57\A 58\A 59\A 60\A 61\A 62\A 63\A 64\A 65\A 66\A 67\A 68\A 69\A 70\A 71\A 72\A 73\A 74\A 75\A 76\A 77\A 78\A 79\A 80\A 81\A 82\A 83\A 84\A 85\A 86\A 87\A 88\A 89\A 90\A 91\A 92\A 93\A 94\A 95\A 96\A 97\A 98\A 99\A";
          font-variant-numeric: tabular-nums;
          white-space: pre;
          text-align: end;
          direction: rtl;
          transition: all 1s cubic-bezier(1, 0, 0, 1), width 0.2s ease-out 0.2s, opacity 0.2s ease-out 0.2s;
        }
        &:before {
          width: calc(1ch + var(--show-hundreds) * 1ch);
          top: calc(var(--first-digits) * -1em);
          inset-inline-end: 0;
          opacity: var(--show-tens);
        }
        &:after {
          width: 1ch;
          top: calc(var(--value-ones) * -1em);
          inset-inline-start: 0;
        }
      }
    }
  }
  .collapse {
    &:not(td, tr, colgroup) {
      visibility: revert-layer;
    }
    @layer daisyui.component {
      display: grid;
      position: relative;
      overflow: hidden;
      border-radius: var(--radius-box, 1rem);
      width: 100%;
      grid-template-rows: max-content 0fr;
      grid-template-columns: minmax(0, 1fr);
      isolation: isolate;
      @media (prefers-reduced-motion: no-preference) {
        transition: grid-template-rows 0.2s;
      }
      > input:is([type="checkbox"], [type="radio"]) {
        grid-column-start: 1;
        grid-row-start: 1;
        appearance: none;
        opacity: 0;
        z-index: 1;
        width: 100%;
        padding: 1rem;
        padding-inline-end: 3rem;
        min-height: 1lh;
        transition: background-color 0.2s ease-out;
      }
      &:is( [open], [tabindex]:focus:not(.collapse-close), [tabindex]:focus-within:not(.collapse-close) ), &:not(.collapse-close):has(> input:is([type="checkbox"], [type="radio"]):checked) {
        grid-template-rows: max-content 1fr;
      }
      &:is( [open], [tabindex]:focus:not(.collapse-close), [tabindex]:focus-within:not(.collapse-close) ) > .collapse-content, &:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
        visibility: visible;
        min-height: fit-content;
      }
      &:focus-visible, &:has(> input:is([type="checkbox"], [type="radio"]):focus-visible), &:has(summary:focus-visible) {
        outline-color: var(--color-base-content);
        outline-style: solid;
        outline-width: 2px;
        outline-offset: 2px;
      }
      &:not(.collapse-close) {
        > input[type="checkbox"], > input[type="radio"]:not(:checked), > .collapse-title {
          cursor: pointer;
        }
      }
      &[tabindex]:focus:not(.collapse-close, .collapse[open]), &[tabindex]:focus-within:not(.collapse-close, .collapse[open]) {
        > .collapse-title {
          cursor: unset;
        }
      }
      &:is( [open], [tabindex]:focus:not(.collapse-close), [tabindex]:focus-within:not(.collapse-close) ) > :where(.collapse-content), &:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
        padding-bottom: 1rem;
        @media (prefers-reduced-motion: no-preference) {
          transition: padding 0.2s ease-out, background-color 0.2s ease-out;
        }
      }
    }
    @layer daisyui.modifier {
      &:is([open]) {
        &.collapse-arrow {
          > .collapse-title:after {
            @media (prefers-reduced-motion: no-preference) {
              transform: translateY(-50%) rotate(225deg);
            }
          }
        }
      }
      &.collapse-open {
        &.collapse-arrow {
          > .collapse-title:after {
            @media (prefers-reduced-motion: no-preference) {
              transform: translateY(-50%) rotate(225deg);
            }
          }
        }
        &.collapse-plus {
          > .collapse-title:after {
            content: "−";
          }
        }
      }
      &[tabindex].collapse-arrow:focus:not(.collapse-close), &.collapse-arrow[tabindex]:focus-within:not(.collapse-close) {
        > .collapse-title:after {
          transform: translateY(-50%) rotate(225deg);
        }
      }
      &.collapse-arrow:not(.collapse-close) {
        > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
          transform: translateY(-50%) rotate(225deg);
        }
      }
      &[open] {
        &.collapse-plus {
          > .collapse-title:after {
            content: "−";
          }
        }
      }
      &[tabindex].collapse-plus:focus:not(.collapse-close) {
        > .collapse-title:after {
          content: "−";
        }
      }
      &.collapse-plus:not(.collapse-close) {
        > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
          content: "−";
        }
      }
    }
    &:is(details) {
      @layer daisyui.component {
        width: 100%;
        @media (prefers-reduced-motion: no-preference) {
          @supports (transition: content-visibility allow-discrete) and (interpolate-size: allow-keywords) {
            &::details-content {
              transition: content-visibility 0.2s allow-discrete, height 0.2s;
              height: 0;
              interpolate-size: allow-keywords;
            }
            &:where([open], .collapse-open)::details-content {
              height: auto;
            }
          }
        }
        & summary {
          position: relative;
          display: block;
          &::-webkit-details-marker {
            display: none;
          }
        }
      }
    }
    &:is(details) summary {
      @layer daisyui.component {
        outline: none;
      }
    }
  }
  .collapse-content {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-row-start: 1;
    }
    @layer daisyui.component {
      visibility: hidden;
      grid-column-start: 1;
      grid-row-start: 2;
      min-height: 0;
      padding-left: 1rem;
      padding-right: 1rem;
      cursor: unset;
      @media (prefers-reduced-motion: no-preference) {
        transition: visibility 0.2s, padding 0.2s ease-out, background-color 0.2s ease-out;
      }
    }
  }
  .validator-hint {
    @layer daisyui.component {
      visibility: hidden;
      margin-top: calc(0.25rem * 2);
      font-size: 0.75rem;
    }
  }
  .validator {
    @layer daisyui.component {
      &:user-valid, &:has(:user-valid) {
        &, &:focus, &:checked, &[aria-checked="true"], &:focus-within {
          --input-color: var(--color-success);
        }
      }
      &:user-invalid, &:has(:user-invalid), &[aria-invalid]:not([aria-invalid="false"]), &:has([aria-invalid]:not([aria-invalid="false"])) {
        &, &:focus, &:checked, &[aria-checked="true"], &:focus-within {
          --input-color: var(--color-error);
        }
        & ~ .validator-hint {
          visibility: visible;
          color: var(--color-error);
        }
      }
    }
    &:user-invalid, &:has(:user-invalid), &[aria-invalid]:not([aria-invalid="false"]), &:has([aria-invalid]:not([aria-invalid="false"])) {
      & ~ .validator-hint {
        display: revert-layer;
      }
    }
  }
  .collapse-open {
    @layer daisyui.modifier {
      grid-template-rows: max-content 1fr;
      > .collapse-content {
        visibility: visible;
        min-height: fit-content;
        padding-bottom: 1rem;
        @media (prefers-reduced-motion: no-preference) {
          transition: padding 0.2s ease-out, background-color 0.2s ease-out;
        }
      }
    }
  }
  .collapse {
    visibility: collapse;
  }
  .visible {
    visibility: visible;
  }
  .tabs-lift {
    @layer daisyui.modifier {
      --tabs-height: auto;
      --tabs-direction: row;
      > .tab {
        --tab-border: 0 0 var(--border) 0;
        --tab-radius-ss: min(var(--radius-field), var(--tab-radius-min));
        --tab-radius-se: min(var(--radius-field), var(--tab-radius-min));
        --tab-radius-es: 0;
        --tab-radius-ee: 0;
        --tab-paddings: var(--border) var(--tab-p) 0 var(--tab-p);
        --tab-border-colors: #0000 #0000 var(--tab-border-color) #0000;
        --tab-corner-width: calc(100% + min(var(--radius-field), var(--tab-radius-min)) * 2);
        --tab-corner-height: min(var(--radius-field), var(--tab-radius-min));
        --tab-corner-position: top left, top right;
        border-width: var(--tab-border);
        border-start-start-radius: var(--tab-radius-ss);
        border-start-end-radius: var(--tab-radius-se);
        border-end-start-radius: var(--tab-radius-es);
        border-end-end-radius: var(--tab-radius-ee);
        padding: var(--tab-paddings);
        border-color: var(--tab-border-colors);
        &:is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"]):not( .tab-disabled, [disabled] ), &:is(input:checked, label:has(:checked)) {
          --tab-border: var(--border) var(--border) 0 var(--border);
          --tab-border-colors: var(--tab-border-color) var(--tab-border-color) #0000
          var(--tab-border-color);
          --tab-paddings: 0 calc(var(--tab-p) - var(--border)) var(--border)
          calc(var(--tab-p) - var(--border));
          --tab-inset: auto auto 0 auto;
          --tab-grad: calc(69% - var(--border));
          --radius-start: radial-gradient(
          circle at top left,
          #0000 var(--tab-grad),
          var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
          var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
          var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
        );
          --radius-end: radial-gradient(
          circle at top right,
          #0000 var(--tab-grad),
          var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
          var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
          var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
        );
          background-color: var(--tab-bg);
          &:before {
            z-index: 1;
            content: "";
            display: block;
            position: absolute;
            width: var(--tab-corner-width);
            height: var(--tab-corner-height);
            background-position: var(--tab-corner-position);
            background-image: var(--radius-start), var(--radius-end);
            background-size: min(var(--radius-field), var(--tab-radius-min)) min(var(--radius-field), var(--tab-radius-min));
            background-repeat: no-repeat;
            inset: var(--tab-inset);
          }
          &:first-child:before {
            --radius-start: none;
          }
          [dir="rtl"] &:first-child:before {
            transform: rotateY(180deg);
          }
          &:last-child:before {
            --radius-end: none;
          }
          [dir="rtl"] &:last-child:before {
            transform: rotateY(180deg);
          }
        }
      }
      &:has(> .tab-content) {
        > .tab:first-child {
          &:not(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"]) {
            --tab-border-colors: var(--tab-border-color) var(--tab-border-color) #0000
            var(--tab-border-color);
          }
        }
      }
      > .tab-content {
        --tabcontent-margin: calc(-1 * var(--border)) 0 0 0;
        --tabcontent-radius-ss: 0;
        --tabcontent-radius-se: var(--radius-box);
        --tabcontent-radius-es: var(--radius-box);
        --tabcontent-radius-ee: var(--radius-box);
      }
      :checked, label:has(:checked), :is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"]) {
        & + .tab-content {
          &:nth-child(1), &:nth-child(n + 3) {
            --tabcontent-radius-ss: var(--radius-box);
          }
        }
      }
    }
  }
  .radial-progress {
    @layer daisyui.component {
      position: relative;
      display: inline-grid;
      height: var(--size);
      width: var(--size);
      place-content: center;
      border-radius: calc(infinity * 1px);
      background-color: transparent;
      vertical-align: middle;
      box-sizing: content-box;
      --value: 0;
      --size: 5rem;
      --thickness: calc(var(--size) / 10);
      --radialprogress: calc(var(--value) * 1%);
      transition: --radialprogress 0.3s linear;
      &:before {
        position: absolute;
        inset: calc(0.25rem * 0);
        border-radius: calc(infinity * 1px);
        content: "";
        background: radial-gradient(farthest-side, currentColor 98%, #0000) top/var(--thickness) var(--thickness) no-repeat, conic-gradient(currentColor var(--radialprogress), #0000 0);
        webkit-mask: radial-gradient( farthest-side, #0000 calc(100% - var(--thickness)), #000 calc(100% + 0.5px - var(--thickness)) );
        mask: radial-gradient( farthest-side, #0000 calc(100% - var(--thickness)), #000 calc(100% + 0.5px - var(--thickness)) );
      }
      &:after {
        position: absolute;
        border-radius: calc(infinity * 1px);
        background-color: currentcolor;
        transition: transform 0.3s linear;
        content: "";
        inset: calc(50% - var(--thickness) / 2);
        transform: rotate(calc(var(--value) * 3.6deg - 90deg)) translate(calc(var(--size) / 2 - 50%));
      }
    }
  }
  .list {
    @layer daisyui.component {
      display: flex;
      flex-direction: column;
      font-size: 0.875rem;
      .list-row {
        --list-grid-cols: minmax(0, auto) 1fr;
        position: relative;
        display: grid;
        grid-auto-flow: column;
        gap: calc(0.25rem * 4);
        border-radius: var(--radius-box);
        padding: calc(0.25rem * 4);
        word-break: break-word;
        grid-template-columns: var(--list-grid-cols);
      }
      & > :not(:last-child) {
        &.list-row, .list-row {
          &:after {
            content: "";
            border-bottom: var(--border) solid;
            inset-inline: var(--radius-box);
            position: absolute;
            bottom: calc(0.25rem * 0);
            border-color: var(--color-base-content);
            @supports (color: color-mix(in lab, red, red)) {
              border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
            }
          }
        }
      }
    }
    @layer daisyui.modifier {
      .list-row {
        &:has(.list-col-grow:nth-child(1)) {
          --list-grid-cols: 1fr;
        }
        &:has(.list-col-grow:nth-child(2)) {
          --list-grid-cols: minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(3)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(4)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(5)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
        }
        &:has(.list-col-grow:nth-child(6)) {
          --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto)
          minmax(0, auto) 1fr;
        }
        :not(.list-col-wrap) {
          grid-row-start: 1;
        }
      }
    }
  }
  .toast {
    @layer daisyui.component {
      position: fixed;
      inset-inline-start: auto;
      inset-inline-end: calc(0.25rem * 4);
      top: auto;
      bottom: calc(0.25rem * 4);
      display: flex;
      flex-direction: column;
      gap: calc(0.25rem * 2);
      background-color: transparent;
      translate: var(--toast-x, 0) var(--toast-y, 0);
      width: max-content;
      max-width: calc(100vw - 2rem);
      & > * {
        @media (prefers-reduced-motion: no-preference) {
          animation: toast 0.25s ease-out;
        }
      }
    }
  }
  .toggle {
    @layer daisyui.component {
      border: var(--border) solid currentColor;
      color: var(--input-color);
      position: relative;
      display: inline-grid;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      place-content: center;
      vertical-align: middle;
      webkit-user-select: none;
      user-select: none;
      grid-template-columns: 0fr 1fr 1fr;
      --radius-selector-max: calc(
      var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
    );
      border-radius: calc( var(--radius-selector) + min(var(--toggle-p), var(--radius-selector-max)) + min(var(--border), var(--radius-selector-max)) );
      padding: var(--toggle-p);
      box-shadow: 0 1px currentColor inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
      }
      transition: color 0.3s, grid-template-columns 0.2s;
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 50%, #0000);
      }
      --toggle-p: calc(var(--size) * 0.125);
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: calc((var(--size) * 2) - (var(--border) + var(--toggle-p)) * 2);
      height: var(--size);
      > * {
        z-index: 1;
        grid-column: span 1 / span 1;
        grid-column-start: 2;
        grid-row-start: 1;
        height: 100%;
        cursor: pointer;
        appearance: none;
        background-color: transparent;
        padding: calc(0.25rem * 0.5);
        transition: opacity 0.2s, rotate 0.4s;
        border: none;
        &:focus {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
        &:nth-child(2) {
          color: var(--color-base-100);
          rotate: 0deg;
        }
        &:nth-child(3) {
          color: var(--color-base-100);
          opacity: 0%;
          rotate: -15deg;
        }
      }
      &:has(:checked) {
        > :nth-child(2) {
          opacity: 0%;
          rotate: 15deg;
        }
        > :nth-child(3) {
          opacity: 100%;
          rotate: 0deg;
        }
      }
      &:before {
        position: relative;
        inset-inline-start: calc(0.25rem * 0);
        grid-column-start: 2;
        grid-row-start: 1;
        aspect-ratio: 1 / 1;
        height: 100%;
        border-radius: var(--radius-selector);
        background-color: currentcolor;
        translate: 0;
        --tw-content: "";
        content: var(--tw-content);
        transition: background-color 0.1s, translate 0.2s, inset-inline-start 0.2s;
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor;
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000);
        }
        background-size: auto, calc(var(--noise) * 100%);
        background-image: none, var(--fx-noise);
      }
      @media (forced-colors: active) {
        &:before {
          outline-style: var(--tw-outline-style);
          outline-width: 1px;
          outline-offset: calc(1px * -1);
        }
      }
      @media print {
        &:before {
          outline: 0.25rem solid;
          outline-offset: -1rem;
        }
      }
      &:focus-visible, &:has(:focus-visible) {
        outline: 2px solid currentColor;
        outline-offset: 2px;
      }
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        grid-template-columns: 1fr 1fr 0fr;
        background-color: var(--color-base-100);
        --input-color: var(--color-base-content);
        &:before {
          background-color: currentcolor;
        }
        @starting-style {
          &:before {
            opacity: 0;
          }
        }
      }
      &:indeterminate {
        grid-template-columns: 0.5fr 1fr 0.5fr;
      }
      &:disabled {
        cursor: not-allowed;
        opacity: 30%;
        &:before {
          background-color: transparent;
          border: var(--border) solid currentColor;
        }
      }
    }
  }
  .input {
    @layer daisyui.component {
      cursor: text;
      border: var(--border) solid #0000;
      position: relative;
      display: inline-flex;
      flex-shrink: 1;
      appearance: none;
      align-items: center;
      gap: calc(0.25rem * 2);
      background-color: var(--color-base-100);
      padding-inline: calc(0.25rem * 3);
      vertical-align: middle;
      white-space: nowrap;
      width: clamp(3rem, 20rem, 100%);
      height: var(--size);
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
      touch-action: manipulation;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      --size: calc(var(--size-field, 0.25rem) * 10);
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      &:where(input) {
        display: inline-flex;
      }
      :where(input) {
        display: inline-flex;
        height: 100%;
        width: 100%;
        appearance: none;
        background-color: transparent;
        border: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      :where(input[type="url"]), :where(input[type="email"]) {
        direction: ltr;
      }
      :where(input[type="date"]) {
        display: inline-flex;
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
        z-index: 1;
      }
      @media (pointer: coarse) {
        @supports (-webkit-touch-callout: none) {
          &:focus, &:focus-within {
            --font-size: 1rem;
          }
        }
      }
      &:has(> input[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
        box-shadow: none;
      }
      &:has(> input[disabled]) > input[disabled] {
        cursor: not-allowed;
      }
      &::-webkit-date-and-time-value {
        text-align: inherit;
      }
      &[type="number"] {
        &::-webkit-inner-spin-button {
          margin-block: calc(0.25rem * -3);
          margin-inline-end: calc(0.25rem * -3);
        }
      }
      &::-webkit-calendar-picker-indicator {
        position: absolute;
        inset-inline-end: 0.75em;
      }
      &:has(> input[type="date"]) {
        :where(input[type="date"]) {
          display: inline-flex;
          webkit-appearance: none;
          appearance: none;
        }
        input[type="date"]::-webkit-calendar-picker-indicator {
          position: absolute;
          inset-inline-end: 0.75em;
          width: 1em;
          height: 1em;
          cursor: pointer;
        }
      }
    }
  }
  .indicator {
    @layer daisyui.component {
      position: relative;
      display: inline-flex;
      width: max-content;
      :where(.indicator-item) {
        z-index: 1;
        position: absolute;
        white-space: nowrap;
        top: var(--indicator-t, 0);
        bottom: var(--indicator-b, auto);
        left: var(--indicator-s, auto);
        right: var(--indicator-e, 0);
        translate: var(--indicator-x, 50%) var(--indicator-y, -50%);
      }
    }
  }
  .table {
    @layer daisyui.component {
      font-size: 0.875rem;
      position: relative;
      width: 100%;
      border-radius: var(--radius-box);
      text-align: left;
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        text-align: right;
      }
      tr.row-hover {
        &, &:nth-child(even) {
          &:hover {
            @media (hover: hover) {
              background-color: var(--color-base-200);
            }
          }
        }
      }
      :where(th, td) {
        padding-inline: calc(0.25rem * 4);
        padding-block: calc(0.25rem * 3);
        vertical-align: middle;
      }
      :where(thead, tfoot) {
        white-space: nowrap;
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
        }
        font-size: 0.875rem;
        font-weight: 600;
      }
      :where(tfoot) {
        border-top: var(--border) solid var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
        }
      }
      :where(.table-pin-rows thead tr) {
        position: sticky;
        top: calc(0.25rem * 0);
        z-index: 1;
        background-color: var(--color-base-100);
      }
      :where(.table-pin-rows tfoot tr) {
        position: sticky;
        bottom: calc(0.25rem * 0);
        z-index: 1;
        background-color: var(--color-base-100);
      }
      :where(.table-pin-cols tr th) {
        position: sticky;
        right: calc(0.25rem * 0);
        left: calc(0.25rem * 0);
        background-color: var(--color-base-100);
      }
      :where(thead tr, tbody tr:not(:last-child)) {
        border-bottom: var(--border) solid var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
        }
      }
    }
  }
  .avatar-offline {
    @layer daisyui.modifier {
      &:before {
        content: "";
        position: absolute;
        z-index: 1;
        display: block;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-base-300);
        outline: 2px solid var(--color-base-100);
        width: 15%;
        height: 15%;
        top: 7%;
        right: 7%;
      }
    }
  }
  .avatar-online {
    @layer daisyui.modifier {
      &:before {
        content: "";
        position: absolute;
        z-index: 1;
        display: block;
        border-radius: calc(infinity * 1px);
        background-color: var(--color-success);
        outline: 2px solid var(--color-base-100);
        width: 15%;
        height: 15%;
        top: 7%;
        right: 7%;
      }
    }
  }
  .steps {
    @layer daisyui.component {
      display: inline-grid;
      grid-auto-flow: column;
      overflow: hidden;
      overflow-x: auto;
      counter-reset: step;
      grid-auto-columns: 1fr;
      .step {
        display: grid;
        grid-template-columns: repeat(1, minmax(0, 1fr));
        grid-template-columns: auto;
        grid-template-rows: repeat(2, minmax(0, 1fr));
        grid-template-rows: 40px 1fr;
        place-items: center;
        text-align: center;
        min-width: 4rem;
        --step-bg: var(--color-base-300);
        --step-fg: var(--color-base-content);
        &:before {
          top: calc(0.25rem * 0);
          grid-column-start: 1;
          grid-row-start: 1;
          height: calc(0.25rem * 2);
          width: 100%;
          border: 1px solid;
          color: var(--step-bg);
          background-color: var(--step-bg);
          --tw-content: "";
          content: var(--tw-content);
          margin-inline-start: -100%;
        }
        > .step-icon, &:not(:has(.step-icon)):after {
          content: counter(step);
          counter-increment: step;
          z-index: 1;
          color: var(--step-fg);
          background-color: var(--step-bg);
          border: 1px solid var(--step-bg);
          position: relative;
          grid-column-start: 1;
          grid-row-start: 1;
          display: grid;
          height: calc(0.25rem * 8);
          width: calc(0.25rem * 8);
          place-items: center;
          place-self: center;
          border-radius: calc(infinity * 1px);
        }
        &:first-child:before {
          content: none;
        }
        &[data-content]:after {
          content: attr(data-content);
        }
      }
    }
    @layer daisyui.modifier {
      .step-neutral {
        + .step-neutral:before, &:after, > .step-icon {
          --step-bg: var(--color-neutral);
          --step-fg: var(--color-neutral-content);
        }
      }
      .step-primary {
        + .step-primary:before, &:after, > .step-icon {
          --step-bg: var(--color-primary);
          --step-fg: var(--color-primary-content);
        }
      }
      .step-secondary {
        + .step-secondary:before, &:after, > .step-icon {
          --step-bg: var(--color-secondary);
          --step-fg: var(--color-secondary-content);
        }
      }
      .step-accent {
        + .step-accent:before, &:after, > .step-icon {
          --step-bg: var(--color-accent);
          --step-fg: var(--color-accent-content);
        }
      }
      .step-info {
        + .step-info:before, &:after, > .step-icon {
          --step-bg: var(--color-info);
          --step-fg: var(--color-info-content);
        }
      }
      .step-success {
        + .step-success:before, &:after, > .step-icon {
          --step-bg: var(--color-success);
          --step-fg: var(--color-success-content);
        }
      }
      .step-warning {
        + .step-warning:before, &:after, > .step-icon {
          --step-bg: var(--color-warning);
          --step-fg: var(--color-warning-content);
        }
      }
      .step-error {
        + .step-error:before, &:after, > .step-icon {
          --step-bg: var(--color-error);
          --step-fg: var(--color-error-content);
        }
      }
    }
  }
  .range {
    @layer daisyui.component {
      appearance: none;
      webkit-appearance: none;
      --range-thumb: var(--color-base-100);
      --range-thumb-size: calc(var(--size-selector, 0.25rem) * 6);
      --range-progress: currentColor;
      --range-fill: 1;
      --range-p: 0.25rem;
      --range-bg: currentColor;
      @supports (color: color-mix(in lab, red, red)) {
        --range-bg: color-mix(in oklab, currentColor 10%, #0000);
      }
      cursor: pointer;
      overflow: hidden;
      background-color: transparent;
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      --radius-selector-max: calc(
      var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
    );
      border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
      border: none;
      height: var(--range-thumb-size);
      [dir="rtl"] & {
        --range-dir: -1;
      }
      &:focus {
        outline: none;
      }
      &:focus-visible {
        outline: 2px solid;
        outline-offset: 2px;
      }
      &::-webkit-slider-runnable-track {
        width: 100%;
        background-color: var(--range-bg);
        border-radius: var(--radius-selector);
        height: calc(var(--range-thumb-size) * 0.5);
      }
      @media (forced-colors: active) {
        &::-webkit-slider-runnable-track {
          border: 1px solid;
        }
      }
      @media (forced-colors: active) {
        &::-moz-range-track {
          border: 1px solid;
        }
      }
      &::-webkit-slider-thumb {
        position: relative;
        box-sizing: border-box;
        border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
        background-color: currentColor;
        height: var(--range-thumb-size);
        width: var(--range-thumb-size);
        border: var(--range-p) solid;
        appearance: none;
        webkit-appearance: none;
        top: 50%;
        color: var(--range-progress);
        transform: translateY(-50%);
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        }
      }
      &::-moz-range-track {
        width: 100%;
        background-color: var(--range-bg);
        border-radius: var(--radius-selector);
        height: calc(var(--range-thumb-size) * 0.5);
      }
      &::-moz-range-thumb {
        position: relative;
        box-sizing: border-box;
        border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
        background-color: currentColor;
        height: var(--range-thumb-size);
        width: var(--range-thumb-size);
        border: var(--range-p) solid;
        top: 50%;
        color: var(--range-progress);
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
        }
      }
      &:disabled {
        cursor: not-allowed;
        opacity: 30%;
      }
    }
  }
  .tabs-border {
    @layer daisyui.modifier {
      .tab {
        --tab-border-color: #0000 #0000 var(--tab-border-color) #0000;
        position: relative;
        border-radius: var(--radius-field);
        &:before {
          --tw-content: "";
          content: var(--tw-content);
          background-color: var(--tab-border-color);
          transition: background-color 0.2s ease;
          width: 80%;
          height: 3px;
          border-radius: var(--radius-field);
          bottom: 0;
          left: 10%;
          position: absolute;
        }
        &:is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"]):not( .tab-disabled, [disabled] ), &:is(input:checked), &:is(label:has(:checked)) {
          &:before {
            --tab-border-color: currentColor;
            border-top: 3px solid;
          }
        }
      }
    }
  }
  .chat-bubble {
    @layer daisyui.component {
      position: relative;
      display: block;
      width: fit-content;
      border-radius: var(--radius-field);
      background-color: var(--color-base-300);
      padding-inline: calc(0.25rem * 4);
      padding-block: calc(0.25rem * 2);
      color: var(--color-base-content);
      grid-row-end: 3;
      min-height: 2rem;
      min-width: 2.5rem;
      max-width: 90%;
      &:before {
        position: absolute;
        bottom: calc(0.25rem * 0);
        height: calc(0.25rem * 3);
        width: calc(0.25rem * 3);
        background-color: inherit;
        content: "";
        mask-repeat: no-repeat;
        mask-image: var(--mask-chat);
        mask-position: 0px -1px;
        mask-size: 0.8125rem;
      }
    }
  }
  .select {
    @layer daisyui.component {
      border: var(--border) solid #0000;
      position: relative;
      display: inline-flex;
      flex-shrink: 1;
      appearance: none;
      align-items: center;
      gap: calc(0.25rem * 1.5);
      background-color: var(--color-base-100);
      padding-inline-start: calc(0.25rem * 3);
      padding-inline-end: calc(0.25rem * 7);
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      height: var(--size);
      font-size: 0.875rem;
      touch-action: manipulation;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
      background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
      background-size: 4px 4px, 4px 4px;
      background-repeat: no-repeat;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      border-color: var(--input-color);
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      --size: calc(var(--size-field, 0.25rem) * 10);
      [dir="rtl"] & {
        background-position: calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%);
        &::picker(select), select::picker(select) {
          translate: 0.5rem 0;
        }
      }
      &[multiple] {
        height: auto;
        overflow: auto;
        padding-block: calc(0.25rem * 3);
        padding-inline-end: calc(0.25rem * 3);
        background-image: none;
      }
      select {
        margin-inline-start: calc(0.25rem * -3);
        margin-inline-end: calc(0.25rem * -7);
        width: calc(100% + 2.75rem);
        appearance: none;
        padding-inline-start: calc(0.25rem * 3);
        padding-inline-end: calc(0.25rem * 7);
        height: calc(100% - calc(var(--border) * 2));
        align-items: center;
        background: inherit;
        border-radius: inherit;
        border-style: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
        &:not(:last-child) {
          margin-inline-end: calc(0.25rem * -5.5);
          background-image: none;
        }
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
        z-index: 1;
      }
      &:has(> select[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
      }
      &:has(> select[disabled]) > select[disabled] {
        cursor: not-allowed;
      }
      &, & select {
        @supports (appearance: base-select) {
          appearance: base-select;
        }
        @supports (appearance: base-select) {
          &::picker(select) {
            appearance: base-select;
          }
        }
        &::picker(select) {
          color: inherit;
          max-height: min(24rem, 70dvh);
          margin-inline: 0.5rem;
          translate: -0.5rem 0;
          border: var(--border) solid var(--color-base-200);
          margin-block: calc(0.25rem * 2);
          border-radius: var(--radius-box);
          padding: calc(0.25rem * 2);
          background-color: inherit;
          box-shadow: 0 2px calc(var(--depth) * 3px) -2px oklch(0% 0 0/0.2);
          box-shadow: 0 20px 25px -5px rgb(0 0 0 / calc(var(--depth) * 0.1)), 0 8px 10px -6px rgb(0 0 0 / calc(var(--depth) * 0.1));
        }
        &::picker-icon {
          display: none;
        }
        optgroup {
          padding-top: 0.5em;
          option {
            &:nth-child(1) {
              margin-top: 0.5em;
            }
          }
        }
        option {
          border-radius: var(--radius-field);
          padding-inline: calc(0.25rem * 3);
          padding-block: calc(0.25rem * 1.5);
          transition-property: color, background-color;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
          white-space: normal;
          &:not(:disabled) {
            &:hover, &:focus-visible {
              cursor: pointer;
              background-color: var(--color-base-content);
              @supports (color: color-mix(in lab, red, red)) {
                background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
              }
              --tw-outline-style: none;
              outline-style: none;
              @media (forced-colors: active) {
                outline: 2px solid transparent;
                outline-offset: 2px;
              }
            }
            &:active {
              background-color: var(--color-neutral);
              color: var(--color-neutral-content);
              box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--color-neutral);
            }
          }
        }
      }
    }
  }
  .diff-resizer {
    @layer daisyui.component {
      position: relative;
      z-index: 1;
      grid-column-start: 1;
      grid-row-start: 2;
      height: calc(0.25rem * 4);
      width: 50cqi;
      max-width: calc(100cqi - 1rem);
      min-width: 1rem;
      resize: horizontal;
      overflow: hidden;
      opacity: 0%;
      transform: scaleY(3) translate(0.35rem, 0.35rem);
      cursor: ew-resize;
      transform-origin: 100% 100%;
      clip-path: inset(calc(100% - 0.75rem) 0 0 calc(100% - 0.75rem));
      transition: min-width 0.3s ease-out, max-width 0.3s ease-out;
    }
  }
  .timeline {
    @layer daisyui.component {
      position: relative;
      display: flex;
      > li {
        position: relative;
        display: grid;
        flex-shrink: 0;
        align-items: center;
        grid-template-rows: var(--timeline-row-start, minmax(0, 1fr)) auto var( --timeline-row-end, minmax(0, 1fr) );
        grid-template-columns: var(--timeline-col-start, minmax(0, 1fr)) auto var( --timeline-col-end, minmax(0, 1fr) );
        > hr {
          border: none;
          width: 100%;
          &:first-child {
            grid-column-start: 1;
            grid-row-start: 2;
          }
          &:last-child {
            grid-column-start: 3;
            grid-column-end: none;
            grid-row-start: 2;
            grid-row-end: auto;
          }
          @media print {
            border: 0.1px solid var(--color-base-300);
          }
        }
      }
      :where(hr) {
        height: calc(0.25rem * 1);
        background-color: var(--color-base-300);
      }
      &:has(.timeline-middle hr) {
        &:first-child {
          border-start-start-radius: 0;
          border-end-start-radius: 0;
          border-start-end-radius: var(--radius-selector);
          border-end-end-radius: var(--radius-selector);
        }
        &:last-child {
          border-start-start-radius: var(--radius-selector);
          border-end-start-radius: var(--radius-selector);
          border-start-end-radius: 0;
          border-end-end-radius: 0;
        }
      }
      &:not(:has(.timeline-middle)) {
        :first-child hr:last-child {
          border-start-start-radius: var(--radius-selector);
          border-end-start-radius: var(--radius-selector);
          border-start-end-radius: 0;
          border-end-end-radius: 0;
        }
        :last-child hr:first-child {
          border-start-start-radius: 0;
          border-end-start-radius: 0;
          border-start-end-radius: var(--radius-selector);
          border-end-end-radius: var(--radius-selector);
        }
      }
    }
  }
  .image-full {
    @layer daisyui.modifier {
      display: grid;
      > * {
        grid-column-start: 1;
        grid-row-start: 1;
      }
      > .card-body {
        position: relative;
        color: var(--color-neutral-content);
      }
      :where(figure) {
        overflow: hidden;
        border-radius: inherit;
      }
      > figure img {
        height: 100%;
        object-fit: cover;
        filter: brightness(28%);
      }
    }
  }
  .swap {
    @layer daisyui.component {
      position: relative;
      display: inline-grid;
      cursor: pointer;
      place-content: center;
      vertical-align: middle;
      webkit-user-select: none;
      user-select: none;
      input {
        appearance: none;
        border: none;
      }
      > * {
        grid-column-start: 1;
        grid-row-start: 1;
        @media (prefers-reduced-motion: no-preference) {
          transition-property: transform, rotate, opacity;
          transition-duration: 0.2s;
          transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
        }
      }
      .swap-on, .swap-indeterminate, input:indeterminate ~ .swap-on {
        opacity: 0%;
      }
      input:is(:checked, :indeterminate) {
        & ~ .swap-off {
          opacity: 0%;
        }
      }
      input:checked ~ .swap-on, input:indeterminate ~ .swap-indeterminate {
        opacity: 100%;
        backface-visibility: visible;
      }
    }
  }
  .collapse-title {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-row-start: 1;
    }
    @layer daisyui.component {
      position: relative;
      width: 100%;
      padding: 1rem;
      padding-inline-end: 3rem;
      min-height: 1lh;
      transition: background-color 0.2s ease-out;
    }
  }
  .mockup-browser {
    @layer daisyui.component {
      position: relative;
      overflow: hidden;
      overflow-x: auto;
      border-radius: var(--radius-box);
      pre[data-prefix] {
        &:before {
          content: attr(data-prefix);
          display: inline-block;
          text-align: right;
        }
      }
      .mockup-browser-toolbar {
        margin-block: calc(0.25rem * 3);
        display: inline-flex;
        width: 100%;
        align-items: center;
        padding-right: 1.4em;
        &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
          flex-direction: row-reverse;
        }
        &:before {
          content: "";
          margin-right: 4.8rem;
          display: inline-block;
          aspect-ratio: 1 / 1;
          height: calc(0.25rem * 3);
          border-radius: calc(infinity * 1px);
          opacity: 30%;
          box-shadow: 1.4em 0, 2.8em 0, 4.2em 0;
        }
        .input {
          margin-inline: auto;
          display: flex;
          height: 100%;
          align-items: center;
          gap: calc(0.25rem * 2);
          overflow: hidden;
          background-color: var(--color-base-200);
          text-overflow: ellipsis;
          white-space: nowrap;
          font-size: 0.75rem;
          direction: ltr;
          &:before {
            content: "";
            width: calc(0.25rem * 4);
            height: calc(0.25rem * 4);
            opacity: 50%;
            background-color: currentColor;
            mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z' clip-rule='evenodd' /%3E%3C/svg%3E") no-repeat center;
            mask-size: contain;
          }
        }
      }
    }
  }
  .menu-horizontal {
    @layer daisyui.modifier {
      display: inline-flex;
      flex-direction: row;
      & > li:not(.menu-title) > details > ul {
        position: absolute;
        margin-inline-start: calc(0.25rem * 0);
        margin-top: calc(0.25rem * 4);
        padding-block: calc(0.25rem * 2);
        padding-inline-end: calc(0.25rem * 2);
      }
      & > li > details > ul {
        &:before {
          content: none;
        }
      }
      :where(& > li:not(.menu-title) > details > ul) {
        border-radius: var(--radius-box);
        background-color: var(--color-base-100);
        box-shadow: 0 1px 3px 0 oklch(0% 0 0/0.1), 0 1px 2px -1px oklch(0% 0 0/0.1);
      }
    }
  }
  .menu-vertical {
    @layer daisyui.modifier {
      display: inline-flex;
      flex-direction: column;
      & > li:not(.menu-title) > details > ul {
        position: relative;
        margin-inline-start: calc(0.25rem * 4);
        margin-top: calc(0.25rem * 0);
        padding-block: calc(0.25rem * 0);
        padding-inline-end: calc(0.25rem * 0);
      }
    }
  }
  .mockup-code {
    @layer daisyui.component {
      position: relative;
      overflow: hidden;
      overflow-x: auto;
      border-radius: var(--radius-box);
      background-color: var(--color-neutral);
      padding-block: calc(0.25rem * 5);
      color: var(--color-neutral-content);
      font-size: 0.875rem;
      direction: ltr;
      &:before {
        content: "";
        margin-bottom: calc(0.25rem * 4);
        display: block;
        height: calc(0.25rem * 3);
        width: calc(0.25rem * 3);
        border-radius: calc(infinity * 1px);
        opacity: 30%;
        box-shadow: 1.4em 0, 2.8em 0, 4.2em 0;
      }
      pre {
        padding-right: calc(0.25rem * 5);
        &:before {
          content: "";
          margin-right: 2ch;
        }
        &[data-prefix] {
          &:before {
            content: attr(data-prefix);
            display: inline-block;
            width: calc(0.25rem * 8);
            text-align: right;
            opacity: 50%;
          }
        }
      }
    }
  }
  .mockup-window {
    @layer daisyui.component {
      position: relative;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      overflow-x: auto;
      border-radius: var(--radius-box);
      padding-top: calc(0.25rem * 5);
      &:before {
        content: "";
        margin-bottom: calc(0.25rem * 4);
        display: block;
        aspect-ratio: 1 / 1;
        height: calc(0.25rem * 3);
        flex-shrink: 0;
        align-self: flex-start;
        border-radius: calc(infinity * 1px);
        opacity: 30%;
        box-shadow: 1.4em 0, 2.8em 0, 4.2em 0;
      }
      [dir="rtl"] &:before {
        align-self: flex-end;
      }
      pre[data-prefix] {
        &:before {
          content: attr(data-prefix);
          display: inline-block;
          text-align: right;
        }
      }
    }
  }
  .avatar {
    @layer daisyui.component {
      position: relative;
      display: inline-flex;
      vertical-align: middle;
      & > div {
        display: block;
        aspect-ratio: 1 / 1;
        overflow: hidden;
      }
      img {
        height: 100%;
        width: 100%;
        object-fit: cover;
      }
    }
  }
  .checkbox {
    @layer daisyui.component {
      border: var(--border) solid var(--input-color, var(--color-base-content));
      @supports (color: color-mix(in lab, red, red)) {
        border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
      }
      position: relative;
      display: inline-block;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      border-radius: var(--radius-selector);
      padding: calc(0.25rem * 1);
      vertical-align: middle;
      color: var(--color-base-content);
      box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
      transition: background-color 0.2s, box-shadow 0.2s;
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: var(--size);
      height: var(--size);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      &:before {
        --tw-content: "";
        content: var(--tw-content);
        display: block;
        width: 100%;
        height: 100%;
        rotate: 45deg;
        background-color: currentcolor;
        opacity: 0%;
        transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
        transition-delay: 0.1s;
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
        box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
        font-size: 1rem;
        line-height: 0.75;
      }
      &:focus-visible {
        outline: 2px solid var(--input-color, currentColor);
        outline-offset: 2px;
      }
      &:checked, &[aria-checked="true"] {
        background-color: var(--input-color, #0000);
        box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
        &:before {
          clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
          opacity: 100%;
        }
        @media (forced-colors: active) {
          &:before {
            rotate: 0deg;
            background-color: transparent;
            --tw-content: "✔︎";
            clip-path: none;
          }
        }
        @media print {
          &:before {
            rotate: 0deg;
            background-color: transparent;
            --tw-content: "✔︎";
            clip-path: none;
          }
        }
      }
      &:indeterminate {
        background-color: var( --input-color, var(--color-base-content) );
        @supports (color: color-mix(in lab, red, red)) {
          background-color: var( --input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000) );
        }
        &:before {
          rotate: 0deg;
          opacity: 100%;
          translate: 0 -35%;
          clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
        }
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        cursor: not-allowed;
        opacity: 20%;
      }
    }
  }
  .radio {
    @layer daisyui.component {
      position: relative;
      display: inline-block;
      flex-shrink: 0;
      cursor: pointer;
      appearance: none;
      border-radius: calc(infinity * 1px);
      padding: calc(0.25rem * 1);
      vertical-align: middle;
      border: var(--border) solid var(--input-color, currentColor);
      @supports (color: color-mix(in lab, red, red)) {
        border: var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000));
      }
      box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
      --size: calc(var(--size-selector, 0.25rem) * 6);
      width: var(--size);
      height: var(--size);
      color: var(--input-color, currentColor);
      &:before {
        display: block;
        width: 100%;
        height: 100%;
        border-radius: calc(infinity * 1px);
        --tw-content: "";
        content: var(--tw-content);
        background-size: auto, calc(var(--noise) * 100%);
        background-image: none, var(--fx-noise);
      }
      &:focus-visible {
        outline: 2px solid currentColor;
      }
      &:checked, &[aria-checked="true"] {
        border-color: currentcolor;
        background-color: var(--color-base-100);
        @media (prefers-reduced-motion: no-preference) {
          animation: radio 0.2s ease-out;
        }
        &:before {
          background-color: currentcolor;
          box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
        }
        @media (forced-colors: active) {
          &:before {
            outline-style: var(--tw-outline-style);
            outline-width: 1px;
            outline-offset: calc(1px * -1);
          }
        }
        @media print {
          &:before {
            outline: 0.25rem solid;
            outline-offset: -1rem;
          }
        }
      }
    }
    &:disabled {
      @layer daisyui.modifier {
        cursor: not-allowed;
        opacity: 20%;
      }
    }
  }
  .rating {
    @layer daisyui.component {
      position: relative;
      display: inline-flex;
      vertical-align: middle;
      & input {
        border: none;
        appearance: none;
      }
      :where(*) {
        height: calc(0.25rem * 6);
        width: calc(0.25rem * 6);
        border-radius: 0;
        background-color: var(--color-base-content);
        opacity: 20%;
        @media (prefers-reduced-motion: no-preference) {
          animation: rating 0.25s ease-out;
        }
        &:is(input) {
          cursor: pointer;
        }
      }
      & .rating-hidden {
        width: calc(0.25rem * 2);
        background-color: transparent;
      }
      input[type="radio"]:checked {
        background-image: none;
      }
      * {
        &:checked, &[aria-checked="true"], &[aria-current="true"], &:has(~ *:checked, ~ *[aria-checked="true"], ~ *[aria-current="true"]) {
          opacity: 100%;
        }
        &:focus-visible {
          scale: 1.1;
          @media (prefers-reduced-motion: no-preference) {
            transition: scale 0.2s ease-out;
          }
        }
      }
      & *:active:focus {
        animation: none;
        scale: 1.1;
      }
    }
    @layer daisyui.modifier {
      &.rating-xs :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 4);
        height: calc(0.25rem * 4);
      }
      &.rating-sm :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 5);
        height: calc(0.25rem * 5);
      }
      &.rating-md :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 6);
        height: calc(0.25rem * 6);
      }
      &.rating-lg :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 7);
        height: calc(0.25rem * 7);
      }
      &.rating-xl :where(*:not(.rating-hidden)) {
        width: calc(0.25rem * 8);
        height: calc(0.25rem * 8);
      }
    }
  }
  .navbar {
    @layer daisyui.component {
      display: flex;
      width: 100%;
      align-items: center;
      padding: 0.5rem;
      min-height: 4rem;
    }
    :where(&) {
      @layer daisyui.modifier {
        position: relative;
      }
    }
  }
  .drawer {
    @layer daisyui.component {
      position: relative;
      display: grid;
      width: 100%;
      grid-auto-columns: max-content auto;
    }
  }
  .card {
    @layer daisyui.component {
      position: relative;
      display: flex;
      flex-direction: column;
      border-radius: var(--radius-box);
      outline-width: 2px;
      transition: outline 0.2s ease-in-out;
      outline: 0 solid #0000;
      outline-offset: 2px;
      &:focus {
        --tw-outline-style: none;
        outline-style: none;
        @media (forced-colors: active) {
          outline: 2px solid transparent;
          outline-offset: 2px;
        }
      }
      &:focus-visible {
        outline-color: currentColor;
      }
      :where(figure:first-child) {
        overflow: hidden;
        border-start-start-radius: inherit;
        border-start-end-radius: inherit;
        border-end-start-radius: unset;
        border-end-end-radius: unset;
      }
      :where(figure:last-child) {
        overflow: hidden;
        border-start-start-radius: unset;
        border-start-end-radius: unset;
        border-end-start-radius: inherit;
        border-end-end-radius: inherit;
      }
      figure {
        display: flex;
        align-items: center;
        justify-content: center;
      }
      &:has(> input:is(input[type="checkbox"], input[type="radio"])) {
        cursor: pointer;
        user-select: none;
      }
      &:has(> :checked) {
        outline: 2px solid currentColor;
      }
    }
  }
  .stats {
    @layer daisyui.component {
      position: relative;
      display: inline-grid;
      grid-auto-flow: column;
      overflow-x: auto;
      border-radius: var(--radius-box);
    }
  }
  .progress {
    @layer daisyui.component {
      position: relative;
      height: calc(0.25rem * 2);
      width: 100%;
      appearance: none;
      overflow: hidden;
      border-radius: var(--radius-box);
      background-color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, currentcolor 20%, transparent);
      }
      color: var(--color-base-content);
      &:indeterminate {
        background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
        background-size: 200%;
        background-position-x: 15%;
        @media (prefers-reduced-motion: no-preference) {
          animation: progress 5s ease-in-out infinite;
        }
        @supports (-moz-appearance: none) {
          &::-moz-progress-bar {
            background-color: transparent;
            @media (prefers-reduced-motion: no-preference) {
              animation: progress 5s ease-in-out infinite;
              background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
              background-size: 200%;
              background-position-x: 15%;
            }
          }
        }
      }
      @supports (-moz-appearance: none) {
        &::-moz-progress-bar {
          border-radius: var(--radius-box);
          background-color: currentcolor;
        }
      }
      @supports (-webkit-appearance: none) {
        &::-webkit-progress-bar {
          border-radius: var(--radius-box);
          background-color: transparent;
        }
        &::-webkit-progress-value {
          border-radius: var(--radius-box);
          background-color: currentColor;
        }
      }
    }
  }
  .modal-toggle {
    @layer daisyui.component {
      position: fixed;
      height: calc(0.25rem * 0);
      width: calc(0.25rem * 0);
      appearance: none;
      opacity: 0%;
    }
  }
  .absolute {
    position: absolute;
  }
  .fixed {
    position: fixed;
  }
  .relative {
    position: relative;
  }
  .static {
    position: static;
  }
  .sticky {
    position: sticky;
  }
  .tooltip-bottom {
    @layer daisyui.modifier {
      > .tooltip-content, &[data-tip]:before {
        transform: translateX(-50%) translateY(var(--tt-pos, -0.25rem));
        inset: var(--tt-off) auto auto 50%;
      }
      &:after {
        transform: translateX(-50%) translateY(var(--tt-pos, -0.25rem)) rotate(180deg);
        inset: var(--tt-tail) auto auto 50%;
      }
    }
  }
  .tooltip-left {
    @layer daisyui.modifier {
      > .tooltip-content, &[data-tip]:before {
        transform: translateX(calc(var(--tt-pos, 0.25rem) - 0.25rem)) translateY(-50%);
        inset: 50% var(--tt-off) auto auto;
      }
      &:after {
        transform: translateX(var(--tt-pos, 0.25rem)) translateY(-50%) rotate(-90deg);
        inset: 50% calc(var(--tt-tail) + 1px) auto auto;
      }
    }
  }
  .tooltip-right {
    @layer daisyui.modifier {
      > .tooltip-content, &[data-tip]:before {
        transform: translateX(calc(var(--tt-pos, -0.25rem) + 0.25rem)) translateY(-50%);
        inset: 50% auto auto var(--tt-off);
      }
      &:after {
        transform: translateX(var(--tt-pos, -0.25rem)) translateY(-50%) rotate(90deg);
        inset: 50% auto auto calc(var(--tt-tail) + 1px);
      }
    }
  }
  .tooltip-top {
    @layer daisyui.modifier {
      > .tooltip-content, &[data-tip]:before {
        transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
        inset: auto auto var(--tt-off) 50%;
      }
      &:after {
        transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
        inset: auto auto var(--tt-tail) 50%;
      }
    }
  }
  .toast-center {
    @layer daisyui.modifier {
      inset-inline-start: calc(1/2 * 100%);
      inset-inline-end: calc(1/2 * 100%);
      --toast-x: -50%;
    }
  }
  .toast-end {
    @layer daisyui.modifier {
      inset-inline-start: auto;
      inset-inline-end: calc(0.25rem * 4);
      --toast-x: 0;
    }
  }
  .toast-start {
    @layer daisyui.modifier {
      inset-inline-start: calc(0.25rem * 4);
      inset-inline-end: auto;
      --toast-x: 0;
    }
  }
  .dropdown-right {
    @layer daisyui.modifier {
      --anchor-h: right;
      --anchor-v: span-bottom;
      .dropdown-content {
        inset-inline-start: 100%;
        top: calc(0.25rem * 0);
        bottom: auto;
        transform-origin: 0;
      }
    }
  }
  .chat-end {
    @layer daisyui.modifier {
      place-items: end;
      grid-template-columns: 1fr auto;
      .chat-header {
        grid-column-start: 1;
      }
      .chat-footer {
        grid-column-start: 1;
      }
      .chat-image {
        grid-column-start: 2;
      }
      .chat-bubble {
        grid-column-start: 1;
        border-end-end-radius: 0;
        &:before {
          transform: rotateY(180deg);
          inset-inline-start: 100%;
        }
        [dir="rtl"] &:before {
          transform: rotateY(0deg);
        }
      }
    }
  }
  .chat-start {
    @layer daisyui.modifier {
      place-items: start;
      grid-template-columns: auto 1fr;
      .chat-header {
        grid-column-start: 2;
      }
      .chat-footer {
        grid-column-start: 2;
      }
      .chat-image {
        grid-column-start: 1;
      }
      .chat-bubble {
        grid-column-start: 2;
        border-end-start-radius: 0;
        &:before {
          transform: rotateY(0deg);
          inset-inline-start: -0.75rem;
        }
        [dir="rtl"] &:before {
          transform: rotateY(180deg);
        }
      }
    }
  }
  .dropdown-left {
    @layer daisyui.modifier {
      --anchor-h: left;
      --anchor-v: span-bottom;
      .dropdown-content {
        inset-inline-end: 100%;
        top: calc(0.25rem * 0);
        bottom: auto;
        transform-origin: 100%;
      }
    }
  }
  .dropdown-center {
    @layer daisyui.modifier {
      --anchor-h: center;
      :where(.dropdown-content) {
        inset-inline-end: calc(1/2 * 100%);
        translate: 50% 0;
        [dir="rtl"] & {
          translate: -50% 0;
        }
      }
      &.dropdown-left {
        --anchor-h: left;
        --anchor-v: center;
        .dropdown-content {
          top: auto;
          bottom: calc(1/2 * 100%);
          translate: 0 50%;
        }
      }
      &.dropdown-right {
        --anchor-h: right;
        --anchor-v: center;
        .dropdown-content {
          top: auto;
          bottom: calc(1/2 * 100%);
          translate: 0 50%;
        }
      }
    }
  }
  .dropdown-end {
    @layer daisyui.modifier {
      --anchor-h: span-left;
      :where(.dropdown-content) {
        inset-inline-end: calc(0.25rem * 0);
        translate: 0 0;
        [dir="rtl"] & {
          translate: 0 0;
        }
      }
      &.dropdown-left {
        --anchor-h: left;
        --anchor-v: span-top;
        .dropdown-content {
          top: auto;
          bottom: calc(0.25rem * 0);
        }
      }
      &.dropdown-right {
        --anchor-h: right;
        --anchor-v: span-top;
        .dropdown-content {
          top: auto;
          bottom: calc(0.25rem * 0);
        }
      }
    }
  }
  .dropdown-start {
    @layer daisyui.modifier {
      --anchor-h: span-right;
      :where(.dropdown-content) {
        inset-inline-end: auto;
        translate: 0 0;
        [dir="rtl"] & {
          translate: 0 0;
        }
      }
      &.dropdown-left {
        --anchor-h: left;
        --anchor-v: span-bottom;
        .dropdown-content {
          top: calc(0.25rem * 0);
          bottom: auto;
        }
      }
      &.dropdown-right {
        --anchor-h: right;
        --anchor-v: span-bottom;
        .dropdown-content {
          top: calc(0.25rem * 0);
          bottom: auto;
        }
      }
    }
  }
  .dropdown-bottom {
    @layer daisyui.modifier {
      --anchor-v: bottom;
      .dropdown-content {
        top: 100%;
        bottom: auto;
        transform-origin: top;
      }
    }
  }
  .dropdown-top {
    @layer daisyui.modifier {
      --anchor-v: top;
      .dropdown-content {
        top: auto;
        bottom: 100%;
        transform-origin: bottom;
      }
    }
  }
  .toast-bottom {
    @layer daisyui.modifier {
      top: auto;
      bottom: calc(0.25rem * 4);
      --toast-y: 0;
    }
  }
  .toast-middle {
    @layer daisyui.modifier {
      top: calc(1/2 * 100%);
      bottom: auto;
      --toast-y: -50%;
    }
  }
  .toast-top {
    @layer daisyui.modifier {
      top: calc(0.25rem * 4);
      bottom: auto;
      --toast-y: 0;
    }
  }
  .dock-sm {
    @layer daisyui.modifier {
      height: calc(0.25rem * 14);
      height: 3.5rem;
      height: calc(3.5rem + env(safe-area-inset-bottom));
      .dock-active {
        &:after {
          bottom: -0.1rem;
        }
      }
      .dock-label {
        font-size: 0.625rem;
      }
    }
  }
  .dock-lg {
    @layer daisyui.modifier {
      height: 4.5rem;
      height: calc(4.5rem + env(safe-area-inset-bottom));
      .dock-active {
        &:after {
          bottom: 0.4rem;
        }
      }
      .dock-label {
        font-size: 0.6875rem;
      }
    }
  }
  .dock-xl {
    @layer daisyui.modifier {
      height: 5rem;
      height: calc(5rem + env(safe-area-inset-bottom));
      .dock-active {
        &:after {
          bottom: 0.4rem;
        }
      }
      .dock-label {
        font-size: 0.75rem;
      }
    }
  }
  .dock-xs {
    @layer daisyui.modifier {
      height: 3rem;
      height: calc(3rem + env(safe-area-inset-bottom));
      .dock-active {
        &:after {
          bottom: -0.1rem;
        }
      }
      .dock-label {
        font-size: 0.625rem;
      }
    }
  }
  .file-input {
    @layer daisyui.component {
      cursor: pointer;
      cursor: pointer;
      border: var(--border) solid #0000;
      display: inline-flex;
      appearance: none;
      align-items: center;
      background-color: var(--color-base-100);
      vertical-align: middle;
      webkit-user-select: none;
      user-select: none;
      width: clamp(3rem, 20rem, 100%);
      height: var(--size);
      padding-inline-end: 0.75rem;
      font-size: 0.875rem;
      line-height: 2;
      border-start-start-radius: var(--join-ss, var(--radius-field));
      border-start-end-radius: var(--join-se, var(--radius-field));
      border-end-start-radius: var(--join-es, var(--radius-field));
      border-end-end-radius: var(--join-ee, var(--radius-field));
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      --size: calc(var(--size-field, 0.25rem) * 10);
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      &::file-selector-button {
        margin-inline-end: calc(0.25rem * 4);
        cursor: pointer;
        padding-inline: calc(0.25rem * 4);
        webkit-user-select: none;
        user-select: none;
        height: calc(100% + var(--border) * 2);
        margin-block: calc(var(--border) * -1);
        margin-inline-start: calc(var(--border) * -1);
        font-size: 0.875rem;
        color: var(--btn-fg);
        border-width: var(--border);
        border-style: solid;
        border-color: var(--btn-border);
        border-start-start-radius: calc(var(--join-ss, var(--radius-field) - var(--border)));
        border-end-start-radius: calc(var(--join-es, var(--radius-field) - var(--border)));
        font-weight: 600;
        background-color: var(--btn-bg);
        background-size: calc(var(--noise) * 100%);
        background-image: var(--btn-noise);
        text-shadow: 0 0.5px oklch(1 0 0 / calc(var(--depth) * 0.15));
        box-shadow: 0 0.5px 0 0.5px white inset, var(--btn-shadow);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 0.5px 0 0.5px color-mix( in oklab, color-mix(in oklab, white 30%, var(--btn-bg)) calc(var(--depth) * 20%), #0000 ) inset, var(--btn-shadow);
        }
        --size: calc(var(--size-field, 0.25rem) * 10);
        --btn-bg: var(--btn-color, var(--color-base-200));
        --btn-fg: var(--color-base-content);
        --btn-border: var(--btn-bg);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-border: color-mix(in oklab, var(--btn-bg), #000 5%);
        }
        --btn-shadow: 0 3px 2px -2px var(--btn-bg),
        0 4px 3px -2px var(--btn-bg);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) 30%, #0000),
        0 4px 3px -2px color-mix(in oklab, var(--btn-bg) 30%, #0000);
        }
        --btn-noise: var(--fx-noise);
      }
      &:focus {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) 10%, #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
      }
      &:has(> input[disabled]), &:is(:disabled, [disabled]) {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
        box-shadow: none;
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
        &::file-selector-button {
          cursor: not-allowed;
          border-color: var(--color-base-200);
          background-color: var(--color-base-200);
          --btn-border: #0000;
          --btn-noise: none;
          --btn-fg: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
          }
        }
      }
    }
  }
  .hero-content {
    @layer daisyui.component {
      isolation: isolate;
      display: flex;
      max-width: 80rem;
      align-items: center;
      justify-content: center;
      gap: calc(0.25rem * 4);
      padding: calc(0.25rem * 4);
    }
  }
  .textarea {
    @layer daisyui.component {
      border: var(--border) solid #0000;
      min-height: calc(0.25rem * 20);
      flex-shrink: 1;
      appearance: none;
      border-radius: var(--radius-field);
      background-color: var(--color-base-100);
      padding-block: calc(0.25rem * 2);
      vertical-align: middle;
      width: clamp(3rem, 20rem, 100%);
      padding-inline-start: 0.75rem;
      padding-inline-end: 0.75rem;
      font-size: max(var(--font-size, 0.875rem), 0.875rem);
      touch-action: manipulation;
      border-color: var(--input-color);
      box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      }
      --input-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
      }
      textarea {
        appearance: none;
        background-color: transparent;
        border: none;
        &:focus, &:focus-within {
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
      }
      &:focus, &:focus-within {
        --input-color: var(--color-base-content);
        box-shadow: 0 1px var(--input-color);
        @supports (color: color-mix(in lab, red, red)) {
          box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
        }
        outline: 2px solid var(--input-color);
        outline-offset: 2px;
        isolation: isolate;
      }
      @media (pointer: coarse) {
        @supports (-webkit-touch-callout: none) {
          &:focus, &:focus-within {
            --font-size: 1rem;
          }
        }
      }
      &:has(> textarea[disabled]), &:is(:disabled, [disabled]) {
        cursor: not-allowed;
        border-color: var(--color-base-200);
        background-color: var(--color-base-200);
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
          }
        }
        box-shadow: none;
      }
      &:has(> textarea[disabled]) > textarea[disabled] {
        cursor: not-allowed;
      }
    }
  }
  .btn-active {
    @layer daisyui.modifier {
      --btn-bg: var(--btn-color, var(--color-base-200));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
      }
      --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
      isolation: isolate;
    }
  }
  .isolate {
    isolation: isolate;
  }
  .mockup-phone-camera {
    @layer daisyui.component {
      grid-column: 1/1;
      grid-row: 1/1;
      background: #000;
      height: 3.7%;
      width: 28%;
      border-radius: 17px;
      z-index: 1;
      margin-top: 3%;
    }
  }
  .stack {
    @layer daisyui.component {
      display: inline-grid;
      grid-template-columns: 3px 4px 1fr 4px 3px;
      grid-template-rows: 3px 4px 1fr 4px 3px;
      & > * {
        height: 100%;
        width: 100%;
        &:nth-child(n + 2) {
          width: 100%;
          opacity: 70%;
        }
        &:nth-child(2) {
          z-index: 2;
          opacity: 90%;
        }
        &:nth-child(1) {
          z-index: 3;
          width: 100%;
        }
      }
    }
    @layer daisyui.modifier {
      &, &.stack-bottom {
        > * {
          grid-column: 3 / 4;
          grid-row: 3 / 6;
          &:nth-child(2) {
            grid-column: 2 / 5;
            grid-row: 2 / 5;
          }
          &:nth-child(1) {
            grid-column: 1 / 6;
            grid-row: 1 / 4;
          }
        }
      }
      &.stack-top {
        > * {
          grid-column: 3 / 4;
          grid-row: 1 / 4;
          &:nth-child(2) {
            grid-column: 2 / 5;
            grid-row: 2 / 5;
          }
          &:nth-child(1) {
            grid-column: 1 / 6;
            grid-row: 3 / 6;
          }
        }
      }
      &.stack-start {
        > * {
          grid-column: 1 / 4;
          grid-row: 3 / 4;
          &:nth-child(2) {
            grid-column: 2 / 5;
            grid-row: 2 / 5;
          }
          &:nth-child(1) {
            grid-column: 3 / 6;
            grid-row: 1 / 6;
          }
        }
      }
      &.stack-end {
        > * {
          grid-column: 3 / 6;
          grid-row: 3 / 4;
          &:nth-child(2) {
            grid-column: 2 / 5;
            grid-row: 2 / 5;
          }
          &:nth-child(1) {
            grid-column: 1 / 4;
            grid-row: 1 / 6;
          }
        }
      }
    }
  }
  .modal-backdrop {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-row-start: 1;
      display: grid;
      align-self: stretch;
      justify-self: stretch;
      color: transparent;
      z-index: -1;
      button {
        cursor: pointer;
      }
    }
  }
  .z-\[1\] {
    z-index: 1;
  }
  .tab-content {
    @layer daisyui.component {
      order: var(--tabcontent-order);
      display: none;
      border-color: transparent;
      --tabcontent-radius-ss: var(--radius-box);
      --tabcontent-radius-se: var(--radius-box);
      --tabcontent-radius-es: var(--radius-box);
      --tabcontent-radius-ee: var(--radius-box);
      --tabcontent-order: 1;
      width: 100%;
      margin: var(--tabcontent-margin);
      border-width: var(--border);
      border-start-start-radius: var(--tabcontent-radius-ss);
      border-start-end-radius: var(--tabcontent-radius-se);
      border-end-start-radius: var(--tabcontent-radius-es);
      border-end-end-radius: var(--tabcontent-radius-ee);
    }
  }
  .hover-gallery {
    @layer daisyui.component {
      --items: 1;
      grid-template-columns: repeat(var(--items), 1fr);
      width: 100%;
      gap: 1px;
      overflow: hidden;
      &, &:is(figure) {
        display: inline-grid;
      }
      &:has(> :nth-child(3)) {
        --items: 2;
      }
      &:has(> :nth-child(4)) {
        --items: 3;
      }
      &:has(> :nth-child(5)) {
        --items: 4;
      }
      &:has(> :nth-child(6)) {
        --items: 5;
      }
      &:has(> :nth-child(7)) {
        --items: 6;
      }
      &:has(> :nth-child(8)) {
        --items: 7;
      }
      &:has(> :nth-child(9)) {
        --items: 8;
      }
      &:has(> :nth-child(10)) {
        --items: 9;
      }
      > * {
        opacity: 0;
        height: 100%;
        grid-row: 1;
        object-fit: cover;
        width: 100%;
        &:nth-child(1) {
          grid-column: 1 / -1;
          opacity: 1;
        }
        &:nth-child(2) {
          grid-column: 1;
        }
        &:nth-child(3) {
          grid-column: 2;
        }
        &:nth-child(4) {
          grid-column: 3;
        }
        &:nth-child(5) {
          grid-column: 4;
        }
        &:nth-child(6) {
          grid-column: 5;
        }
        &:nth-child(7) {
          grid-column: 6;
        }
        &:nth-child(8) {
          grid-column: 7;
        }
        &:nth-child(9) {
          grid-column: 8;
        }
        &:nth-child(10) {
          grid-column: 9;
        }
        &:nth-child(n + 11) {
          display: none;
        }
      }
      > *:hover {
        grid-column: 1 / -1;
        opacity: 1;
      }
      &:has(*:hover) {
        > :nth-child(1) {
          display: none;
        }
      }
    }
  }
  .mockup-phone-display {
    @layer daisyui.component {
      border-radius: 54px;
      grid-column: 1/1;
      grid-row: 1/1;
      overflow: hidden;
      width: 100%;
      height: 100%;
      @supports (corner-shape: superellipse(1.87)) {
        border-radius: 101px;
        corner-shape: superellipse(1.87);
      }
      & > img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    }
  }
  .timeline-end {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-column-end: 4;
      grid-row-start: 3;
      grid-row-end: 4;
      margin: calc(0.25rem * 1);
      align-self: flex-start;
      justify-self: center;
    }
  }
  .timeline-start {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-column-end: 4;
      grid-row-start: 1;
      grid-row-end: 2;
      margin: calc(0.25rem * 1);
      align-self: flex-end;
      justify-self: center;
    }
  }
  .timeline-horizontal {
    @layer daisyui.modifier {
      flex-direction: row;
      > li {
        align-items: center;
        > hr {
          height: calc(0.25rem * 1);
          width: 100%;
          &:first-child {
            grid-column-start: 1;
            grid-row-start: 2;
          }
          &:last-child {
            grid-column-start: 3;
            grid-column-end: none;
            grid-row-start: 2;
            grid-row-end: auto;
          }
        }
      }
      .timeline-start {
        grid-column-start: 1;
        grid-column-end: 4;
        grid-row-start: 1;
        grid-row-end: 2;
        align-self: flex-end;
        justify-self: center;
      }
      .timeline-end {
        grid-column-start: 1;
        grid-column-end: 4;
        grid-row-start: 3;
        grid-row-end: 4;
        align-self: flex-start;
        justify-self: center;
      }
      &:has(.timeline-middle) {
        > li {
          > hr {
            &:first-child {
              border-start-start-radius: 0;
              border-end-start-radius: 0;
              border-start-end-radius: var(--radius-selector);
              border-end-end-radius: var(--radius-selector);
            }
            &:last-child {
              border-start-start-radius: var(--radius-selector);
              border-end-start-radius: var(--radius-selector);
              border-start-end-radius: 0;
              border-end-end-radius: 0;
            }
          }
        }
      }
      &:not(:has(.timeline-middle)) {
        :first-child {
          > hr:last-child {
            border-start-start-radius: var(--radius-selector);
            border-end-start-radius: var(--radius-selector);
            border-start-end-radius: 0;
            border-end-end-radius: 0;
          }
        }
        :last-child {
          > hr:first-child {
            border-start-start-radius: 0;
            border-end-start-radius: 0;
            border-start-end-radius: var(--radius-selector);
            border-end-end-radius: var(--radius-selector);
          }
        }
      }
    }
  }
  .timeline-vertical {
    @layer daisyui.modifier {
      flex-direction: column;
      > li {
        justify-items: center;
        --timeline-row-start: minmax(0, 1fr);
        --timeline-row-end: minmax(0, 1fr);
        > hr {
          height: 100%;
          width: calc(0.25rem * 1);
          &:first-child {
            grid-column-start: 2;
            grid-row-start: 1;
          }
          &:last-child {
            grid-column-start: 2;
            grid-column-end: auto;
            grid-row-start: 3;
            grid-row-end: none;
          }
        }
      }
      .timeline-start {
        grid-column-start: 1;
        grid-column-end: 2;
        grid-row-start: 1;
        grid-row-end: 4;
        align-self: center;
        justify-self: flex-end;
      }
      .timeline-end {
        grid-column-start: 3;
        grid-column-end: 4;
        grid-row-start: 1;
        grid-row-end: 4;
        align-self: center;
        justify-self: flex-start;
      }
      &:has(.timeline-middle) {
        > li {
          > hr {
            &:first-child {
              border-top-left-radius: 0;
              border-top-right-radius: 0;
              border-bottom-right-radius: var(--radius-selector);
              border-bottom-left-radius: var(--radius-selector);
            }
            &:last-child {
              border-top-left-radius: var(--radius-selector);
              border-top-right-radius: var(--radius-selector);
              border-bottom-right-radius: 0;
              border-bottom-left-radius: 0;
            }
          }
        }
      }
      &:not(:has(.timeline-middle)) {
        :first-child {
          > hr:last-child {
            border-top-left-radius: var(--radius-selector);
            border-top-right-radius: var(--radius-selector);
            border-bottom-right-radius: 0;
            border-bottom-left-radius: 0;
          }
        }
        :last-child {
          > hr:first-child {
            border-top-left-radius: 0;
            border-top-right-radius: 0;
            border-bottom-right-radius: var(--radius-selector);
            border-bottom-left-radius: var(--radius-selector);
          }
        }
      }
      &.timeline-snap-icon {
        > li {
          --timeline-col-start: minmax(0, 1fr);
          --timeline-row-start: 0.5rem;
        }
      }
    }
  }
  .timeline-compact {
    @layer daisyui.modifier {
      --timeline-row-start: 0;
      .timeline-start {
        grid-column-start: 1;
        grid-column-end: 4;
        grid-row-start: 3;
        grid-row-end: 4;
        align-self: flex-start;
        justify-self: center;
      }
      li:has(.timeline-start) {
        .timeline-end {
          grid-column-start: none;
          grid-row-start: auto;
        }
      }
      &.timeline-vertical {
        > li {
          --timeline-col-start: 0;
        }
        .timeline-start {
          grid-column-start: 3;
          grid-column-end: 4;
          grid-row-start: 1;
          grid-row-end: 4;
          align-self: center;
          justify-self: flex-start;
        }
        li:has(.timeline-start) {
          .timeline-end {
            grid-column-start: auto;
            grid-row-start: none;
          }
        }
      }
    }
  }
  .stat-figure {
    @layer daisyui.component {
      grid-column-start: 2;
      grid-row: span 3 / span 3;
      grid-row-start: 1;
      place-self: center;
      justify-self: flex-end;
    }
  }
  .hero {
    @layer daisyui.component {
      display: grid;
      width: 100%;
      place-items: center;
      background-size: cover;
      background-position: center;
      & > * {
        grid-column-start: 1;
        grid-row-start: 1;
      }
    }
  }
  .hero-overlay {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-row-start: 1;
      height: 100%;
      width: 100%;
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 50%, transparent);
      }
    }
  }
  .modal-box {
    @layer daisyui.component {
      grid-column-start: 1;
      grid-row-start: 1;
      max-height: 100vh;
      width: calc(11/12 * 100%);
      max-width: 32rem;
      background-color: var(--color-base-100);
      padding: calc(0.25rem * 6);
      transition: translate 0.3s ease-out, scale 0.3s ease-out, opacity 0.2s ease-out 0.05s, box-shadow 0.3s ease-out;
      border-top-left-radius: var(--modal-tl, var(--radius-box));
      border-top-right-radius: var(--modal-tr, var(--radius-box));
      border-bottom-left-radius: var(--modal-bl, var(--radius-box));
      border-bottom-right-radius: var(--modal-br, var(--radius-box));
      scale: 95%;
      opacity: 0;
      box-shadow: oklch(0% 0 0/ 0.25) 0px 25px 50px -12px;
      overflow-y: auto;
      overscroll-behavior: contain;
    }
  }
  .drawer-content {
    @layer daisyui.component {
      grid-column-start: 2;
      grid-row-start: 1;
      min-width: calc(0.25rem * 0);
    }
  }
  .timeline-middle {
    @layer daisyui.component {
      grid-column-start: 2;
      grid-row-start: 2;
    }
  }
  .drawer-end {
    @layer daisyui.modifier.placement {
      grid-auto-columns: auto max-content;
      > .drawer-toggle {
        & ~ .drawer-content {
          grid-column-start: 1;
        }
        & ~ .drawer-side {
          grid-column-start: 2;
          justify-items: end;
        }
        & ~ .drawer-side > *:not(.drawer-overlay) {
          translate: 100%;
          [dir="rtl"] & {
            translate: -100%;
          }
        }
        &:checked ~ .drawer-side > *:not(.drawer-overlay) {
          translate: 0%;
        }
      }
    }
  }
  .stat-value {
    @layer daisyui.component {
      grid-column-start: 1;
      white-space: nowrap;
      font-size: 2rem;
      font-weight: 800;
    }
  }
  .stat-desc {
    @layer daisyui.component {
      grid-column-start: 1;
      white-space: nowrap;
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
      }
      font-size: 0.75rem;
    }
  }
  .stat-title {
    @layer daisyui.component {
      grid-column-start: 1;
      white-space: nowrap;
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
      }
      font-size: 0.75rem;
    }
  }
  .stat-actions {
    @layer daisyui.component {
      grid-column-start: 1;
      white-space: nowrap;
    }
  }
  .chat-image {
    @layer daisyui.component {
      grid-row: span 2 / span 2;
      align-self: flex-end;
    }
  }
  .chat-footer {
    @layer daisyui.component {
      grid-row-start: 3;
      display: flex;
      gap: calc(0.25rem * 1);
      font-size: 0.6875rem;
    }
  }
  .chat-header {
    @layer daisyui.component {
      grid-row-start: 1;
      display: flex;
      gap: calc(0.25rem * 1);
      font-size: 0.6875rem;
    }
  }
  .list-col-wrap {
    @layer daisyui.modifier {
      grid-row-start: 2;
    }
  }
  .container {
    width: 100%;
    @media (width >= 40rem) {
      max-width: 40rem;
    }
    @media (width >= 48rem) {
      max-width: 48rem;
    }
    @media (width >= 64rem) {
      max-width: 64rem;
    }
    @media (width >= 80rem) {
      max-width: 80rem;
    }
    @media (width >= 96rem) {
      max-width: 96rem;
    }
  }
  .divider {
    @layer daisyui.component {
      display: flex;
      height: calc(0.25rem * 4);
      flex-direction: row;
      align-items: center;
      align-self: stretch;
      white-space: nowrap;
      margin: var(--divider-m, 1rem 0);
      --divider-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        --divider-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
      &:before, &:after {
        content: "";
        height: calc(0.25rem * 0.5);
        width: 100%;
        flex-grow: 1;
        background-color: var(--divider-color);
      }
      @media print {
        &:before, &:after {
          border: 0.5px solid;
        }
      }
      &:not(:empty) {
        gap: calc(0.25rem * 4);
      }
    }
  }
  .filter {
    @layer daisyui.component {
      display: flex;
      flex-wrap: wrap;
      input[type="radio"] {
        width: auto;
      }
      input {
        overflow: hidden;
        opacity: 100%;
        scale: 1;
        transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
        &:not(:last-child) {
          margin-inline-end: calc(0.25rem * 1);
        }
        &.filter-reset {
          aspect-ratio: 1 / 1;
          &::after {
            content: "×";
          }
        }
      }
      &:not(:has(input:checked:not(.filter-reset))) {
        .filter-reset, input[type="reset"] {
          scale: 0;
          border-width: 0;
          margin-inline: calc(0.25rem * 0);

----- TRUNCATED after 5000 lines -----

===== END app/assets/builds/tailwind.css =====

===== SKIP (binary) app/assets/images/.keep =====

===== BEGIN app/assets/stylesheets/application.css =====
/*
 * This is a manifest file that'll be compiled into application.css.
 *
 * With Propshaft, assets are served efficiently without preprocessing steps. You can still include
 * application-wide styles in this file, but keep in mind that CSS precedence will follow the standard
 * cascading order, meaning styles declared later in the document or manifest will override earlier ones,
 * depending on specificity.
 *
 * Consider organizing styles into separate files for maintainability.
 */

===== END app/assets/stylesheets/application.css =====

===== BEGIN app/assets/tailwind/application.css =====
/* app/assets/tailwind/application.css */
@import "tailwindcss";
@plugin "daisyui" { themes: light --default, dark --prefersdark; }
@plugin "daisyui/theme" { name: "encore"; default: true; color-scheme: light; /* …colors… */ }

@plugin "daisyui/theme" {
  name: "encoreCool";
  default: true;
  prefersdark: false;
  color-scheme: light;
  --color-base-100: #FFFFFF;
  --color-base-200: #F3F4F6;
  --color-base-300: #A0A2A3;
  --color-base-content: #111827;
  --color-primary: #13334B;
  --color-primary-content: oklch(97% 0.014 343.198);
  --color-secondary: #566E7F;
  --color-secondary-content: #FFFFFF;
  --color-accent: #B09684;
  --color-accent-content: #1F2937;
  --color-neutral: #13334B;
  --color-neutral-content: #FFFFFF;
  --color-info: #3B82F6;
  --color-info-content: #FFFFFF;
  --color-success: #16A34A;
  --color-success-content: #FFFFFF;
  --color-warning: #D97706;
  --color-warning-content: #FFFFFF;
  --color-error: #760202;
  --color-error-content: #FFFFFF;
  --radius-selector: 0.25rem;
  --radius-field: 0.25rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 1;
  --noise: 1;
}

@plugin "daisyui/theme" {
  name: "encoreWarm";
  default: false;
  prefersdark: false;
  color-scheme: light;
  --color-base-100: #F9F5EB;
  --color-base-200: #FBE8D3;
  --color-base-300: #D9EAF7;
  --color-base-content: #2F1D0A;
  --color-primary: #2F5D50;
  --color-primary-content: #FFFFFF;
  --color-secondary: #204E4A;
  --color-secondary-content: #FFFFFF;
  --color-accent: #E1B866;
  --color-accent-content: #2F1D0A;
  --color-neutral: #5A3A29;
  --color-neutral-content: #FFFFFF;
  --color-info: oklch(58% 0.158 241.966);
  --color-info-content: oklch(97% 0.013 236.62);
  --color-success: oklch(60% 0.118 184.704);
  --color-success-content: oklch(98% 0.014 180.72);
  --color-warning: oklch(64% 0.222 41.116);
  --color-warning-content: oklch(98% 0.016 73.684);
  --color-error: oklch(57% 0.245 27.325);
  --color-error-content: oklch(97% 0.013 17.38);
  --radius-selector: 0.5rem;
  --radius-field: 0.5rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 1;
  --noise: 1;
}

@plugin "daisyui/theme" {
  name: "encoreCoolDark";
  default: false;
  prefersdark: true;
  color-scheme: dark;
  --color-base-100: #1f2937;
  --color-base-200: #111827;
  --color-base-300: #374151;
  --color-base-content: #d1d5db;
  --color-primary: #4b8fce;
  --color-primary-content: #00070e;
  --color-secondary: #8a9faa;
  --color-secondary-content: #00070e;
  --color-accent: #c9b3a5;
  --color-accent-content: oklch(26% 0.051 172.552);
  --color-neutral: #2a4d6e;
  --color-neutral-content: #ffffff;
  --color-info: #3b82f6;
  --color-info-content: oklch(12% 0.042 264.695);
  --color-success: #22c55e;
  --color-success-content: oklch(26% 0.065 152.934);
  --color-warning: #f59e0b;
  --color-warning-content: oklch(28% 0.066 53.813);
  --color-error: #ef4444;
  --color-error-content: #ffffff;
  --radius-selector: 0.25rem;
  --radius-field: 0.25rem;
  --radius-box: 0.5rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 0;
  --noise: 0;
}


@plugin "daisyui/theme" {
  name: "encoreWarmDark";
  default: false;
  prefersdark: false;
  color-scheme: dark;
  --color-base-100: #2a211c;
  --color-base-200: #3c322d;
  --color-base-300: #51463f;
  --color-base-content: #f9f5eb;
  --color-primary: #6bb1a1;
  --color-primary-content: #0c1f1a;
  --color-secondary: #578b84;
  --color-secondary-content: #061513;
  --color-accent: #e6c37f;
  --color-accent-content: #2F1D0A;
  --color-neutral: #8c6f60;
  --color-neutral-content: #f9f5eb;
  --color-info: #3b82f6;
  --color-info-content: oklch(98% 0.003 247.858);
  --color-success: #22c55e;
  --color-success-content: oklch(12% 0.042 264.695);
  --color-warning: #f59e0b;
  --color-warning-content: oklch(12% 0.042 264.695);
  --color-error: #ef4444;
  --color-error-content: oklch(98% 0.003 247.858);
  --radius-selector: 2rem;
  --radius-field: 0.5rem;
  --radius-box: 0rem;
  --size-selector: 0.25rem;
  --size-field: 0.25rem;
  --border: 1px;
  --depth: 1;
  --noise: 1;
}

===== END app/assets/tailwind/application.css =====

===== BEGIN app/assets/tailwind/daisyui.mjs =====
/** 🌼
 *  @license MIT
 *  daisyUI bundle
 *  https://daisyui.com/
 */

// packages/daisyui/functions/themeOrder.js
var themeOrder_default = [
  "light",
  "dark",
  "cupcake",
  "bumblebee",
  "emerald",
  "corporate",
  "synthwave",
  "retro",
  "cyberpunk",
  "valentine",
  "halloween",
  "garden",
  "forest",
  "aqua",
  "lofi",
  "pastel",
  "fantasy",
  "wireframe",
  "black",
  "luxury",
  "dracula",
  "cmyk",
  "autumn",
  "business",
  "acid",
  "lemonade",
  "night",
  "coffee",
  "winter",
  "dim",
  "nord",
  "sunset",
  "caramellatte",
  "abyss",
  "silk"
];

// packages/daisyui/functions/pluginOptionsHandler.js
var pluginOptionsHandler = (() => {
  let firstRun = true;
  return (options, addBase, themesObject, packageVersion) => {
    const {
      logs = true,
      root = ":root",
      themes = ["light --default", "dark --prefersdark"],
      include,
      exclude,
      prefix = ""
    } = options || {};
    if (logs !== false && firstRun) {
      console.log(`${atob("Lyoh")} ${decodeURIComponent("%F0%9F%8C%BC")} ${atob("ZGFpc3lVSQ==")} ${packageVersion} ${atob("Ki8=")}`);
      firstRun = false;
    }
    const applyTheme = (themeName, flags) => {
      const theme = themesObject[themeName];
      if (theme) {
        const themeControllerClass = `${prefix}theme-controller`;
        let selector = `${root}:has(input.${themeControllerClass}[value=${themeName}]:checked),[data-theme=${themeName}]`;
        if (flags.includes("--default")) {
          selector = `:where(${root}),${selector}`;
        }
        addBase({ [selector]: theme });
        if (flags.includes("--prefersdark")) {
          const darkSelector = root === ":root" ? ":root:not([data-theme])" : `${root}:not([data-theme])`;
          addBase({ "@media (prefers-color-scheme: dark)": { [darkSelector]: theme } });
        }
      }
    };
    if (themes === "all") {
      if (themesObject["light"]) {
        applyTheme("light", ["--default"]);
      }
      if (themesObject["dark"]) {
        const darkSelector = root === ":root" ? ":root:not([data-theme])" : `${root}:not([data-theme])`;
        addBase({ "@media (prefers-color-scheme: dark)": { [darkSelector]: themesObject["dark"] } });
      }
      themeOrder_default.forEach((themeName) => {
        if (themesObject[themeName]) {
          applyTheme(themeName, []);
        }
      });
    } else if (themes) {
      const themeArray = Array.isArray(themes) ? themes : [themes];
      if (themeArray.length === 1 && themeArray[0].includes("--default")) {
        const [themeName, ...flags] = themeArray[0].split(" ");
        applyTheme(themeName, flags);
        return { include, exclude, prefix };
      }
      themeArray.forEach((themeOption) => {
        const [themeName, ...flags] = themeOption.split(" ");
        if (flags.includes("--default")) {
          applyTheme(themeName, ["--default"]);
        }
      });
      themeArray.forEach((themeOption) => {
        const [themeName, ...flags] = themeOption.split(" ");
        if (flags.includes("--prefersdark")) {
          const darkSelector = root === ":root" ? ":root:not([data-theme])" : `${root}:not([data-theme])`;
          addBase({
            "@media (prefers-color-scheme: dark)": { [darkSelector]: themesObject[themeName] }
          });
        }
      });
      themeArray.forEach((themeOption) => {
        const [themeName] = themeOption.split(" ");
        applyTheme(themeName, []);
      });
    }
    return { include, exclude, prefix };
  };
})();

// packages/daisyui/functions/plugin.js
var plugin = {
  withOptions: (pluginFunction, configFunction = () => ({})) => {
    const optionsFunction = (options) => {
      const handler = pluginFunction(options);
      const config = configFunction(options);
      return { handler, config };
    };
    optionsFunction.__isOptionsFunction = true;
    return optionsFunction;
  }
};

// packages/daisyui/functions/variables.js
var variables_default = {
  colors: {
    "base-100": "var(--color-base-100)",
    "base-200": "var(--color-base-200)",
    "base-300": "var(--color-base-300)",
    "base-content": "var(--color-base-content)",
    primary: "var(--color-primary)",
    "primary-content": "var(--color-primary-content)",
    secondary: "var(--color-secondary)",
    "secondary-content": "var(--color-secondary-content)",
    accent: "var(--color-accent)",
    "accent-content": "var(--color-accent-content)",
    neutral: "var(--color-neutral)",
    "neutral-content": "var(--color-neutral-content)",
    info: "var(--color-info)",
    "info-content": "var(--color-info-content)",
    success: "var(--color-success)",
    "success-content": "var(--color-success-content)",
    warning: "var(--color-warning)",
    "warning-content": "var(--color-warning-content)",
    error: "var(--color-error)",
    "error-content": "var(--color-error-content)"
  },
  borderRadius: {
    selector: "var(--radius-selector)",
    field: "var(--radius-field)",
    box: "var(--radius-box)"
  }
};

// packages/daisyui/theme/object.js
var object_default = { light: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(98% 0 0)", "--color-base-300": "oklch(95% 0 0)", "--color-base-content": "oklch(21% 0.006 285.885)", "--color-primary": "oklch(45% 0.24 277.023)", "--color-primary-content": "oklch(93% 0.034 272.788)", "--color-secondary": "oklch(65% 0.241 354.308)", "--color-secondary-content": "oklch(94% 0.028 342.258)", "--color-accent": "oklch(77% 0.152 181.912)", "--color-accent-content": "oklch(38% 0.063 188.416)", "--color-neutral": "oklch(14% 0.005 285.823)", "--color-neutral-content": "oklch(92% 0.004 286.32)", "--color-info": "oklch(74% 0.16 232.661)", "--color-info-content": "oklch(29% 0.066 243.157)", "--color-success": "oklch(76% 0.177 163.223)", "--color-success-content": "oklch(37% 0.077 168.94)", "--color-warning": "oklch(82% 0.189 84.429)", "--color-warning-content": "oklch(41% 0.112 45.904)", "--color-error": "oklch(71% 0.194 13.428)", "--color-error-content": "oklch(27% 0.105 12.094)", "--radius-selector": "0.5rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, synthwave: { "color-scheme": "dark", "--color-base-100": "oklch(15% 0.09 281.288)", "--color-base-200": "oklch(20% 0.09 281.288)", "--color-base-300": "oklch(25% 0.09 281.288)", "--color-base-content": "oklch(78% 0.115 274.713)", "--color-primary": "oklch(71% 0.202 349.761)", "--color-primary-content": "oklch(28% 0.109 3.907)", "--color-secondary": "oklch(82% 0.111 230.318)", "--color-secondary-content": "oklch(29% 0.066 243.157)", "--color-accent": "oklch(75% 0.183 55.934)", "--color-accent-content": "oklch(26% 0.079 36.259)", "--color-neutral": "oklch(45% 0.24 277.023)", "--color-neutral-content": "oklch(87% 0.065 274.039)", "--color-info": "oklch(74% 0.16 232.661)", "--color-info-content": "oklch(29% 0.066 243.157)", "--color-success": "oklch(77% 0.152 181.912)", "--color-success-content": "oklch(27% 0.046 192.524)", "--color-warning": "oklch(90% 0.182 98.111)", "--color-warning-content": "oklch(42% 0.095 57.708)", "--color-error": "oklch(73.7% 0.121 32.639)", "--color-error-content": "oklch(23.501% 0.096 290.329)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, emerald: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(93% 0 0)", "--color-base-300": "oklch(86% 0 0)", "--color-base-content": "oklch(35.519% 0.032 262.988)", "--color-primary": "oklch(76.662% 0.135 153.45)", "--color-primary-content": "oklch(33.387% 0.04 162.24)", "--color-secondary": "oklch(61.302% 0.202 261.294)", "--color-secondary-content": "oklch(100% 0 0)", "--color-accent": "oklch(72.772% 0.149 33.2)", "--color-accent-content": "oklch(0% 0 0)", "--color-neutral": "oklch(35.519% 0.032 262.988)", "--color-neutral-content": "oklch(98.462% 0.001 247.838)", "--color-info": "oklch(72.06% 0.191 231.6)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(64.8% 0.15 160)", "--color-success-content": "oklch(0% 0 0)", "--color-warning": "oklch(84.71% 0.199 83.87)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(71.76% 0.221 22.18)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, cupcake: { "color-scheme": "light", "--color-base-100": "oklch(97.788% 0.004 56.375)", "--color-base-200": "oklch(93.982% 0.007 61.449)", "--color-base-300": "oklch(91.586% 0.006 53.44)", "--color-base-content": "oklch(23.574% 0.066 313.189)", "--color-primary": "oklch(85% 0.138 181.071)", "--color-primary-content": "oklch(43% 0.078 188.216)", "--color-secondary": "oklch(89% 0.061 343.231)", "--color-secondary-content": "oklch(45% 0.187 3.815)", "--color-accent": "oklch(90% 0.076 70.697)", "--color-accent-content": "oklch(47% 0.157 37.304)", "--color-neutral": "oklch(27% 0.006 286.033)", "--color-neutral-content": "oklch(92% 0.004 286.32)", "--color-info": "oklch(68% 0.169 237.323)", "--color-info-content": "oklch(29% 0.066 243.157)", "--color-success": "oklch(69% 0.17 162.48)", "--color-success-content": "oklch(26% 0.051 172.552)", "--color-warning": "oklch(79% 0.184 86.047)", "--color-warning-content": "oklch(28% 0.066 53.813)", "--color-error": "oklch(64% 0.246 16.439)", "--color-error-content": "oklch(27% 0.105 12.094)", "--radius-selector": "1rem", "--radius-field": "2rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "2px", "--depth": "1", "--noise": "0" }, dark: { "color-scheme": "dark", "--color-base-100": "oklch(25.33% 0.016 252.42)", "--color-base-200": "oklch(23.26% 0.014 253.1)", "--color-base-300": "oklch(21.15% 0.012 254.09)", "--color-base-content": "oklch(97.807% 0.029 256.847)", "--color-primary": "oklch(58% 0.233 277.117)", "--color-primary-content": "oklch(96% 0.018 272.314)", "--color-secondary": "oklch(65% 0.241 354.308)", "--color-secondary-content": "oklch(94% 0.028 342.258)", "--color-accent": "oklch(77% 0.152 181.912)", "--color-accent-content": "oklch(38% 0.063 188.416)", "--color-neutral": "oklch(14% 0.005 285.823)", "--color-neutral-content": "oklch(92% 0.004 286.32)", "--color-info": "oklch(74% 0.16 232.661)", "--color-info-content": "oklch(29% 0.066 243.157)", "--color-success": "oklch(76% 0.177 163.223)", "--color-success-content": "oklch(37% 0.077 168.94)", "--color-warning": "oklch(82% 0.189 84.429)", "--color-warning-content": "oklch(41% 0.112 45.904)", "--color-error": "oklch(71% 0.194 13.428)", "--color-error-content": "oklch(27% 0.105 12.094)", "--radius-selector": "0.5rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, night: { "color-scheme": "dark", "--color-base-100": "oklch(20.768% 0.039 265.754)", "--color-base-200": "oklch(19.314% 0.037 265.754)", "--color-base-300": "oklch(17.86% 0.034 265.754)", "--color-base-content": "oklch(84.153% 0.007 265.754)", "--color-primary": "oklch(75.351% 0.138 232.661)", "--color-primary-content": "oklch(15.07% 0.027 232.661)", "--color-secondary": "oklch(68.011% 0.158 276.934)", "--color-secondary-content": "oklch(13.602% 0.031 276.934)", "--color-accent": "oklch(72.36% 0.176 350.048)", "--color-accent-content": "oklch(14.472% 0.035 350.048)", "--color-neutral": "oklch(27.949% 0.036 260.03)", "--color-neutral-content": "oklch(85.589% 0.007 260.03)", "--color-info": "oklch(68.455% 0.148 237.251)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(78.452% 0.132 181.911)", "--color-success-content": "oklch(15.69% 0.026 181.911)", "--color-warning": "oklch(83.242% 0.139 82.95)", "--color-warning-content": "oklch(16.648% 0.027 82.95)", "--color-error": "oklch(71.785% 0.17 13.118)", "--color-error-content": "oklch(14.357% 0.034 13.118)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, pastel: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(98.462% 0.001 247.838)", "--color-base-300": "oklch(92.462% 0.001 247.838)", "--color-base-content": "oklch(20% 0 0)", "--color-primary": "oklch(90% 0.063 306.703)", "--color-primary-content": "oklch(49% 0.265 301.924)", "--color-secondary": "oklch(89% 0.058 10.001)", "--color-secondary-content": "oklch(51% 0.222 16.935)", "--color-accent": "oklch(90% 0.093 164.15)", "--color-accent-content": "oklch(50% 0.118 165.612)", "--color-neutral": "oklch(55% 0.046 257.417)", "--color-neutral-content": "oklch(92% 0.013 255.508)", "--color-info": "oklch(86% 0.127 207.078)", "--color-info-content": "oklch(52% 0.105 223.128)", "--color-success": "oklch(87% 0.15 154.449)", "--color-success-content": "oklch(52% 0.154 150.069)", "--color-warning": "oklch(83% 0.128 66.29)", "--color-warning-content": "oklch(55% 0.195 38.402)", "--color-error": "oklch(80% 0.114 19.571)", "--color-error-content": "oklch(50% 0.213 27.518)", "--radius-selector": "1rem", "--radius-field": "2rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "2px", "--depth": "0", "--noise": "0" }, halloween: { "color-scheme": "dark", "--color-base-100": "oklch(21% 0.006 56.043)", "--color-base-200": "oklch(14% 0.004 49.25)", "--color-base-300": "oklch(0% 0 0)", "--color-base-content": "oklch(84.955% 0 0)", "--color-primary": "oklch(77.48% 0.204 60.62)", "--color-primary-content": "oklch(19.693% 0.004 196.779)", "--color-secondary": "oklch(45.98% 0.248 305.03)", "--color-secondary-content": "oklch(89.196% 0.049 305.03)", "--color-accent": "oklch(64.8% 0.223 136.073)", "--color-accent-content": "oklch(0% 0 0)", "--color-neutral": "oklch(24.371% 0.046 65.681)", "--color-neutral-content": "oklch(84.874% 0.009 65.681)", "--color-info": "oklch(54.615% 0.215 262.88)", "--color-info-content": "oklch(90.923% 0.043 262.88)", "--color-success": "oklch(62.705% 0.169 149.213)", "--color-success-content": "oklch(12.541% 0.033 149.213)", "--color-warning": "oklch(66.584% 0.157 58.318)", "--color-warning-content": "oklch(13.316% 0.031 58.318)", "--color-error": "oklch(65.72% 0.199 27.33)", "--color-error-content": "oklch(13.144% 0.039 27.33)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, lofi: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(97% 0 0)", "--color-base-300": "oklch(94% 0 0)", "--color-base-content": "oklch(0% 0 0)", "--color-primary": "oklch(15.906% 0 0)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(21.455% 0.001 17.278)", "--color-secondary-content": "oklch(100% 0 0)", "--color-accent": "oklch(26.861% 0 0)", "--color-accent-content": "oklch(100% 0 0)", "--color-neutral": "oklch(0% 0 0)", "--color-neutral-content": "oklch(100% 0 0)", "--color-info": "oklch(79.54% 0.103 205.9)", "--color-info-content": "oklch(15.908% 0.02 205.9)", "--color-success": "oklch(90.13% 0.153 164.14)", "--color-success-content": "oklch(18.026% 0.03 164.14)", "--color-warning": "oklch(88.37% 0.135 79.94)", "--color-warning-content": "oklch(17.674% 0.027 79.94)", "--color-error": "oklch(78.66% 0.15 28.47)", "--color-error-content": "oklch(15.732% 0.03 28.47)", "--radius-selector": "2rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, garden: { "color-scheme": "light", "--color-base-100": "oklch(92.951% 0.002 17.197)", "--color-base-200": "oklch(86.445% 0.002 17.197)", "--color-base-300": "oklch(79.938% 0.001 17.197)", "--color-base-content": "oklch(16.961% 0.001 17.32)", "--color-primary": "oklch(62.45% 0.278 3.836)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(48.495% 0.11 355.095)", "--color-secondary-content": "oklch(89.699% 0.022 355.095)", "--color-accent": "oklch(56.273% 0.054 154.39)", "--color-accent-content": "oklch(100% 0 0)", "--color-neutral": "oklch(24.155% 0.049 89.07)", "--color-neutral-content": "oklch(92.951% 0.002 17.197)", "--color-info": "oklch(72.06% 0.191 231.6)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(64.8% 0.15 160)", "--color-success-content": "oklch(0% 0 0)", "--color-warning": "oklch(84.71% 0.199 83.87)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(71.76% 0.221 22.18)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, silk: { "color-scheme": "light", "--color-base-100": "oklch(97% 0.0035 67.78)", "--color-base-200": "oklch(95% 0.0081 61.42)", "--color-base-300": "oklch(90% 0.0081 61.42)", "--color-base-content": "oklch(40% 0.0081 61.42)", "--color-primary": "oklch(23.27% 0.0249 284.3)", "--color-primary-content": "oklch(94.22% 0.2505 117.44)", "--color-secondary": "oklch(23.27% 0.0249 284.3)", "--color-secondary-content": "oklch(73.92% 0.2135 50.94)", "--color-accent": "oklch(23.27% 0.0249 284.3)", "--color-accent-content": "oklch(88.92% 0.2061 189.9)", "--color-neutral": "oklch(20% 0 0)", "--color-neutral-content": "oklch(80% 0.0081 61.42)", "--color-info": "oklch(80.39% 0.1148 241.68)", "--color-info-content": "oklch(30.39% 0.1148 241.68)", "--color-success": "oklch(83.92% 0.0901 136.87)", "--color-success-content": "oklch(23.92% 0.0901 136.87)", "--color-warning": "oklch(83.92% 0.1085 80)", "--color-warning-content": "oklch(43.92% 0.1085 80)", "--color-error": "oklch(75.1% 0.1814 22.37)", "--color-error-content": "oklch(35.1% 0.1814 22.37)", "--radius-selector": "2rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "2px", "--depth": "1", "--noise": "0" }, forest: { "color-scheme": "dark", "--color-base-100": "oklch(20.84% 0.008 17.911)", "--color-base-200": "oklch(18.522% 0.007 17.911)", "--color-base-300": "oklch(16.203% 0.007 17.911)", "--color-base-content": "oklch(83.768% 0.001 17.911)", "--color-primary": "oklch(68.628% 0.185 148.958)", "--color-primary-content": "oklch(0% 0 0)", "--color-secondary": "oklch(69.776% 0.135 168.327)", "--color-secondary-content": "oklch(13.955% 0.027 168.327)", "--color-accent": "oklch(70.628% 0.119 185.713)", "--color-accent-content": "oklch(14.125% 0.023 185.713)", "--color-neutral": "oklch(30.698% 0.039 171.364)", "--color-neutral-content": "oklch(86.139% 0.007 171.364)", "--color-info": "oklch(72.06% 0.191 231.6)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(64.8% 0.15 160)", "--color-success-content": "oklch(0% 0 0)", "--color-warning": "oklch(84.71% 0.199 83.87)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(71.76% 0.221 22.18)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "1rem", "--radius-field": "2rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, corporate: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(93% 0 0)", "--color-base-300": "oklch(86% 0 0)", "--color-base-content": "oklch(22.389% 0.031 278.072)", "--color-primary": "oklch(58% 0.158 241.966)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(55% 0.046 257.417)", "--color-secondary-content": "oklch(100% 0 0)", "--color-accent": "oklch(60% 0.118 184.704)", "--color-accent-content": "oklch(100% 0 0)", "--color-neutral": "oklch(0% 0 0)", "--color-neutral-content": "oklch(100% 0 0)", "--color-info": "oklch(60% 0.126 221.723)", "--color-info-content": "oklch(100% 0 0)", "--color-success": "oklch(62% 0.194 149.214)", "--color-success-content": "oklch(100% 0 0)", "--color-warning": "oklch(85% 0.199 91.936)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(70% 0.191 22.216)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "0.25rem", "--radius-field": "0.25rem", "--radius-box": "0.25rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, caramellatte: { "color-scheme": "light", "--color-base-100": "oklch(98% 0.016 73.684)", "--color-base-200": "oklch(95% 0.038 75.164)", "--color-base-300": "oklch(90% 0.076 70.697)", "--color-base-content": "oklch(40% 0.123 38.172)", "--color-primary": "oklch(0% 0 0)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(22.45% 0.075 37.85)", "--color-secondary-content": "oklch(90% 0.076 70.697)", "--color-accent": "oklch(46.44% 0.111 37.85)", "--color-accent-content": "oklch(90% 0.076 70.697)", "--color-neutral": "oklch(55% 0.195 38.402)", "--color-neutral-content": "oklch(98% 0.016 73.684)", "--color-info": "oklch(42% 0.199 265.638)", "--color-info-content": "oklch(90% 0.076 70.697)", "--color-success": "oklch(43% 0.095 166.913)", "--color-success-content": "oklch(90% 0.076 70.697)", "--color-warning": "oklch(82% 0.189 84.429)", "--color-warning-content": "oklch(41% 0.112 45.904)", "--color-error": "oklch(70% 0.191 22.216)", "--color-error-content": "oklch(39% 0.141 25.723)", "--radius-selector": "2rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "2px", "--depth": "1", "--noise": "1" }, coffee: { "color-scheme": "dark", "--color-base-100": "oklch(24% 0.023 329.708)", "--color-base-200": "oklch(21% 0.021 329.708)", "--color-base-300": "oklch(16% 0.019 329.708)", "--color-base-content": "oklch(72.354% 0.092 79.129)", "--color-primary": "oklch(71.996% 0.123 62.756)", "--color-primary-content": "oklch(14.399% 0.024 62.756)", "--color-secondary": "oklch(34.465% 0.029 199.194)", "--color-secondary-content": "oklch(86.893% 0.005 199.194)", "--color-accent": "oklch(42.621% 0.074 224.389)", "--color-accent-content": "oklch(88.524% 0.014 224.389)", "--color-neutral": "oklch(16.51% 0.015 326.261)", "--color-neutral-content": "oklch(83.302% 0.003 326.261)", "--color-info": "oklch(79.49% 0.063 184.558)", "--color-info-content": "oklch(15.898% 0.012 184.558)", "--color-success": "oklch(74.722% 0.072 131.116)", "--color-success-content": "oklch(14.944% 0.014 131.116)", "--color-warning": "oklch(88.15% 0.14 87.722)", "--color-warning-content": "oklch(17.63% 0.028 87.722)", "--color-error": "oklch(77.318% 0.128 31.871)", "--color-error-content": "oklch(15.463% 0.025 31.871)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, acid: { "color-scheme": "light", "--color-base-100": "oklch(98% 0 0)", "--color-base-200": "oklch(95% 0 0)", "--color-base-300": "oklch(91% 0 0)", "--color-base-content": "oklch(0% 0 0)", "--color-primary": "oklch(71.9% 0.357 330.759)", "--color-primary-content": "oklch(14.38% 0.071 330.759)", "--color-secondary": "oklch(73.37% 0.224 48.25)", "--color-secondary-content": "oklch(14.674% 0.044 48.25)", "--color-accent": "oklch(92.78% 0.264 122.962)", "--color-accent-content": "oklch(18.556% 0.052 122.962)", "--color-neutral": "oklch(21.31% 0.128 278.68)", "--color-neutral-content": "oklch(84.262% 0.025 278.68)", "--color-info": "oklch(60.72% 0.227 252.05)", "--color-info-content": "oklch(12.144% 0.045 252.05)", "--color-success": "oklch(85.72% 0.266 158.53)", "--color-success-content": "oklch(17.144% 0.053 158.53)", "--color-warning": "oklch(91.01% 0.212 100.5)", "--color-warning-content": "oklch(18.202% 0.042 100.5)", "--color-error": "oklch(64.84% 0.293 29.349)", "--color-error-content": "oklch(12.968% 0.058 29.349)", "--radius-selector": "1rem", "--radius-field": "1rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, cyberpunk: { "color-scheme": "light", "--color-base-100": "oklch(94.51% 0.179 104.32)", "--color-base-200": "oklch(91.51% 0.179 104.32)", "--color-base-300": "oklch(85.51% 0.179 104.32)", "--color-base-content": "oklch(0% 0 0)", "--color-primary": "oklch(74.22% 0.209 6.35)", "--color-primary-content": "oklch(14.844% 0.041 6.35)", "--color-secondary": "oklch(83.33% 0.184 204.72)", "--color-secondary-content": "oklch(16.666% 0.036 204.72)", "--color-accent": "oklch(71.86% 0.217 310.43)", "--color-accent-content": "oklch(14.372% 0.043 310.43)", "--color-neutral": "oklch(23.04% 0.065 269.31)", "--color-neutral-content": "oklch(94.51% 0.179 104.32)", "--color-info": "oklch(72.06% 0.191 231.6)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(64.8% 0.15 160)", "--color-success-content": "oklch(0% 0 0)", "--color-warning": "oklch(84.71% 0.199 83.87)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(71.76% 0.221 22.18)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "0rem", "--radius-field": "0rem", "--radius-box": "0rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, aqua: { "color-scheme": "dark", "--color-base-100": "oklch(37% 0.146 265.522)", "--color-base-200": "oklch(28% 0.091 267.935)", "--color-base-300": "oklch(22% 0.091 267.935)", "--color-base-content": "oklch(90% 0.058 230.902)", "--color-primary": "oklch(85.661% 0.144 198.645)", "--color-primary-content": "oklch(40.124% 0.068 197.603)", "--color-secondary": "oklch(60.682% 0.108 309.782)", "--color-secondary-content": "oklch(96% 0.016 293.756)", "--color-accent": "oklch(93.426% 0.102 94.555)", "--color-accent-content": "oklch(18.685% 0.02 94.555)", "--color-neutral": "oklch(27% 0.146 265.522)", "--color-neutral-content": "oklch(80% 0.146 265.522)", "--color-info": "oklch(54.615% 0.215 262.88)", "--color-info-content": "oklch(90.923% 0.043 262.88)", "--color-success": "oklch(62.705% 0.169 149.213)", "--color-success-content": "oklch(12.541% 0.033 149.213)", "--color-warning": "oklch(66.584% 0.157 58.318)", "--color-warning-content": "oklch(27% 0.077 45.635)", "--color-error": "oklch(73.95% 0.19 27.33)", "--color-error-content": "oklch(14.79% 0.038 27.33)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, business: { "color-scheme": "dark", "--color-base-100": "oklch(24.353% 0 0)", "--color-base-200": "oklch(22.648% 0 0)", "--color-base-300": "oklch(20.944% 0 0)", "--color-base-content": "oklch(84.87% 0 0)", "--color-primary": "oklch(41.703% 0.099 251.473)", "--color-primary-content": "oklch(88.34% 0.019 251.473)", "--color-secondary": "oklch(64.092% 0.027 229.389)", "--color-secondary-content": "oklch(12.818% 0.005 229.389)", "--color-accent": "oklch(67.271% 0.167 35.791)", "--color-accent-content": "oklch(13.454% 0.033 35.791)", "--color-neutral": "oklch(27.441% 0.013 253.041)", "--color-neutral-content": "oklch(85.488% 0.002 253.041)", "--color-info": "oklch(62.616% 0.143 240.033)", "--color-info-content": "oklch(12.523% 0.028 240.033)", "--color-success": "oklch(70.226% 0.094 156.596)", "--color-success-content": "oklch(14.045% 0.018 156.596)", "--color-warning": "oklch(77.482% 0.115 81.519)", "--color-warning-content": "oklch(15.496% 0.023 81.519)", "--color-error": "oklch(51.61% 0.146 29.674)", "--color-error-content": "oklch(90.322% 0.029 29.674)", "--radius-selector": "0rem", "--radius-field": "0.25rem", "--radius-box": "0.25rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, fantasy: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(93% 0 0)", "--color-base-300": "oklch(86% 0 0)", "--color-base-content": "oklch(27.807% 0.029 256.847)", "--color-primary": "oklch(37.45% 0.189 325.02)", "--color-primary-content": "oklch(87.49% 0.037 325.02)", "--color-secondary": "oklch(53.92% 0.162 241.36)", "--color-secondary-content": "oklch(90.784% 0.032 241.36)", "--color-accent": "oklch(75.98% 0.204 56.72)", "--color-accent-content": "oklch(15.196% 0.04 56.72)", "--color-neutral": "oklch(27.807% 0.029 256.847)", "--color-neutral-content": "oklch(85.561% 0.005 256.847)", "--color-info": "oklch(72.06% 0.191 231.6)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(64.8% 0.15 160)", "--color-success-content": "oklch(0% 0 0)", "--color-warning": "oklch(84.71% 0.199 83.87)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(71.76% 0.221 22.18)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, bumblebee: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(97% 0 0)", "--color-base-300": "oklch(92% 0 0)", "--color-base-content": "oklch(20% 0 0)", "--color-primary": "oklch(85% 0.199 91.936)", "--color-primary-content": "oklch(42% 0.095 57.708)", "--color-secondary": "oklch(75% 0.183 55.934)", "--color-secondary-content": "oklch(40% 0.123 38.172)", "--color-accent": "oklch(0% 0 0)", "--color-accent-content": "oklch(100% 0 0)", "--color-neutral": "oklch(37% 0.01 67.558)", "--color-neutral-content": "oklch(92% 0.003 48.717)", "--color-info": "oklch(74% 0.16 232.661)", "--color-info-content": "oklch(39% 0.09 240.876)", "--color-success": "oklch(76% 0.177 163.223)", "--color-success-content": "oklch(37% 0.077 168.94)", "--color-warning": "oklch(82% 0.189 84.429)", "--color-warning-content": "oklch(41% 0.112 45.904)", "--color-error": "oklch(70% 0.191 22.216)", "--color-error-content": "oklch(39% 0.141 25.723)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, sunset: { "color-scheme": "dark", "--color-base-100": "oklch(22% 0.019 237.69)", "--color-base-200": "oklch(20% 0.019 237.69)", "--color-base-300": "oklch(18% 0.019 237.69)", "--color-base-content": "oklch(77.383% 0.043 245.096)", "--color-primary": "oklch(74.703% 0.158 39.947)", "--color-primary-content": "oklch(14.94% 0.031 39.947)", "--color-secondary": "oklch(72.537% 0.177 2.72)", "--color-secondary-content": "oklch(14.507% 0.035 2.72)", "--color-accent": "oklch(71.294% 0.166 299.844)", "--color-accent-content": "oklch(14.258% 0.033 299.844)", "--color-neutral": "oklch(26% 0.019 237.69)", "--color-neutral-content": "oklch(70% 0.019 237.69)", "--color-info": "oklch(85.559% 0.085 206.015)", "--color-info-content": "oklch(17.111% 0.017 206.015)", "--color-success": "oklch(85.56% 0.085 144.778)", "--color-success-content": "oklch(17.112% 0.017 144.778)", "--color-warning": "oklch(85.569% 0.084 74.427)", "--color-warning-content": "oklch(17.113% 0.016 74.427)", "--color-error": "oklch(85.511% 0.078 16.886)", "--color-error-content": "oklch(17.102% 0.015 16.886)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, retro: { "color-scheme": "light", "--color-base-100": "oklch(91.637% 0.034 90.515)", "--color-base-200": "oklch(88.272% 0.049 91.774)", "--color-base-300": "oklch(84.133% 0.065 90.856)", "--color-base-content": "oklch(41% 0.112 45.904)", "--color-primary": "oklch(80% 0.114 19.571)", "--color-primary-content": "oklch(39% 0.141 25.723)", "--color-secondary": "oklch(92% 0.084 155.995)", "--color-secondary-content": "oklch(44% 0.119 151.328)", "--color-accent": "oklch(68% 0.162 75.834)", "--color-accent-content": "oklch(41% 0.112 45.904)", "--color-neutral": "oklch(44% 0.011 73.639)", "--color-neutral-content": "oklch(86% 0.005 56.366)", "--color-info": "oklch(58% 0.158 241.966)", "--color-info-content": "oklch(96% 0.059 95.617)", "--color-success": "oklch(51% 0.096 186.391)", "--color-success-content": "oklch(96% 0.059 95.617)", "--color-warning": "oklch(64% 0.222 41.116)", "--color-warning-content": "oklch(96% 0.059 95.617)", "--color-error": "oklch(70% 0.191 22.216)", "--color-error-content": "oklch(40% 0.123 38.172)", "--radius-selector": "0.25rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, nord: { "color-scheme": "light", "--color-base-100": "oklch(95.127% 0.007 260.731)", "--color-base-200": "oklch(93.299% 0.01 261.788)", "--color-base-300": "oklch(89.925% 0.016 262.749)", "--color-base-content": "oklch(32.437% 0.022 264.182)", "--color-primary": "oklch(59.435% 0.077 254.027)", "--color-primary-content": "oklch(11.887% 0.015 254.027)", "--color-secondary": "oklch(69.651% 0.059 248.687)", "--color-secondary-content": "oklch(13.93% 0.011 248.687)", "--color-accent": "oklch(77.464% 0.062 217.469)", "--color-accent-content": "oklch(15.492% 0.012 217.469)", "--color-neutral": "oklch(45.229% 0.035 264.131)", "--color-neutral-content": "oklch(89.925% 0.016 262.749)", "--color-info": "oklch(69.207% 0.062 332.664)", "--color-info-content": "oklch(13.841% 0.012 332.664)", "--color-success": "oklch(76.827% 0.074 131.063)", "--color-success-content": "oklch(15.365% 0.014 131.063)", "--color-warning": "oklch(85.486% 0.089 84.093)", "--color-warning-content": "oklch(17.097% 0.017 84.093)", "--color-error": "oklch(60.61% 0.12 15.341)", "--color-error-content": "oklch(12.122% 0.024 15.341)", "--radius-selector": "1rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, dim: { "color-scheme": "dark", "--color-base-100": "oklch(30.857% 0.023 264.149)", "--color-base-200": "oklch(28.036% 0.019 264.182)", "--color-base-300": "oklch(26.346% 0.018 262.177)", "--color-base-content": "oklch(82.901% 0.031 222.959)", "--color-primary": "oklch(86.133% 0.141 139.549)", "--color-primary-content": "oklch(17.226% 0.028 139.549)", "--color-secondary": "oklch(73.375% 0.165 35.353)", "--color-secondary-content": "oklch(14.675% 0.033 35.353)", "--color-accent": "oklch(74.229% 0.133 311.379)", "--color-accent-content": "oklch(14.845% 0.026 311.379)", "--color-neutral": "oklch(24.731% 0.02 264.094)", "--color-neutral-content": "oklch(82.901% 0.031 222.959)", "--color-info": "oklch(86.078% 0.142 206.182)", "--color-info-content": "oklch(17.215% 0.028 206.182)", "--color-success": "oklch(86.171% 0.142 166.534)", "--color-success-content": "oklch(17.234% 0.028 166.534)", "--color-warning": "oklch(86.163% 0.142 94.818)", "--color-warning-content": "oklch(17.232% 0.028 94.818)", "--color-error": "oklch(82.418% 0.099 33.756)", "--color-error-content": "oklch(16.483% 0.019 33.756)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, winter: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(97.466% 0.011 259.822)", "--color-base-300": "oklch(93.268% 0.016 262.751)", "--color-base-content": "oklch(41.886% 0.053 255.824)", "--color-primary": "oklch(56.86% 0.255 257.57)", "--color-primary-content": "oklch(91.372% 0.051 257.57)", "--color-secondary": "oklch(42.551% 0.161 282.339)", "--color-secondary-content": "oklch(88.51% 0.032 282.339)", "--color-accent": "oklch(59.939% 0.191 335.171)", "--color-accent-content": "oklch(11.988% 0.038 335.171)", "--color-neutral": "oklch(19.616% 0.063 257.651)", "--color-neutral-content": "oklch(83.923% 0.012 257.651)", "--color-info": "oklch(88.127% 0.085 214.515)", "--color-info-content": "oklch(17.625% 0.017 214.515)", "--color-success": "oklch(80.494% 0.077 197.823)", "--color-success-content": "oklch(16.098% 0.015 197.823)", "--color-warning": "oklch(89.172% 0.045 71.47)", "--color-warning-content": "oklch(17.834% 0.009 71.47)", "--color-error": "oklch(73.092% 0.11 20.076)", "--color-error-content": "oklch(14.618% 0.022 20.076)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, abyss: { "color-scheme": "dark", "--color-base-100": "oklch(20% 0.08 209)", "--color-base-200": "oklch(15% 0.08 209)", "--color-base-300": "oklch(10% 0.08 209)", "--color-base-content": "oklch(90% 0.076 70.697)", "--color-primary": "oklch(92% 0.2653 125)", "--color-primary-content": "oklch(50% 0.2653 125)", "--color-secondary": "oklch(83.27% 0.0764 298.3)", "--color-secondary-content": "oklch(43.27% 0.0764 298.3)", "--color-accent": "oklch(43% 0 0)", "--color-accent-content": "oklch(98% 0 0)", "--color-neutral": "oklch(30% 0.08 209)", "--color-neutral-content": "oklch(90% 0.076 70.697)", "--color-info": "oklch(74% 0.16 232.661)", "--color-info-content": "oklch(29% 0.066 243.157)", "--color-success": "oklch(79% 0.209 151.711)", "--color-success-content": "oklch(26% 0.065 152.934)", "--color-warning": "oklch(84.8% 0.1962 84.62)", "--color-warning-content": "oklch(44.8% 0.1962 84.62)", "--color-error": "oklch(65% 0.1985 24.22)", "--color-error-content": "oklch(27% 0.1985 24.22)", "--radius-selector": "2rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, valentine: { "color-scheme": "light", "--color-base-100": "oklch(97% 0.014 343.198)", "--color-base-200": "oklch(94% 0.028 342.258)", "--color-base-300": "oklch(89% 0.061 343.231)", "--color-base-content": "oklch(52% 0.223 3.958)", "--color-primary": "oklch(65% 0.241 354.308)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(62% 0.265 303.9)", "--color-secondary-content": "oklch(97% 0.014 308.299)", "--color-accent": "oklch(82% 0.111 230.318)", "--color-accent-content": "oklch(39% 0.09 240.876)", "--color-neutral": "oklch(40% 0.153 2.432)", "--color-neutral-content": "oklch(89% 0.061 343.231)", "--color-info": "oklch(86% 0.127 207.078)", "--color-info-content": "oklch(44% 0.11 240.79)", "--color-success": "oklch(84% 0.143 164.978)", "--color-success-content": "oklch(43% 0.095 166.913)", "--color-warning": "oklch(75% 0.183 55.934)", "--color-warning-content": "oklch(26% 0.079 36.259)", "--color-error": "oklch(63% 0.237 25.331)", "--color-error-content": "oklch(97% 0.013 17.38)", "--radius-selector": "1rem", "--radius-field": "2rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, cmyk: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(95% 0 0)", "--color-base-300": "oklch(90% 0 0)", "--color-base-content": "oklch(20% 0 0)", "--color-primary": "oklch(71.772% 0.133 239.443)", "--color-primary-content": "oklch(14.354% 0.026 239.443)", "--color-secondary": "oklch(64.476% 0.202 359.339)", "--color-secondary-content": "oklch(12.895% 0.04 359.339)", "--color-accent": "oklch(94.228% 0.189 105.306)", "--color-accent-content": "oklch(18.845% 0.037 105.306)", "--color-neutral": "oklch(21.778% 0 0)", "--color-neutral-content": "oklch(84.355% 0 0)", "--color-info": "oklch(68.475% 0.094 217.284)", "--color-info-content": "oklch(13.695% 0.018 217.284)", "--color-success": "oklch(46.949% 0.162 321.406)", "--color-success-content": "oklch(89.389% 0.032 321.406)", "--color-warning": "oklch(71.236% 0.159 52.023)", "--color-warning-content": "oklch(14.247% 0.031 52.023)", "--color-error": "oklch(62.013% 0.208 28.717)", "--color-error-content": "oklch(12.402% 0.041 28.717)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, wireframe: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(97% 0 0)", "--color-base-300": "oklch(94% 0 0)", "--color-base-content": "oklch(20% 0 0)", "--color-primary": "oklch(87% 0 0)", "--color-primary-content": "oklch(26% 0 0)", "--color-secondary": "oklch(87% 0 0)", "--color-secondary-content": "oklch(26% 0 0)", "--color-accent": "oklch(87% 0 0)", "--color-accent-content": "oklch(26% 0 0)", "--color-neutral": "oklch(87% 0 0)", "--color-neutral-content": "oklch(26% 0 0)", "--color-info": "oklch(44% 0.11 240.79)", "--color-info-content": "oklch(90% 0.058 230.902)", "--color-success": "oklch(43% 0.095 166.913)", "--color-success-content": "oklch(90% 0.093 164.15)", "--color-warning": "oklch(47% 0.137 46.201)", "--color-warning-content": "oklch(92% 0.12 95.746)", "--color-error": "oklch(44% 0.177 26.899)", "--color-error-content": "oklch(88% 0.062 18.334)", "--radius-selector": "0rem", "--radius-field": "0.25rem", "--radius-box": "0.25rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, lemonade: { "color-scheme": "light", "--color-base-100": "oklch(98.71% 0.02 123.72)", "--color-base-200": "oklch(91.8% 0.018 123.72)", "--color-base-300": "oklch(84.89% 0.017 123.72)", "--color-base-content": "oklch(19.742% 0.004 123.72)", "--color-primary": "oklch(58.92% 0.199 134.6)", "--color-primary-content": "oklch(11.784% 0.039 134.6)", "--color-secondary": "oklch(77.75% 0.196 111.09)", "--color-secondary-content": "oklch(15.55% 0.039 111.09)", "--color-accent": "oklch(85.39% 0.201 100.73)", "--color-accent-content": "oklch(17.078% 0.04 100.73)", "--color-neutral": "oklch(30.98% 0.075 108.6)", "--color-neutral-content": "oklch(86.196% 0.015 108.6)", "--color-info": "oklch(86.19% 0.047 224.14)", "--color-info-content": "oklch(17.238% 0.009 224.14)", "--color-success": "oklch(86.19% 0.047 157.85)", "--color-success-content": "oklch(17.238% 0.009 157.85)", "--color-warning": "oklch(86.19% 0.047 102.15)", "--color-warning-content": "oklch(17.238% 0.009 102.15)", "--color-error": "oklch(86.19% 0.047 25.85)", "--color-error-content": "oklch(17.238% 0.009 25.85)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, dracula: { "color-scheme": "dark", "--color-base-100": "oklch(28.822% 0.022 277.508)", "--color-base-200": "oklch(26.805% 0.02 277.508)", "--color-base-300": "oklch(24.787% 0.019 277.508)", "--color-base-content": "oklch(97.747% 0.007 106.545)", "--color-primary": "oklch(75.461% 0.183 346.812)", "--color-primary-content": "oklch(15.092% 0.036 346.812)", "--color-secondary": "oklch(74.202% 0.148 301.883)", "--color-secondary-content": "oklch(14.84% 0.029 301.883)", "--color-accent": "oklch(83.392% 0.124 66.558)", "--color-accent-content": "oklch(16.678% 0.024 66.558)", "--color-neutral": "oklch(39.445% 0.032 275.524)", "--color-neutral-content": "oklch(87.889% 0.006 275.524)", "--color-info": "oklch(88.263% 0.093 212.846)", "--color-info-content": "oklch(17.652% 0.018 212.846)", "--color-success": "oklch(87.099% 0.219 148.024)", "--color-success-content": "oklch(17.419% 0.043 148.024)", "--color-warning": "oklch(95.533% 0.134 112.757)", "--color-warning-content": "oklch(19.106% 0.026 112.757)", "--color-error": "oklch(68.22% 0.206 24.43)", "--color-error-content": "oklch(13.644% 0.041 24.43)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, autumn: { "color-scheme": "light", "--color-base-100": "oklch(95.814% 0 0)", "--color-base-200": "oklch(89.107% 0 0)", "--color-base-300": "oklch(82.4% 0 0)", "--color-base-content": "oklch(19.162% 0 0)", "--color-primary": "oklch(40.723% 0.161 17.53)", "--color-primary-content": "oklch(88.144% 0.032 17.53)", "--color-secondary": "oklch(61.676% 0.169 23.865)", "--color-secondary-content": "oklch(12.335% 0.033 23.865)", "--color-accent": "oklch(73.425% 0.094 60.729)", "--color-accent-content": "oklch(14.685% 0.018 60.729)", "--color-neutral": "oklch(54.367% 0.037 51.902)", "--color-neutral-content": "oklch(90.873% 0.007 51.902)", "--color-info": "oklch(69.224% 0.097 207.284)", "--color-info-content": "oklch(13.844% 0.019 207.284)", "--color-success": "oklch(60.995% 0.08 174.616)", "--color-success-content": "oklch(12.199% 0.016 174.616)", "--color-warning": "oklch(70.081% 0.164 56.844)", "--color-warning-content": "oklch(14.016% 0.032 56.844)", "--color-error": "oklch(53.07% 0.241 24.16)", "--color-error-content": "oklch(90.614% 0.048 24.16)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, luxury: { "color-scheme": "dark", "--color-base-100": "oklch(14.076% 0.004 285.822)", "--color-base-200": "oklch(20.219% 0.004 308.229)", "--color-base-300": "oklch(23.219% 0.004 308.229)", "--color-base-content": "oklch(75.687% 0.123 76.89)", "--color-primary": "oklch(100% 0 0)", "--color-primary-content": "oklch(20% 0 0)", "--color-secondary": "oklch(27.581% 0.064 261.069)", "--color-secondary-content": "oklch(85.516% 0.012 261.069)", "--color-accent": "oklch(36.674% 0.051 338.825)", "--color-accent-content": "oklch(87.334% 0.01 338.825)", "--color-neutral": "oklch(24.27% 0.057 59.825)", "--color-neutral-content": "oklch(93.203% 0.089 90.861)", "--color-info": "oklch(79.061% 0.121 237.133)", "--color-info-content": "oklch(15.812% 0.024 237.133)", "--color-success": "oklch(78.119% 0.192 132.154)", "--color-success-content": "oklch(15.623% 0.038 132.154)", "--color-warning": "oklch(86.127% 0.136 102.891)", "--color-warning-content": "oklch(17.225% 0.027 102.891)", "--color-error": "oklch(71.753% 0.176 22.568)", "--color-error-content": "oklch(14.35% 0.035 22.568)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, black: { "color-scheme": "dark", "--color-base-100": "oklch(0% 0 0)", "--color-base-200": "oklch(19% 0 0)", "--color-base-300": "oklch(22% 0 0)", "--color-base-content": "oklch(87.609% 0 0)", "--color-primary": "oklch(35% 0 0)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(35% 0 0)", "--color-secondary-content": "oklch(100% 0 0)", "--color-accent": "oklch(35% 0 0)", "--color-accent-content": "oklch(100% 0 0)", "--color-neutral": "oklch(35% 0 0)", "--color-neutral-content": "oklch(100% 0 0)", "--color-info": "oklch(45.201% 0.313 264.052)", "--color-info-content": "oklch(89.04% 0.062 264.052)", "--color-success": "oklch(51.975% 0.176 142.495)", "--color-success-content": "oklch(90.395% 0.035 142.495)", "--color-warning": "oklch(96.798% 0.211 109.769)", "--color-warning-content": "oklch(19.359% 0.042 109.769)", "--color-error": "oklch(62.795% 0.257 29.233)", "--color-error-content": "oklch(12.559% 0.051 29.233)", "--radius-selector": "0rem", "--radius-field": "0rem", "--radius-box": "0rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" } };

// packages/daisyui/base/svg/object.js
var object_default2 = { ":root": { "--fx-noise": `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='200' height='200' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E")` } };

// packages/daisyui/functions/addPrefix.js
var defaultExcludedPrefixes = ["color-", "size-", "radius-", "border", "depth", "noise"];
var excludedSelectors = ["prose"];
var shouldExcludeVariable = (variableName, excludedPrefixes) => {
  if (variableName.startsWith("tw")) {
    return true;
  }
  return excludedPrefixes.some((excludedPrefix) => variableName.startsWith(excludedPrefix));
};
var prefixVariable = (variableName, prefix, excludedPrefixes) => {
  if (shouldExcludeVariable(variableName, excludedPrefixes)) {
    return variableName;
  }
  return `${prefix}${variableName}`;
};
var getPrefixedSelector = (selector, prefix) => {
  if (!selector.startsWith("."))
    return selector;
  if (excludedSelectors.includes(selector.slice(1)))
    return selector;
  return `.${prefix}${selector.slice(1)}`;
};
var getPrefixedKey = (key, prefix, excludedPrefixes) => {
  const prefixAmpDot = prefix ? `&.${prefix}` : "";
  if (!prefix)
    return key;
  if (key.startsWith(".") && excludedSelectors.includes(key.slice(1)))
    return key;
  if (key.startsWith("--")) {
    const variableName = key.slice(2);
    return `--${prefixVariable(variableName, prefix, excludedPrefixes)}`;
  }
  if (key.startsWith("@") || key.startsWith("[")) {
    return key;
  }
  if (key.startsWith("&")) {
    if (key.match(/:[a-z-]+\(/)) {
      return key.replace(/\.([\w-]+)/g, (m, cls) => excludedSelectors.includes(cls) ? `.${cls}` : `.${prefix}${cls}`);
    }
    if (key.startsWith("&.")) {
      if (excludedSelectors.includes(key.slice(2)))
        return key;
      return `${prefixAmpDot}${key.slice(2)}`;
    }
    return key.replace(/\.([\w-]+)/g, (m, cls) => excludedSelectors.includes(cls) ? `.${cls}` : `.${prefix}${cls}`);
  }
  if (key.startsWith(":")) {
    return key.replace(/\.([\w-]+)/g, (m, cls) => excludedSelectors.includes(cls) ? `.${cls}` : `.${prefix}${cls}`);
  }
  if (key.includes(".") && !key.includes(" ") && !key.includes(">") && !key.includes("+") && !key.includes("~")) {
    return key.split(".").filter(Boolean).map((part) => excludedSelectors.includes(part) ? part : prefix + part).join(".").replace(/^/, ".");
  }
  if (key.includes(">") || key.includes("+") || key.includes("~")) {
    if (key.includes(",")) {
      return key.split(/\s*,\s*/).map((part) => {
        return part.replace(/\.([\w-]+)/g, (m, cls) => excludedSelectors.includes(cls) ? `.${cls}` : `.${prefix}${cls}`);
      }).join(", ");
    }
    let processedKey = key.replace(/\.([\w-]+)/g, (m, cls) => excludedSelectors.includes(cls) ? `.${cls}` : `.${prefix}${cls}`);
    if (processedKey.startsWith(">") || processedKey.startsWith("+") || processedKey.startsWith("~")) {
      processedKey = ` ${processedKey}`;
    }
    return processedKey;
  }
  if (key.includes(" ")) {
    return key.split(/\s+/).map((part) => {
      if (part.startsWith(".")) {
        return excludedSelectors.includes(part.slice(1)) ? part : getPrefixedSelector(part, prefix);
      }
      return part;
    }).join(" ");
  }
  if (key.includes(":")) {
    const [selector, ...pseudo] = key.split(":");
    if (selector.startsWith(".")) {
      return `${excludedSelectors.includes(selector.slice(1)) ? selector : getPrefixedSelector(selector, prefix)}:${pseudo.join(":")}`;
    }
    return key.replace(/\.([\w-]+)/g, (m, cls) => excludedSelectors.includes(cls) ? `.${cls}` : `.${prefix}${cls}`);
  }
  if (key.startsWith(".")) {
    return excludedSelectors.includes(key.slice(1)) ? key : getPrefixedSelector(key, prefix);
  }
  return key;
};
var processArrayValue = (value, prefix, excludedPrefixes) => {
  return value.map((item) => {
    if (typeof item === "string") {
      if (item.startsWith(".")) {
        return excludedSelectors.includes(item.slice(1)) ? item : prefix ? `.${prefix}${item.slice(1)}` : item;
      }
      return processStringValue(item, prefix, excludedPrefixes);
    }
    return item;
  });
};
var processStringValue = (value, prefix, excludedPrefixes) => {
  if (prefix === 0)
    return value;
  return value.replace(/var\(--([^)]+)\)/g, (match, variableName) => {
    if (shouldExcludeVariable(variableName, excludedPrefixes)) {
      return match;
    }
    return `var(--${prefix}${variableName})`;
  });
};
var processValue = (value, prefix, excludedPrefixes) => {
  if (Array.isArray(value)) {
    return processArrayValue(value, prefix, excludedPrefixes);
  } else if (typeof value === "object" && value !== null) {
    return addPrefix(value, prefix, excludedPrefixes);
  } else if (typeof value === "string") {
    return processStringValue(value, prefix, excludedPrefixes);
  } else {
    return value;
  }
};
var addPrefix = (obj, prefix, excludedPrefixes = defaultExcludedPrefixes) => {
  return Object.entries(obj).reduce((result, [key, value]) => {
    const newKey = getPrefixedKey(key, prefix, excludedPrefixes);
    result[newKey] = processValue(value, prefix, excludedPrefixes);
    return result;
  }, {});
};

// packages/daisyui/base/svg/index.js
var svg_default = ({ addBase, prefix = "" }) => {
  const prefixedsvg = addPrefix(object_default2, prefix);
  addBase({ ...prefixedsvg });
};

// packages/daisyui/base/scrollbar/object.js
var object_default3 = { ":root": { "scrollbar-color": "color-mix(in oklch, currentColor 35%, #0000) #0000" } };

// packages/daisyui/base/scrollbar/index.js
var scrollbar_default = ({ addBase, prefix = "" }) => {
  const prefixedscrollbar = addPrefix(object_default3, prefix);
  addBase({ ...prefixedscrollbar });
};

// packages/daisyui/base/properties/object.js
var object_default4 = { "@property --radialprogress": { syntax: '"<percentage>"', inherits: "true", "initial-value": "0%" } };

// packages/daisyui/base/properties/index.js
var properties_default = ({ addBase, prefix = "" }) => {
  const prefixedproperties = addPrefix(object_default4, prefix);
  addBase({ ...prefixedproperties });
};

// packages/daisyui/base/rootscrolllock/object.js
var object_default5 = { ":root:has(.modal-open, .modal[open], .modal:target, .modal-toggle:checked)": { overflow: "hidden", "--page-has-backdrop": "1" }, ':root:has(.drawer:not([class*="drawer-open"]) > .drawer-toggle:checked)': { overflow: "hidden", "--page-has-backdrop": "1" }, ":root:has(.sm\\:drawer-open > .drawer-toggle:checked)": { "@media (width < 40rem)": [{ overflow: "hidden" }, { "--page-has-backdrop": "1" }] }, ":root:has(.md\\:drawer-open > .drawer-toggle:checked)": { "@media (width < 48rem)": [{ overflow: "hidden" }, { "--page-has-backdrop": "1" }] }, ":root:has(.lg\\:drawer-open > .drawer-toggle:checked)": { "@media (width < 64rem)": [{ overflow: "hidden" }, { "--page-has-backdrop": "1" }] }, ":root:has(.xl\\:drawer-open > .drawer-toggle:checked)": { "@media (width < 80rem)": [{ overflow: "hidden" }, { "--page-has-backdrop": "1" }] }, ":root:has(.\\32xl\\:drawer-open > .drawer-toggle:checked)": { "@media (width < 96rem)": [{ overflow: "hidden" }, { "--page-has-backdrop": "1" }] }, ":root:has(.max-sm\\:drawer-open > .drawer-toggle:checked)": { "@media (width >= 40rem)": [{ overflow: "hidden" }, { "--page-has-backdrop": "1" }] }, ":root:has(.max-md\\:drawer-open > .drawer-toggle:checked)": { "@media (width >= 48rem)": [{ overflow: "hidden" }, { "--page-has-backdrop": "1" }] }, ":root:has(.max-lg\\:drawer-open > .drawer-toggle:checked)": { "@media (width >= 64rem)": [{ overflow: "hidden" }, { "--page-has-backdrop": "1" }] }, ":root:has(.max-xl\\:drawer-open > .drawer-toggle:checked)": { "@media (width >= 80rem)": [{ overflow: "hidden" }, { "--page-has-backdrop": "1" }] }, ":root:has(.max-2xl\\:drawer-open > .drawer-toggle:checked)": { "@media (width >= 96rem)": [{ overflow: "hidden" }, { "--page-has-backdrop": "1" }] } };

// packages/daisyui/base/rootscrolllock/index.js
var rootscrolllock_default = ({ addBase, prefix = "" }) => {
  const prefixedrootscrolllock = addPrefix(object_default5, prefix);
  addBase({ ...prefixedrootscrolllock });
};

// packages/daisyui/base/rootscrollgutter/object.js
var object_default6 = { ":root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked )": { "background-image": "linear-gradient(var(--root-bg), var(--root-bg))", "background-color": "color-mix( in srgb, var(--root-bg), oklch(0% 0 0) calc(var(--page-has-backdrop, 0) * 40%) )", animation: "set-page-has-scroll forwards", "animation-timeline": "scroll()", "scrollbar-gutter": ["stable", "if(style(--page-has-scroll: 1): stable; else: unset)"] }, "@keyframes set-page-has-scroll": { "0%, to": { "--page-has-scroll": "1" } } };

// packages/daisyui/base/rootscrollgutter/index.js
var rootscrollgutter_default = ({ addBase, prefix = "" }) => {
  const prefixedrootscrollgutter = addPrefix(object_default6, prefix);
  addBase({ ...prefixedrootscrollgutter });
};

// packages/daisyui/base/rootcolor/object.js
var object_default7 = { ":root, [data-theme]": { "background-color": "var(--root-bg, var(--color-base-100))", color: "var(--color-base-content)" }, ":where(:root, [data-theme])": { "--root-bg": "var(--color-base-100)" } };

// packages/daisyui/base/rootcolor/index.js
var rootcolor_default = ({ addBase, prefix = "" }) => {
  const prefixedrootcolor = addPrefix(object_default7, prefix);
  addBase({ ...prefixedrootcolor });
};

// packages/daisyui/components/textarea/object.js
var object_default8 = { ".textarea": { "@layer daisyui.component": { border: "var(--border) solid #0000", "min-height": "calc(0.25rem * 20)", "flex-shrink": 1, appearance: "none", "border-radius": "var(--radius-field)", "background-color": "var(--color-base-100)", "padding-block": "calc(0.25rem * 2)", "vertical-align": "middle", width: "clamp(3rem, 20rem, 100%)", "padding-inline-start": "0.75rem", "padding-inline-end": "0.75rem", "font-size": "max(var(--font-size, 0.875rem), 0.875rem)", "touch-action": "manipulation", "border-color": "var(--input-color)", "box-shadow": "0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset", "--input-color": "color-mix(in oklab, var(--color-base-content) 20%, #0000)", textarea: { appearance: "none", "background-color": "transparent", border: "none", "&:focus, &:focus-within": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" } } }, "&:focus, &:focus-within": { "--input-color": "var(--color-base-content)", "box-shadow": "0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000)", outline: "2px solid var(--input-color)", "outline-offset": "2px", isolation: "isolate" }, "@media (pointer: coarse)": { "@supports (-webkit-touch-callout: none)": { "&:focus, &:focus-within": { "--font-size": "1rem" } } }, "&:has(> textarea[disabled]), &:is(:disabled, [disabled])": { cursor: "not-allowed", "border-color": "var(--color-base-200)", "background-color": "var(--color-base-200)", color: "color-mix(in oklab, var(--color-base-content) 40%, transparent)", "&::placeholder": { color: "color-mix(in oklab, var(--color-base-content) 20%, transparent)" }, "box-shadow": "none" }, "&:has(> textarea[disabled]) > textarea[disabled]": { cursor: "not-allowed" } } }, ".textarea-ghost": { "@layer daisyui.modifier": { "background-color": "transparent", "box-shadow": "none", "border-color": "#0000", "&:focus, &:focus-within": { "background-color": "var(--color-base-100)", color: "var(--color-base-content)", "border-color": "#0000", "box-shadow": "none" } } }, ".textarea-neutral": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-neutral)" } } }, ".textarea-primary": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-primary)" } } }, ".textarea-secondary": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-secondary)" } } }, ".textarea-accent": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-accent)" } } }, ".textarea-info": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-info)" } } }, ".textarea-success": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-success)" } } }, ".textarea-warning": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-warning)" } } }, ".textarea-error": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-error)" } } }, ".textarea-xs": { "@layer daisyui.modifier": { "font-size": "max(var(--font-size, 0.6875rem), 0.6875rem)" } }, ".textarea-sm": { "@layer daisyui.modifier": { "font-size": "max(var(--font-size, 0.75rem), 0.75rem)" } }, ".textarea-md": { "@layer daisyui.modifier": { "font-size": "max(var(--font-size, 0.875rem), 0.875rem)" } }, ".textarea-lg": { "@layer daisyui.modifier": { "font-size": "max(var(--font-size, 1.125rem), 1.125rem)" } }, ".textarea-xl": { "@layer daisyui.modifier": { "font-size": "max(var(--font-size, 1.375rem), 1.375rem)" } } };

// packages/daisyui/components/textarea/index.js
var textarea_default = ({ addComponents, prefix = "" }) => {
  const prefixedtextarea = addPrefix(object_default8, prefix);
  addComponents({ ...prefixedtextarea });
};

// packages/daisyui/components/rating/object.js
var object_default9 = { ".rating": { "@layer daisyui.component": { position: "relative", display: "inline-flex", "vertical-align": "middle", "& input": { border: "none", appearance: "none" }, ":where(*)": { height: "calc(0.25rem * 6)", width: "calc(0.25rem * 6)", "border-radius": "0", "background-color": "var(--color-base-content)", opacity: "20%", "@media (prefers-reduced-motion: no-preference)": { animation: "rating 0.25s ease-out" }, "&:is(input)": { cursor: "pointer" } }, "& .rating-hidden": { width: "calc(0.25rem * 2)", "background-color": "transparent" }, 'input[type="radio"]:checked': { "background-image": "none" }, "*": { '&:checked, &[aria-checked="true"], &[aria-current="true"], &:has(~ *:checked, ~ *[aria-checked="true"], ~ *[aria-current="true"])': { opacity: "100%" }, "&:focus-visible": { scale: "1.1", "@media (prefers-reduced-motion: no-preference)": { transition: "scale 0.2s ease-out" } } }, "& *:active:focus": { animation: "none", scale: "1.1" } }, "@layer daisyui.modifier": { "&.rating-xs :where(*:not(.rating-hidden))": { width: "calc(0.25rem * 4)", height: "calc(0.25rem * 4)" }, "&.rating-sm :where(*:not(.rating-hidden))": { width: "calc(0.25rem * 5)", height: "calc(0.25rem * 5)" }, "&.rating-md :where(*:not(.rating-hidden))": { width: "calc(0.25rem * 6)", height: "calc(0.25rem * 6)" }, "&.rating-lg :where(*:not(.rating-hidden))": { width: "calc(0.25rem * 7)", height: "calc(0.25rem * 7)" }, "&.rating-xl :where(*:not(.rating-hidden))": { width: "calc(0.25rem * 8)", height: "calc(0.25rem * 8)" } } }, ".rating-half": { "@layer daisyui.modifier": { "&.rating-xs *:not(.rating-hidden)": { width: "calc(0.25rem * 2)" }, "&.rating-sm *:not(.rating-hidden)": { width: "calc(0.25rem * 2.5)" }, "&.rating-md *:not(.rating-hidden)": { width: "calc(0.25rem * 3)" }, "&.rating-lg *:not(.rating-hidden)": { width: ".875rem" }, "&.rating-xl *:not(.rating-hidden)": { width: "calc(0.25rem * 4)" } } }, "@keyframes rating": { "0%, 40%": { scale: "1.1", filter: "brightness(1.05) contrast(1.05)" } } };

// packages/daisyui/components/rating/index.js
var rating_default = ({ addComponents, prefix = "" }) => {
  const prefixedrating = addPrefix(object_default9, prefix);
  addComponents({ ...prefixedrating });
};

// packages/daisyui/components/calendar/object.js
var object_default10 = { ".cally": { "@layer daisyui.component": { "font-size": "0.7rem", "&::part(container)": { padding: "0.5rem 1rem", "user-select": "none" }, "::part(th)": { "font-weight": "normal", "block-size": "auto" }, "&::part(header)": { direction: "ltr" }, "::part(head)": { opacity: 0.5, "font-size": "0.7rem" }, "&::part(button)": { "border-radius": "var(--radius-field)", border: "none", padding: "0.5rem", background: "#0000" }, "&::part(button):hover": { background: "var(--color-base-200)" }, "::part(day)": { "border-radius": "var(--radius-field)", "font-size": "0.7rem" }, "::part(day):hover": { "&:not(selected, today)": { background: "var(--color-base-200)" } }, "::part(button day today)": { background: "var(--color-primary)", color: "var(--color-primary-content)" }, "::part(selected)": { color: "var(--color-base-100)", background: "var(--color-base-content)", "border-radius": "var(--radius-field)" }, "::part(range-inner)": { "border-radius": "0" }, "::part(range-start)": { "border-start-end-radius": "0", "border-end-end-radius": "0" }, "::part(range-end)": { "border-start-start-radius": "0", "border-end-start-radius": "0" }, "::part(range-start range-end)": { "border-radius": "var(--radius-field)" }, "calendar-month": { width: "100%" } } }, ".react-day-picker": { "@layer daisyui.component": { "user-select": "none", "background-color": "var(--color-base-100)", "border-radius": "var(--radius-box)", border: "var(--border) solid var(--color-base-200)", "font-size": "0.75rem", display: "inline-block", position: "relative", overflow: "clip", '&[dir="rtl"]': { ".rdp-nav": { ".rdp-chevron": { "transform-origin": "50%", transform: "rotate(180deg)" } } }, "*": { "box-sizing": "border-box" }, ".rdp-day": { width: "2.25rem", height: "2.25rem", "text-align": "center" }, ".rdp-day_button": { cursor: "pointer", font: "inherit", color: "inherit", width: "2.25rem", height: "2.25rem", border: "2px solid #0000", "border-radius": "var(--radius-field)", background: "0 0", "justify-content": "center", "align-items": "center", margin: "0", padding: "0", display: "flex", "&:disabled": { cursor: "revert" }, "&:hover": { "background-color": "var(--color-base-200)" } }, ".rdp-caption_label": { "z-index": 1, "white-space": "nowrap", border: "0", "align-items": "center", display: "inline-flex", position: "relative" }, ".rdp-button_next": { "border-radius": "var(--radius-field)", "&:hover": { "background-color": "var(--color-base-200)" } }, ".rdp-button_previous": { "border-radius": "var(--radius-field)", "&:hover": { "background-color": "var(--color-base-200)" } }, ".rdp-button_next, .rdp-button_previous": { cursor: "pointer", font: "inherit", color: "inherit", appearance: "none", width: "2.25rem", height: "2.25rem", background: "0 0", border: "none", "justify-content": "center", "align-items": "center", margin: "0", padding: "0", display: "inline-flex", position: "relative", '&:disabled, &[aria-disabled="true"]': { cursor: "revert", opacity: 0.5 }, '&:disabled:hover, &[aria-disabled="true"]:hover': { "background-color": "transparent" } }, ".rdp-chevron": { fill: "var(--color-base-content)", width: "1rem", height: "1rem", display: "inline-block" }, ".rdp-dropdowns": { "align-items": "center", gap: "0.5rem", display: "inline-flex", position: "relative" }, ".rdp-dropdown": { "z-index": 2, opacity: 0, appearance: "none", cursor: "inherit", "line-height": "inherit", border: "none", width: "100%", margin: "0", padding: "0", position: "absolute", "inset-block": "0", "inset-inline-start": "0", "&:focus-visible": { "~ .rdp-caption_label": { outline: ["5px auto highlight", "5px auto -webkit-focus-ring-color"] } } }, ".rdp-dropdown_root": { "align-items": "center", display: "inline-flex", position: "relative", '&[data-disabled="true"]': { ".rdp-chevron": { opacity: 0.5 } } }, ".rdp-month_caption": { height: "2.75rem", "font-size": "0.75rem", "font-weight": "inherit", "place-content": "center", display: "flex" }, ".rdp-months": { gap: "2rem", "flex-wrap": "wrap", "max-width": "fit-content", padding: "0.5rem", display: "flex", position: "relative" }, ".rdp-month_grid": { "border-collapse": "collapse" }, ".rdp-nav": { height: "2.75rem", "inset-block-start": "0", "inset-inline-end": "0", "justify-content": "space-between", "align-items": "center", width: "100%", "padding-inline": "0.5rem", display: "flex", position: "absolute", top: "0.25rem" }, ".rdp-weekday": { opacity: 0.6, padding: "0.5rem 0rem", "text-align": "center", "font-size": "smaller", "font-weight": 500 }, ".rdp-week_number": { opacity: 0.6, height: "2.25rem", width: "2.25rem", border: "none", "border-radius": "100%", "text-align": "center", "font-size": "small", "font-weight": 400 }, ".rdp-today:not(.rdp-outside)": { ".rdp-day_button": { background: "var(--color-primary)", color: "var(--color-primary-content)" } }, ".rdp-selected": { "font-weight": "inherit", "font-size": "0.75rem", ".rdp-day_button": { color: "var(--color-base-100)", "background-color": "var(--color-base-content)", "border-radius": "var(--radius-field)", border: "none", "&:hover": { "background-color": "var(--color-base-content)" } } }, ".rdp-outside": { opacity: 0.75 }, ".rdp-disabled": { opacity: 0.5 }, ".rdp-hidden": { visibility: "hidden", color: "var(--color-base-content)" }, ".rdp-range_start": { ".rdp-day_button": { "border-radius": "var(--radius-field) 0 0 var(--radius-field)" } }, ".rdp-range_start .rdp-day_button": { "background-color": "var(--color-base-content)", color: "var(--color-base-100)" }, ".rdp-range_middle": { "background-color": "var(--color-base-200)" }, ".rdp-range_middle .rdp-day_button": { border: "unset", "border-radius": "unset", color: "inherit" }, ".rdp-range_end": { color: "var(--color-base-content)", ".rdp-day_button": { "border-radius": "0 var(--radius-field) var(--radius-field) 0" } }, ".rdp-range_end .rdp-day_button": { "background-color": "var(--color-base-content)", color: "var(--color-base-100)" }, ".rdp-range_start.rdp-range_end": { background: "revert" }, ".rdp-focusable": { cursor: "pointer" }, ".rdp-footer": { "border-top": "var(--border) solid var(--color-base-200)", padding: "0.5rem" } } }, ".pika-single": { "@layer daisyui.component": { "&:is(div)": { "user-select": "none", "font-size": "0.75rem", "z-index": 999, display: "inline-block", position: "relative", color: "var(--color-base-content)", "background-color": "var(--color-base-100)", "border-radius": "var(--radius-box)", border: "var(--border) solid var(--color-base-200)", padding: "0.5rem", "&:before, &:after": { content: '""', display: "table" }, "&:after": { clear: "both" }, "&.is-hidden": { display: "none" }, "&.is-bound": { position: "absolute" }, ".pika-lendar": { "css-float": "left" }, ".pika-title": { position: "relative", "text-align": "center", select: { cursor: "pointer", position: "absolute", "z-index": 999, margin: "0", left: "0", top: "5px", opacity: 0 } }, ".pika-label": { display: "inline-block", position: "relative", "z-index": 999, overflow: "hidden", margin: "0", padding: "5px 3px", "background-color": "var(--color-base-100)" }, ".pika-prev, .pika-next": { display: "block", cursor: "pointer", position: "absolute", top: "0", outline: "none", border: "0", width: "2.25rem", height: "2.25rem", color: "#0000", "font-size": "1.2em", "border-radius": "var(--radius-field)", "&:hover": { "background-color": "var(--color-base-200)" }, "&.is-disabled": { cursor: "default", opacity: 0.2 }, "&:before": { display: "inline-block", width: "2.25rem", height: "2.25rem", "line-height": 2.25, color: "var(--color-base-content)" } }, ".pika-prev": { left: "0", "&:before": { content: '"‹"' } }, ".pika-next": { right: "0", "&:before": { content: '"›"' } }, ".pika-select": { display: "inline-block" }, ".pika-table": { width: "100%", "border-collapse": "collapse", "border-spacing": "0", border: "0", "th, td": { padding: "0" }, th: { opacity: 0.6, "text-align": "center", width: "2.25rem", height: "2.25rem" } }, ".pika-button": { cursor: "pointer", display: "block", outline: "none", border: "0", margin: "0", width: "2.25rem", height: "2.25rem", padding: "5px", "text-align": ["right", "center"] }, ".pika-week": { color: "var(--color-base-content)" }, ".is-today": { ".pika-button": { background: "var(--color-primary)", color: "var(--color-primary-content)" } }, ".is-selected, .has-event": { ".pika-button": { "&, &:hover": { color: "var(--color-base-100)", "background-color": "var(--color-base-content)", "border-radius": "var(--radius-field)" } } }, ".has-event": { ".pika-button": { background: "var(--color-base-primary)" } }, ".is-disabled, .is-inrange": { ".pika-button": { background: "var(--color-base-primary)" } }, ".is-startrange": { ".pika-button": { color: "var(--color-base-100)", background: "var(--color-base-content)", "border-radius": "var(--radius-field)" } }, ".is-endrange": { ".pika-button": { color: "var(--color-base-100)", background: "var(--color-base-content)", "border-radius": "var(--radius-field)" } }, ".is-disabled": { ".pika-button": { "pointer-events": "none", cursor: "default", color: "var(--color-base-content)", opacity: 0.3 } }, ".is-outside-current-month": { ".pika-button": { color: "var(--color-base-content)", opacity: 0.3 } }, ".is-selection-disabled": { "pointer-events": "none", cursor: "default" }, ".pika-button:hover, .pika-row.pick-whole-week:hover .pika-button": { color: "var(--color-base-content)", "background-color": "var(--color-base-200)", "border-radius": "var(--radius-field)" }, ".pika-table abbr": { "text-decoration": "none", "font-weight": "normal" } } } } };

// packages/daisyui/components/calendar/index.js
var calendar_default = ({ addComponents, prefix = "" }) => {
  const prefixedcalendar = addPrefix(object_default10, prefix);
  addComponents({ ...prefixedcalendar });
};

// packages/daisyui/components/dropdown/object.js
var object_default11 = { ".dropdown": { "@layer daisyui.component": { position: "relative", display: "inline-block", "position-area": "var(--anchor-v, bottom) var(--anchor-h, span-right)", "& > *:not(summary):focus": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" } }, ".dropdown-content": { position: "absolute" }, "&:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) .dropdown-content, &.dropdown-hover:not(:hover) [tabindex]:first-child:focus:not(:focus-visible) ~ .dropdown-content": { display: "none", "transform-origin": "top", opacity: "0%", scale: "95%" }, "&[popover], .dropdown-content": { "z-index": 999, "@media (prefers-reduced-motion: no-preference)": { animation: "dropdown 0.2s", "transition-property": "opacity, scale, display", "transition-behavior": "allow-discrete", "transition-duration": "0.2s", "transition-timing-function": "cubic-bezier(0.4, 0, 0.2, 1)" } }, "@starting-style": { "&[popover], .dropdown-content": { scale: "95%", opacity: 0 } }, "&.dropdown-open, &:not(.dropdown-hover):focus, &:focus-within": { "> [tabindex]:first-child": { "pointer-events": "none" }, ".dropdown-content": { opacity: "100%" } }, "&.dropdown-hover:hover": { ".dropdown-content": { opacity: "100%", scale: "100%" } }, "&:is(details)": { summary: { "&::-webkit-details-marker": { display: "none" } } }, "&.dropdown-open, &:focus, &:focus-within": { ".dropdown-content": { scale: "100%" } }, "&:where([popover])": { background: "#0000" }, "&[popover]": { position: "fixed", color: "inherit", "@supports not (position-area: bottom)": { margin: "auto", "&.dropdown-open:not(:popover-open)": { display: "none", "transform-origin": "top", opacity: "0%", scale: "95%" }, "&::backdrop": { "background-color": "color-mix(in oklab, #000 30%, #0000)" } }, "&:not(.dropdown-open, :popover-open)": { display: "none", "transform-origin": "top", opacity: "0%", scale: "95%" } } } }, ".dropdown-start": { "@layer daisyui.modifier": { "--anchor-h": "span-right", ":where(.dropdown-content)": { "inset-inline-end": "auto", translate: "0 0", '[dir="rtl"] &': { translate: "0 0" } }, "&.dropdown-left": { "--anchor-h": "left", "--anchor-v": "span-bottom", ".dropdown-content": { top: "calc(0.25rem * 0)", bottom: "auto" } }, "&.dropdown-right": { "--anchor-h": "right", "--anchor-v": "span-bottom", ".dropdown-content": { top: "calc(0.25rem * 0)", bottom: "auto" } } } }, ".dropdown-center": { "@layer daisyui.modifier": { "--anchor-h": "center", ":where(.dropdown-content)": { "inset-inline-end": "calc(1/2 * 100%)", translate: "50% 0", '[dir="rtl"] &': { translate: "-50% 0" } }, "&.dropdown-left": { "--anchor-h": "left", "--anchor-v": "center", ".dropdown-content": { top: "auto", bottom: "calc(1/2 * 100%)", translate: "0 50%" } }, "&.dropdown-right": { "--anchor-h": "right", "--anchor-v": "center", ".dropdown-content": { top: "auto", bottom: "calc(1/2 * 100%)", translate: "0 50%" } } } }, ".dropdown-end": { "@layer daisyui.modifier": { "--anchor-h": "span-left", ":where(.dropdown-content)": { "inset-inline-end": "calc(0.25rem * 0)", translate: "0 0", '[dir="rtl"] &': { translate: "0 0" } }, "&.dropdown-left": { "--anchor-h": "left", "--anchor-v": "span-top", ".dropdown-content": { top: "auto", bottom: "calc(0.25rem * 0)" } }, "&.dropdown-right": { "--anchor-h": "right", "--anchor-v": "span-top", ".dropdown-content": { top: "auto", bottom: "calc(0.25rem * 0)" } } } }, ".dropdown-left": { "@layer daisyui.modifier": { "--anchor-h": "left", "--anchor-v": "span-bottom", ".dropdown-content": { "inset-inline-end": "100%", top: "calc(0.25rem * 0)", bottom: "auto", "transform-origin": "100%" } } }, ".dropdown-right": { "@layer daisyui.modifier": { "--anchor-h": "right", "--anchor-v": "span-bottom", ".dropdown-content": { "inset-inline-start": "100%", top: "calc(0.25rem * 0)", bottom: "auto", "transform-origin": "0" } } }, ".dropdown-bottom": { "@layer daisyui.modifier": { "--anchor-v": "bottom", ".dropdown-content": { top: "100%", bottom: "auto", "transform-origin": "top" } } }, ".dropdown-top": { "@layer daisyui.modifier": { "--anchor-v": "top", ".dropdown-content": { top: "auto", bottom: "100%", "transform-origin": "bottom" } } }, "@keyframes dropdown": { "0%": { opacity: 0 } } };

// packages/daisyui/components/dropdown/index.js
var dropdown_default = ({ addComponents, prefix = "" }) => {
  const prefixeddropdown = addPrefix(object_default11, prefix);
  addComponents({ ...prefixeddropdown });
};

// packages/daisyui/components/tab/object.js
var object_default12 = { ".tabs": { "@layer daisyui.component": { display: "flex", "flex-wrap": "wrap", "--tabs-height": "auto", "--tabs-direction": "row", "--tab-height": "calc(var(--size-field, 0.25rem) * 10)", height: "var(--tabs-height)", "flex-direction": "var(--tabs-direction)" } }, ".tab": { "@layer daisyui.component": { position: "relative", display: "inline-flex", cursor: "pointer", appearance: "none", "flex-wrap": "wrap", "align-items": "center", "justify-content": "center", "text-align": "center", "webkit-user-select": "none", "user-select": "none", "&:hover": { "@media (hover: hover)": { color: "var(--color-base-content)" } }, "--tab-p": "1rem", "--tab-bg": "var(--color-base-100)", "--tab-border-color": "var(--color-base-300)", "--tab-radius-ss": "0", "--tab-radius-se": "0", "--tab-radius-es": "0", "--tab-radius-ee": "0", "--tab-order": "0", "--tab-radius-min": "calc(0.75rem - var(--border))", "border-color": "#0000", order: "var(--tab-order)", height: "var(--tab-height)", "font-size": "0.875rem", "padding-inline-start": "var(--tab-p)", "padding-inline-end": "var(--tab-p)", '&:is(input[type="radio"])': { "min-width": "fit-content", "&:after": { content: "attr(aria-label)" } }, "&:is(label)": { position: "relative", input: { position: "absolute", inset: "calc(0.25rem * 0)", cursor: "pointer", appearance: "none", opacity: "0%" } }, '&:checked, &:is(label:has(:checked)), &:is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"])': { "& + .tab-content": { display: "block", height: "calc(100% - var(--tab-height) + var(--border))" } }, '&:not( :checked, label:has(:checked), :hover, .tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"] )': { color: "color-mix(in oklab, var(--color-base-content) 50%, transparent)" }, "&:not(input):empty": { "flex-grow": 1, cursor: "default" }, "&:focus": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" } }, "&:focus-visible, &:is(label:has(:checked:focus-visible))": { outline: "2px solid currentColor", "outline-offset": "-5px" }, "&[disabled]": { "pointer-events": "none", opacity: "40%" } } }, ".tab-content": { "@layer daisyui.component": { order: [1, "var(--tabcontent-order)"], display: "none", "border-color": "transparent", "--tabcontent-radius-ss": "var(--radius-box)", "--tabcontent-radius-se": "var(--radius-box)", "--tabcontent-radius-es": "var(--radius-box)", "--tabcontent-radius-ee": "var(--radius-box)", "--tabcontent-order": "1", width: "100%", margin: "var(--tabcontent-margin)", "border-width": "var(--border)", "border-start-start-radius": "var(--tabcontent-radius-ss)", "border-start-end-radius": "var(--tabcontent-radius-se)", "border-end-start-radius": "var(--tabcontent-radius-es)", "border-end-end-radius": "var(--tabcontent-radius-ee)" } }, ".tab-disabled": { "@layer daisyui.modifier": { "pointer-events": "none", opacity: "40%" } }, ".tabs-border": { "@layer daisyui.modifier": { ".tab": { "--tab-border-color": "#0000 #0000 var(--tab-border-color) #0000", position: "relative", "border-radius": "var(--radius-field)", "&:before": { "--tw-content": '""', content: "var(--tw-content)", "background-color": "var(--tab-border-color)", transition: "background-color 0.2s ease", width: "80%", height: "3px", "border-radius": "var(--radius-field)", bottom: "0", left: "10%", position: "absolute" }, '&:is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"]):not( .tab-disabled, [disabled] ), &:is(input:checked), &:is(label:has(:checked))': { "&:before": { "--tab-border-color": "currentColor", "border-top": "3px solid" } } } } }, ".tabs-lift": { "@layer daisyui.modifier": { "--tabs-height": "auto", "--tabs-direction": "row", "> .tab": { "--tab-border": "0 0 var(--border) 0", "--tab-radius-ss": "min(var(--radius-field), var(--tab-radius-min))", "--tab-radius-se": "min(var(--radius-field), var(--tab-radius-min))", "--tab-radius-es": "0", "--tab-radius-ee": "0", "--tab-paddings": "var(--border) var(--tab-p) 0 var(--tab-p)", "--tab-border-colors": "#0000 #0000 var(--tab-border-color) #0000", "--tab-corner-width": "calc(100% + min(var(--radius-field), var(--tab-radius-min)) * 2)", "--tab-corner-height": "min(var(--radius-field), var(--tab-radius-min))", "--tab-corner-position": "top left, top right", "border-width": "var(--tab-border)", "border-start-start-radius": "var(--tab-radius-ss)", "border-start-end-radius": "var(--tab-radius-se)", "border-end-start-radius": "var(--tab-radius-es)", "border-end-end-radius": "var(--tab-radius-ee)", padding: "var(--tab-paddings)", "border-color": "var(--tab-border-colors)", '&:is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"]):not( .tab-disabled, [disabled] ), &:is(input:checked, label:has(:checked))': { "--tab-border": "var(--border) var(--border) 0 var(--border)", "--tab-border-colors": `var(--tab-border-color) var(--tab-border-color) #0000
          var(--tab-border-color)`, "--tab-paddings": `0 calc(var(--tab-p) - var(--border)) var(--border)
          calc(var(--tab-p) - var(--border))`, "--tab-inset": "auto auto 0 auto", "--tab-grad": "calc(69% - var(--border))", "--radius-start": `radial-gradient(
          circle at top left,
          #0000 var(--tab-grad),
          var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
          var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
          var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
        )`, "--radius-end": `radial-gradient(
          circle at top right,
          #0000 var(--tab-grad),
          var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
          var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
          var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
        )`, "background-color": "var(--tab-bg)", "&:before": { "z-index": 1, content: '""', display: "block", position: "absolute", width: "var(--tab-corner-width)", height: "var(--tab-corner-height)", "background-position": "var(--tab-corner-position)", "background-image": "var(--radius-start), var(--radius-end)", "background-size": "min(var(--radius-field), var(--tab-radius-min)) min(var(--radius-field), var(--tab-radius-min))", "background-repeat": "no-repeat", inset: "var(--tab-inset)" }, "&:first-child:before": { "--radius-start": "none" }, '[dir="rtl"] &:first-child:before': { transform: "rotateY(180deg)" }, "&:last-child:before": { "--radius-end": "none" }, '[dir="rtl"] &:last-child:before': { transform: "rotateY(180deg)" } } }, "&:has(> .tab-content)": { "> .tab:first-child": { '&:not(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"])': { "--tab-border-colors": `var(--tab-border-color) var(--tab-border-color) #0000
            var(--tab-border-color)` } } }, "> .tab-content": { "--tabcontent-margin": "calc(-1 * var(--border)) 0 0 0", "--tabcontent-radius-ss": "0", "--tabcontent-radius-se": "var(--radius-box)", "--tabcontent-radius-es": "var(--radius-box)", "--tabcontent-radius-ee": "var(--radius-box)" }, ':checked, label:has(:checked), :is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"])': { "& + .tab-content": { "&:nth-child(1), &:nth-child(n + 3)": { "--tabcontent-radius-ss": "var(--radius-box)" } } } } }, ".tabs-top": { "@layer daisyui.modifier": { "--tabs-height": "auto", "--tabs-direction": "row", ".tab": { "--tab-order": "0", "--tab-border": "0 0 var(--border) 0", "--tab-radius-ss": "min(var(--radius-field), var(--tab-radius-min))", "--tab-radius-se": "min(var(--radius-field), var(--tab-radius-min))", "--tab-radius-es": "0", "--tab-radius-ee": "0", "--tab-paddings": "var(--border) var(--tab-p) 0 var(--tab-p)", "--tab-border-colors": "#0000 #0000 var(--tab-border-color) #0000", "--tab-corner-width": "calc(100% + min(var(--radius-field), var(--tab-radius-min)) * 2)", "--tab-corner-height": "min(var(--radius-field), var(--tab-radius-min))", "--tab-corner-position": "top left, top right", '&:is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"]):not( .tab-disabled, [disabled] ), &:is(input:checked), &:is(label:has(:checked))': { "--tab-border": "var(--border) var(--border) 0 var(--border)", "--tab-border-colors": `var(--tab-border-color) var(--tab-border-color) #0000
          var(--tab-border-color)`, "--tab-paddings": `0 calc(var(--tab-p) - var(--border)) var(--border)
          calc(var(--tab-p) - var(--border))`, "--tab-inset": "auto auto 0 auto", "--radius-start": `radial-gradient(
          circle at top left,
          #0000 var(--tab-grad),
          var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
          var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
          var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
        )`, "--radius-end": `radial-gradient(
          circle at top right,
          #0000 var(--tab-grad),
          var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
          var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
          var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
        )` } }, "&:has(.tab-content)": { "> .tab:first-child": { '&:not(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"])': { "--tab-border-colors": `var(--tab-border-color) var(--tab-border-color) #0000
            var(--tab-border-color)` } } }, ".tab-content": { "--tabcontent-order": "1", "--tabcontent-margin": "calc(-1 * var(--border)) 0 0 0", "--tabcontent-radius-ss": "0", "--tabcontent-radius-se": "var(--radius-box)", "--tabcontent-radius-es": "var(--radius-box)", "--tabcontent-radius-ee": "var(--radius-box)" }, ':checked, label:has(:checked), :is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"])': { "& + .tab-content": { "&:nth-child(1), &:nth-child(n + 3)": { "--tabcontent-radius-ss": "var(--radius-box)" } } } } }, ".tabs-bottom": { "@layer daisyui.modifier": { "--tabs-height": "auto", "--tabs-direction": "row", ".tab": { "--tab-order": "1", "--tab-border": "var(--border) 0 0 0", "--tab-radius-ss": "0", "--tab-radius-se": "0", "--tab-radius-es": "min(var(--radius-field), var(--tab-radius-min))", "--tab-radius-ee": "min(var(--radius-field), var(--tab-radius-min))", "--tab-border-colors": "var(--tab-border-color) #0000 #0000 #0000", "--tab-paddings": "0 var(--tab-p) var(--border) var(--tab-p)", "--tab-corner-width": "calc(100% + min(var(--radius-field), var(--tab-radius-min)) * 2)", "--tab-corner-height": "min(var(--radius-field), var(--tab-radius-min))", "--tab-corner-position": "top left, top right", '&:is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"]):not( .tab-disabled, [disabled] ), &:is(input:checked), &:is(label:has(:checked))': { "--tab-border": "0 var(--border) var(--border) var(--border)", "--tab-border-colors": `#0000 var(--tab-border-color) var(--tab-border-color)
          var(--tab-border-color)`, "--tab-paddings": `var(--border) calc(var(--tab-p) - var(--border)) 0
          calc(var(--tab-p) - var(--border))`, "--tab-inset": "0 auto auto auto", "--radius-start": `radial-gradient(
          circle at bottom left,
          #0000 var(--tab-grad),
          var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
          var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
          var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
        )`, "--radius-end": `radial-gradient(
          circle at bottom right,
          #0000 var(--tab-grad),
          var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
          var(--tab-border-color) calc(var(--tab-grad) + var(--border)),
          var(--tab-bg) calc(var(--tab-grad) + var(--border) + 0.25px)
        )` } }, "&:has(.tab-content)": { "> .tab:first-child": { '&:not(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"])': { "--tab-border-colors": `#0000 var(--tab-border-color) var(--tab-border-color)
            var(--tab-border-color)` } } }, ".tab-content": { "--tabcontent-order": "0", "--tabcontent-margin": "0 0 calc(-1 * var(--border)) 0", "--tabcontent-radius-ss": "var(--radius-box)", "--tabcontent-radius-se": "var(--radius-box)", "--tabcontent-radius-es": "0", "--tabcontent-radius-ee": "var(--radius-box)" }, '> :checked, > :is(label:has(:checked)), > :is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"])': { "& + .tab-content:not(:nth-child(2))": { "--tabcontent-radius-es": "var(--radius-box)" } } } }, ".tabs-box": { "@layer daisyui.modifier": { "background-color": "var(--color-base-200)", padding: "calc(0.25rem * 1)", "--tabs-box-radius": "calc(var(--radius-field) + var(--radius-field) + var(--radius-field))", "border-radius": "calc( min(calc(var(--tab-height) / 2), var(--radius-field)) + min(0.25rem, var(--tabs-box-radius)) )", "box-shadow": "0 -0.5px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0.5px oklch(0% 0 0 / calc(var(--depth) * 0.05)) inset", ".tab": { "border-radius": "var(--radius-field)", "border-style": "none", "&:focus-visible, &:is(label:has(:checked:focus-visible))": { "outline-offset": "2px" } }, '> :is(.tab-active, [aria-selected="true"], [aria-current="true"], [aria-current="page"]):not( .tab-disabled, [disabled] ), > :is(input:checked), > :is(label:has(:checked))': { "background-color": "var(--tab-bg, var(--color-base-100))", "box-shadow": "0 1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px 1px -1px color-mix(in oklab, var(--color-neutral) calc(var(--depth) * 50%), #0000), 0 1px 6px -4px color-mix(in oklab, var(--color-neutral) calc(var(--depth) * 100%), #0000)", "@media (forced-colors: active)": { border: "1px solid" } }, ".tab-content": { "margin-top": "calc(0.25rem * 1)", "border-radius": "calc( min(calc(var(--tab-height) / 2), var(--radius-field)) + min(0.25rem, var(--tabs-box-radius)) - var(--border) )" } } }, ".tabs-xs": { "@layer daisyui.modifier": { "--tab-height": "calc(var(--size-field, 0.25rem) * 6)", ":where(.tab)": { "font-size": "0.75rem", "--tab-p": "0.375rem", "--tab-radius-min": "calc(0.5rem - var(--border))" } } }, ".tabs-sm": { "@layer daisyui.modifier": { "--tab-height": "calc(var(--size-field, 0.25rem) * 8)", ":where(.tab)": { "font-size": "0.875rem", "--tab-p": "0.5rem", "--tab-radius-min": "calc(0.5rem - var(--border))" } } }, ".tabs-md": { "@layer daisyui.modifier": { "--tab-height": "calc(var(--size-field, 0.25rem) * 10)", ":where(.tab)": { "font-size": "0.875rem", "--tab-p": "0.75rem", "--tab-radius-min": "calc(0.75rem - var(--border))" } } }, ".tabs-lg": { "@layer daisyui.modifier": { "--tab-height": "calc(var(--size-field, 0.25rem) * 12)", ":where(.tab)": { "font-size": "1.125rem", "--tab-p": "1rem", "--tab-radius-min": "calc(1.5rem - var(--border))" } } }, ".tabs-xl": { "@layer daisyui.modifier": { "--tab-height": "calc(var(--size-field, 0.25rem) * 14)", ":where(.tab)": { "font-size": "1.125rem", "--tab-p": "1.25rem", "--tab-radius-min": "calc(2rem - var(--border))" } } } };

// packages/daisyui/components/tab/index.js
var tab_default = ({ addComponents, prefix = "" }) => {
  const prefixedtab = addPrefix(object_default12, prefix);
  addComponents({ ...prefixedtab });
};

// packages/daisyui/components/fileinput/object.js
var object_default13 = { ".file-input": { "@layer daisyui.component": { cursor: ["pointer", "pointer"], border: "var(--border) solid #0000", display: "inline-flex", appearance: "none", "align-items": "center", "background-color": "var(--color-base-100)", "vertical-align": "middle", "webkit-user-select": "none", "user-select": "none", width: "clamp(3rem, 20rem, 100%)", height: "var(--size)", "padding-inline-end": "0.75rem", "font-size": "0.875rem", "line-height": 2, "border-start-start-radius": "var(--join-ss, var(--radius-field))", "border-start-end-radius": "var(--join-se, var(--radius-field))", "border-end-start-radius": "var(--join-es, var(--radius-field))", "border-end-end-radius": "var(--join-ee, var(--radius-field))", "border-color": "var(--input-color)", "box-shadow": "0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset", "--size": "calc(var(--size-field, 0.25rem) * 10)", "--input-color": "color-mix(in oklab, var(--color-base-content) 20%, #0000)", "&::file-selector-button": { "margin-inline-end": "calc(0.25rem * 4)", cursor: "pointer", "padding-inline": "calc(0.25rem * 4)", "webkit-user-select": "none", "user-select": "none", height: "calc(100% + var(--border) * 2)", "margin-block": "calc(var(--border) * -1)", "margin-inline-start": "calc(var(--border) * -1)", "font-size": "0.875rem", color: "var(--btn-fg)", "border-width": "var(--border)", "border-style": "solid", "border-color": "var(--btn-border)", "border-start-start-radius": "calc(var(--join-ss, var(--radius-field) - var(--border)))", "border-end-start-radius": "calc(var(--join-es, var(--radius-field) - var(--border)))", "font-weight": 600, "background-color": "var(--btn-bg)", "background-size": "calc(var(--noise) * 100%)", "background-image": "var(--btn-noise)", "text-shadow": "0 0.5px oklch(1 0 0 / calc(var(--depth) * 0.15))", "box-shadow": "0 0.5px 0 0.5px color-mix( in oklab, color-mix(in oklab, white 30%, var(--btn-bg)) calc(var(--depth) * 20%), #0000 ) inset, var(--btn-shadow)", "--size": "calc(var(--size-field, 0.25rem) * 10)", "--btn-bg": "var(--btn-color, var(--color-base-200))", "--btn-fg": "var(--color-base-content)", "--btn-border": "color-mix(in oklab, var(--btn-bg), #000 5%)", "--btn-shadow": `0 3px 2px -2px color-mix(in oklab, var(--btn-bg) 30%, #0000),
        0 4px 3px -2px color-mix(in oklab, var(--btn-bg) 30%, #0000)`, "--btn-noise": "var(--fx-noise)" }, "&:focus": { "--input-color": "var(--color-base-content)", "box-shadow": "0 1px color-mix(in oklab, var(--input-color) 10%, #0000)", outline: "2px solid var(--input-color)", "outline-offset": "2px", isolation: "isolate" }, "&:has(> input[disabled]), &:is(:disabled, [disabled])": { cursor: "not-allowed", "border-color": "var(--color-base-200)", "background-color": "var(--color-base-200)", "&::placeholder": { color: "color-mix(in oklab, var(--color-base-content) 20%, transparent)" }, "box-shadow": "none", color: "color-mix(in oklch, var(--color-base-content) 20%, #0000)", "&::file-selector-button": { cursor: "not-allowed", "border-color": "var(--color-base-200)", "background-color": "var(--color-base-200)", "--btn-border": "#0000", "--btn-noise": "none", "--btn-fg": "color-mix(in oklch, var(--color-base-content) 20%, #0000)" } } } }, ".file-input-ghost": { "@layer daisyui.modifier": { "background-color": "transparent", transition: "background-color 0.2s", "box-shadow": "none", "border-color": "#0000", "&::file-selector-button": { "margin-inline-start": "calc(0.25rem * 0)", "margin-inline-end": "calc(0.25rem * 4)", height: "100%", cursor: "pointer", "padding-inline": "calc(0.25rem * 4)", "webkit-user-select": "none", "user-select": "none", "margin-block": "0", "border-start-end-radius": "calc(var(--join-ss, var(--radius-field) - var(--border)))", "border-end-end-radius": "calc(var(--join-es, var(--radius-field) - var(--border)))" }, "&:focus, &:focus-within": { "background-color": "var(--color-base-100)", color: "var(--color-base-content)", "border-color": "#0000", "box-shadow": "none" } } }, ".file-input-neutral": { "@layer daisyui.modifier": { "--btn-color": "var(--color-neutral)", "&::file-selector-button": { color: "var(--color-neutral-content)" }, "&, &:focus, &:focus-within": { "--input-color": "var(--color-neutral)" } } }, ".file-input-primary": { "@layer daisyui.modifier": { "--btn-color": "var(--color-primary)", "&::file-selector-button": { color: "var(--color-primary-content)" }, "&, &:focus, &:focus-within": { "--input-color": "var(--color-primary)" } } }, ".file-input-secondary": { "@layer daisyui.modifier": { "--btn-color": "var(--color-secondary)", "&::file-selector-button": { color: "var(--color-secondary-content)" }, "&, &:focus, &:focus-within": { "--input-color": "var(--color-secondary)" } } }, ".file-input-accent": { "@layer daisyui.modifier": { "--btn-color": "var(--color-accent)", "&::file-selector-button": { color: "var(--color-accent-content)" }, "&, &:focus, &:focus-within": { "--input-color": "var(--color-accent)" } } }, ".file-input-info": { "@layer daisyui.modifier": { "--btn-color": "var(--color-info)", "&::file-selector-button": { color: "var(--color-info-content)" }, "&, &:focus, &:focus-within": { "--input-color": "var(--color-info)" } } }, ".file-input-success": { "@layer daisyui.modifier": { "--btn-color": "var(--color-success)", "&::file-selector-button": { color: "var(--color-success-content)" }, "&, &:focus, &:focus-within": { "--input-color": "var(--color-success)" } } }, ".file-input-warning": { "@layer daisyui.modifier": { "--btn-color": "var(--color-warning)", "&::file-selector-button": { color: "var(--color-warning-content)" }, "&, &:focus, &:focus-within": { "--input-color": "var(--color-warning)" } } }, ".file-input-error": { "@layer daisyui.modifier": { "--btn-color": "var(--color-error)", "&::file-selector-button": { color: "var(--color-error-content)" }, "&, &:focus, &:focus-within": { "--input-color": "var(--color-error)" } } }, ".file-input-xs": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 6)", "font-size": "0.6875rem", "line-height": "1rem", "&::file-selector-button": { "font-size": "0.6875rem" } } }, ".file-input-sm": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 8)", "font-size": "0.75rem", "line-height": "1.5rem", "&::file-selector-button": { "font-size": "0.75rem" } } }, ".file-input-md": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 10)", "font-size": "0.875rem", "line-height": 2, "&::file-selector-button": { "font-size": "0.875rem" } } }, ".file-input-lg": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 12)", "font-size": "1.125rem", "line-height": "2.5rem", "&::file-selector-button": { "font-size": "1.125rem" } } }, ".file-input-xl": { "@layer daisyui.modifier": { "padding-inline-end": "calc(0.25rem * 6)", "--size": "calc(var(--size-field, 0.25rem) * 14)", "font-size": "1.125rem", "line-height": "3rem", "&::file-selector-button": { "font-size": "1.375rem" } } } };

// packages/daisyui/components/fileinput/index.js
var fileinput_default = ({ addComponents, prefix = "" }) => {
  const prefixedfileinput = addPrefix(object_default13, prefix);
  addComponents({ ...prefixedfileinput });
};

// packages/daisyui/components/modal/object.js
var object_default14 = { ".modal": { "@layer daisyui.component": { "pointer-events": "none", visibility: "hidden", position: "fixed", inset: "calc(0.25rem * 0)", margin: "calc(0.25rem * 0)", display: "grid", height: "100%", "max-height": "none", width: "100%", "max-width": "none", "align-items": "center", "justify-items": "center", "background-color": "transparent", padding: "calc(0.25rem * 0)", color: "inherit", transition: "visibility 0.3s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out", overflow: "clip", "overscroll-behavior": "contain", "z-index": 999, "scrollbar-gutter": "auto", "&::backdrop": { display: "none" } }, "@layer daisyui.modifier": { "&.modal-open, &[open], &:target, .modal-toggle:checked + &": { "pointer-events": "auto", visibility: "visible", opacity: "100%", transition: "visibility 0s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out", "background-color": "oklch(0% 0 0/ 0.4)", ".modal-box": { translate: "0 0", scale: "1", opacity: 1 } }, "@starting-style": { "&.modal-open, &[open], &:target, .modal-toggle:checked + &": { opacity: "0%" } } } }, ".modal-action": { "@layer daisyui.component": { "margin-top": "calc(0.25rem * 6)", display: "flex", "justify-content": "flex-end", gap: "calc(0.25rem * 2)" } }, ".modal-toggle": { "@layer daisyui.component": { position: "fixed", height: "calc(0.25rem * 0)", width: "calc(0.25rem * 0)", appearance: "none", opacity: "0%" } }, ".modal-backdrop": { "@layer daisyui.component": { "grid-column-start": "1", "grid-row-start": "1", display: "grid", "align-self": "stretch", "justify-self": "stretch", color: "transparent", "z-index": -1, button: { cursor: "pointer" } } }, ".modal-box": { "@layer daisyui.component": { "grid-column-start": "1", "grid-row-start": "1", "max-height": "100vh", width: "calc(11/12 * 100%)", "max-width": "32rem", "background-color": "var(--color-base-100)", padding: "calc(0.25rem * 6)", transition: "translate 0.3s ease-out, scale 0.3s ease-out, opacity 0.2s ease-out 0.05s, box-shadow 0.3s ease-out", "border-top-left-radius": "var(--modal-tl, var(--radius-box))", "border-top-right-radius": "var(--modal-tr, var(--radius-box))", "border-bottom-left-radius": "var(--modal-bl, var(--radius-box))", "border-bottom-right-radius": "var(--modal-br, var(--radius-box))", scale: "95%", opacity: 0, "box-shadow": "oklch(0% 0 0/ 0.25) 0px 25px 50px -12px", "overflow-y": "auto", "overscroll-behavior": "contain" } }, ".modal-top": { "@layer daisyui.modifier": { "place-items": "start", ".modal-box": { height: "auto", width: "100%", "max-width": "none", "max-height": "calc(100vh - 5em)", translate: "0 -100%", scale: "1", "--modal-tl": "0", "--modal-tr": "0", "--modal-bl": "var(--radius-box)", "--modal-br": "var(--radius-box)" } } }, ".modal-middle": { "@layer daisyui.modifier": { "place-items": "center", ".modal-box": { height: "auto", width: "calc(11/12 * 100%)", "max-width": "32rem", "max-height": "calc(100vh - 5em)", translate: "0 2%", scale: "98%", "--modal-tl": "var(--radius-box)", "--modal-tr": "var(--radius-box)", "--modal-bl": "var(--radius-box)", "--modal-br": "var(--radius-box)" } } }, ".modal-bottom": { "@layer daisyui.modifier": { "place-items": "end", ".modal-box": { height: "auto", width: "100%", "max-width": "none", "max-height": "calc(100vh - 5em)", translate: "0 100%", scale: "1", "--modal-tl": "var(--radius-box)", "--modal-tr": "var(--radius-box)", "--modal-bl": "0", "--modal-br": "0" } } }, ".modal-start": { "@layer daisyui.modifier": { "place-items": "start", ".modal-box": { height: "100vh", "max-height": "none", width: "auto", "max-width": "none", translate: "-100% 0", scale: "1", "--modal-tl": "0", "--modal-tr": "var(--radius-box)", "--modal-bl": "0", "--modal-br": "var(--radius-box)" } } }, ".modal-end": { "@layer daisyui.modifier": { "place-items": "end", ".modal-box": { height: "100vh", "max-height": "none", width: "auto", "max-width": "none", translate: "100% 0", scale: "1", "--modal-tl": "var(--radius-box)", "--modal-tr": "0", "--modal-bl": "var(--radius-box)", "--modal-br": "0" } } } };

// packages/daisyui/components/modal/index.js
var modal_default = ({ addComponents, prefix = "" }) => {
  const prefixedmodal = addPrefix(object_default14, prefix);
  addComponents({ ...prefixedmodal });
};

// packages/daisyui/components/radialprogress/object.js
var object_default15 = { ".radial-progress": { "@layer daisyui.component": { position: "relative", display: "inline-grid", height: "var(--size)", width: "var(--size)", "place-content": "center", "border-radius": "calc(infinity * 1px)", "background-color": "transparent", "vertical-align": "middle", "box-sizing": "content-box", "--value": "0", "--size": "5rem", "--thickness": "calc(var(--size) / 10)", "--radialprogress": "calc(var(--value) * 1%)", transition: "--radialprogress 0.3s linear", "&:before": { position: "absolute", inset: "calc(0.25rem * 0)", "border-radius": "calc(infinity * 1px)", content: '""', background: "radial-gradient(farthest-side, currentColor 98%, #0000) top/var(--thickness) var(--thickness) no-repeat, conic-gradient(currentColor var(--radialprogress), #0000 0)", "webkit-mask": "radial-gradient( farthest-side, #0000 calc(100% - var(--thickness)), #000 calc(100% + 0.5px - var(--thickness)) )", mask: "radial-gradient( farthest-side, #0000 calc(100% - var(--thickness)), #000 calc(100% + 0.5px - var(--thickness)) )" }, "&:after": { position: "absolute", "border-radius": "calc(infinity * 1px)", "background-color": "currentcolor", transition: "transform 0.3s linear", content: '""', inset: "calc(50% - var(--thickness) / 2)", transform: "rotate(calc(var(--value) * 3.6deg - 90deg)) translate(calc(var(--size) / 2 - 50%))" } } } };

// packages/daisyui/components/radialprogress/index.js
var radialprogress_default = ({ addComponents, prefix = "" }) => {
  const prefixedradialprogress = addPrefix(object_default15, prefix);
  addComponents({ ...prefixedradialprogress });
};

// packages/daisyui/components/checkbox/object.js
var object_default16 = { ".checkbox": { "@layer daisyui.component": { border: "var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000))", position: "relative", display: "inline-block", "flex-shrink": 0, cursor: "pointer", appearance: "none", "border-radius": "var(--radius-selector)", padding: "calc(0.25rem * 1)", "vertical-align": "middle", color: "var(--color-base-content)", "box-shadow": "0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000", transition: "background-color 0.2s, box-shadow 0.2s", "--size": "calc(var(--size-selector, 0.25rem) * 6)", width: "var(--size)", height: "var(--size)", "background-size": "auto, calc(var(--noise) * 100%)", "background-image": "none, var(--fx-noise)", "&:before": { "--tw-content": '""', content: "var(--tw-content)", display: "block", width: "100%", height: "100%", rotate: "45deg", "background-color": "currentcolor", opacity: "0%", transition: "clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s", "transition-delay": "0.1s", "clip-path": "polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%)", "box-shadow": "0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset", "font-size": "1rem", "line-height": 0.75 }, "&:focus-visible": { outline: "2px solid var(--input-color, currentColor)", "outline-offset": "2px" }, '&:checked, &[aria-checked="true"]': { "background-color": "var(--input-color, #0000)", "box-shadow": "0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1))", "&:before": { "clip-path": "polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%)", opacity: "100%" }, "@media (forced-colors: active)": { "&:before": { rotate: "0deg", "background-color": "transparent", "--tw-content": '"✔︎"', "clip-path": "none" } }, "@media print": { "&:before": { rotate: "0deg", "background-color": "transparent", "--tw-content": '"✔︎"', "clip-path": "none" } } }, "&:indeterminate": { "background-color": "var( --input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000) )", "&:before": { rotate: "0deg", opacity: "100%", translate: "0 -35%", "clip-path": "polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%)" } } } }, ".checkbox-primary": { "@layer daisyui.modifier": { color: "var(--color-primary-content)", "--input-color": "var(--color-primary)" } }, ".checkbox-secondary": { "@layer daisyui.modifier": { color: "var(--color-secondary-content)", "--input-color": "var(--color-secondary)" } }, ".checkbox-accent": { "@layer daisyui.modifier": { color: "var(--color-accent-content)", "--input-color": "var(--color-accent)" } }, ".checkbox-neutral": { "@layer daisyui.modifier": { color: "var(--color-neutral-content)", "--input-color": "var(--color-neutral)" } }, ".checkbox-info": { "@layer daisyui.modifier": { color: "var(--color-info-content)", "--input-color": "var(--color-info)" } }, ".checkbox-success": { "@layer daisyui.modifier": { color: "var(--color-success-content)", "--input-color": "var(--color-success)" } }, ".checkbox-warning": { "@layer daisyui.modifier": { color: "var(--color-warning-content)", "--input-color": "var(--color-warning)" } }, ".checkbox-error": { "@layer daisyui.modifier": { color: "var(--color-error-content)", "--input-color": "var(--color-error)" } }, ".checkbox:disabled": { "@layer daisyui.modifier": { cursor: "not-allowed", opacity: "20%" } }, ".checkbox-xs": { "@layer daisyui.modifier": { padding: "0.125rem", "--size": "calc(var(--size-selector, 0.25rem) * 4)" } }, ".checkbox-sm": { "@layer daisyui.modifier": { padding: "0.1875rem", "--size": "calc(var(--size-selector, 0.25rem) * 5)" } }, ".checkbox-md": { "@layer daisyui.modifier": { padding: "0.25rem", "--size": "calc(var(--size-selector, 0.25rem) * 6)" } }, ".checkbox-lg": { "@layer daisyui.modifier": { padding: "0.3125rem", "--size": "calc(var(--size-selector, 0.25rem) * 7)" } }, ".checkbox-xl": { "@layer daisyui.modifier": { padding: "0.375rem", "--size": "calc(var(--size-selector, 0.25rem) * 8)" } } };

// packages/daisyui/components/checkbox/index.js
var checkbox_default = ({ addComponents, prefix = "" }) => {
  const prefixedcheckbox = addPrefix(object_default16, prefix);
  addComponents({ ...prefixedcheckbox });
};

// packages/daisyui/components/select/object.js
var object_default17 = { ".select": { "@layer daisyui.component": { border: "var(--border) solid #0000", position: "relative", display: "inline-flex", "flex-shrink": 1, appearance: "none", "align-items": "center", gap: "calc(0.25rem * 1.5)", "background-color": "var(--color-base-100)", "padding-inline-start": "calc(0.25rem * 3)", "padding-inline-end": "calc(0.25rem * 7)", "vertical-align": "middle", width: "clamp(3rem, 20rem, 100%)", height: "var(--size)", "font-size": "0.875rem", "touch-action": "manipulation", "border-start-start-radius": "var(--join-ss, var(--radius-field))", "border-start-end-radius": "var(--join-se, var(--radius-field))", "border-end-start-radius": "var(--join-es, var(--radius-field))", "border-end-end-radius": "var(--join-ee, var(--radius-field))", "background-image": "linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%)", "background-position": "calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%)", "background-size": "4px 4px, 4px 4px", "background-repeat": "no-repeat", "white-space": "nowrap", overflow: "hidden", "text-overflow": "ellipsis", "box-shadow": "0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset", "border-color": "var(--input-color)", "--input-color": "color-mix(in oklab, var(--color-base-content) 20%, #0000)", "--size": "calc(var(--size-field, 0.25rem) * 10)", '[dir="rtl"] &': { "background-position": "calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%)", "&::picker(select), select::picker(select)": { translate: "0.5rem 0" } }, "&[multiple]": { height: "auto", overflow: "auto", "padding-block": "calc(0.25rem * 3)", "padding-inline-end": "calc(0.25rem * 3)", "background-image": "none" }, select: { "margin-inline-start": "calc(0.25rem * -3)", "margin-inline-end": "calc(0.25rem * -7)", width: "calc(100% + 2.75rem)", appearance: "none", "padding-inline-start": "calc(0.25rem * 3)", "padding-inline-end": "calc(0.25rem * 7)", height: "calc(100% - calc(var(--border) * 2))", "align-items": "center", background: "inherit", "border-radius": "inherit", "border-style": "none", "&:focus, &:focus-within": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" } }, "&:not(:last-child)": { "margin-inline-end": "calc(0.25rem * -5.5)", "background-image": "none" } }, "&:focus, &:focus-within": { "--input-color": "var(--color-base-content)", "box-shadow": "0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000)", outline: "2px solid var(--input-color)", "outline-offset": "2px", isolation: "isolate", "z-index": 1 }, "&:has(> select[disabled]), &:is(:disabled, [disabled]), fieldset:disabled &": { cursor: "not-allowed", "border-color": "var(--color-base-200)", "background-color": "var(--color-base-200)", color: "color-mix(in oklab, var(--color-base-content) 40%, transparent)", "&::placeholder": { color: "color-mix(in oklab, var(--color-base-content) 20%, transparent)" } }, "&:has(> select[disabled]) > select[disabled]": { cursor: "not-allowed" }, "&, & select": { "@supports (appearance: base-select)": [{ appearance: "base-select" }, { "&::picker(select)": { appearance: "base-select" } }], "&::picker(select)": { color: "inherit", "max-height": "min(24rem, 70dvh)", "margin-inline": "0.5rem", translate: "-0.5rem 0", border: "var(--border) solid var(--color-base-200)", "margin-block": "calc(0.25rem * 2)", "border-radius": "var(--radius-box)", padding: "calc(0.25rem * 2)", "background-color": "inherit", "box-shadow": ["0 2px calc(var(--depth) * 3px) -2px oklch(0% 0 0/0.2)", "0 20px 25px -5px rgb(0 0 0 / calc(var(--depth) * 0.1)), 0 8px 10px -6px rgb(0 0 0 / calc(var(--depth) * 0.1))"] }, "&::picker-icon": { display: "none" }, optgroup: { "padding-top": "0.5em", option: { "&:nth-child(1)": { "margin-top": "0.5em" } } }, option: { "border-radius": "var(--radius-field)", "padding-inline": "calc(0.25rem * 3)", "padding-block": "calc(0.25rem * 1.5)", "transition-property": "color, background-color", "transition-duration": "0.2s", "transition-timing-function": "cubic-bezier(0, 0, 0.2, 1)", "white-space": "normal", "&:not(:disabled)": { "&:hover, &:focus-visible": { cursor: "pointer", "background-color": "color-mix(in oklab, var(--color-base-content) 10%, transparent)", "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" } }, "&:active": { "background-color": "var(--color-neutral)", color: "var(--color-neutral-content)", "box-shadow": "0 2px calc(var(--depth) * 3px) -2px var(--color-neutral)" } } } } } }, ".select-ghost": { "@layer daisyui.modifier": { "background-color": "transparent", transition: "background-color 0.2s", "box-shadow": "none", "border-color": "#0000", "&:focus, &:focus-within": { "background-color": "var(--color-base-100)", color: "var(--color-base-content)", "border-color": "#0000", "box-shadow": "none" } } }, ".select-neutral": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-neutral)" } } }, ".select-primary": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-primary)" } } }, ".select-secondary": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-secondary)" } } }, ".select-accent": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-accent)" } } }, ".select-info": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-info)" } } }, ".select-success": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-success)" } } }, ".select-warning": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-warning)" } } }, ".select-error": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-error)" } } }, ".select-xs": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 6)", "font-size": "0.6875rem", option: { "padding-inline": "calc(0.25rem * 2)", "padding-block": "calc(0.25rem * 1)" } } }, ".select-sm": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 8)", "font-size": "0.75rem", option: { "padding-inline": "calc(0.25rem * 2.5)", "padding-block": "calc(0.25rem * 1)" } } }, ".select-md": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 10)", "font-size": "0.875rem", option: { "padding-inline": "calc(0.25rem * 3)", "padding-block": "calc(0.25rem * 1.5)" } } }, ".select-lg": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 12)", "font-size": "1.125rem", option: { "padding-inline": "calc(0.25rem * 4)", "padding-block": "calc(0.25rem * 1.5)" } } }, ".select-xl": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 14)", "font-size": "1.375rem", option: { "padding-inline": "calc(0.25rem * 5)", "padding-block": "calc(0.25rem * 1.5)" } } } };

// packages/daisyui/components/select/index.js
var select_default = ({ addComponents, prefix = "" }) => {
  const prefixedselect = addPrefix(object_default17, prefix);
  addComponents({ ...prefixedselect });
};

// packages/daisyui/components/radio/object.js
var object_default18 = { ".radio": { "@layer daisyui.component": { position: "relative", display: "inline-block", "flex-shrink": 0, cursor: "pointer", appearance: "none", "border-radius": "calc(infinity * 1px)", padding: "calc(0.25rem * 1)", "vertical-align": "middle", border: "var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000))", "box-shadow": "0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset", "--size": "calc(var(--size-selector, 0.25rem) * 6)", width: "var(--size)", height: "var(--size)", color: "var(--input-color, currentColor)", "&:before": { display: "block", width: "100%", height: "100%", "border-radius": "calc(infinity * 1px)", "--tw-content": '""', content: "var(--tw-content)", "background-size": "auto, calc(var(--noise) * 100%)", "background-image": "none, var(--fx-noise)" }, "&:focus-visible": { outline: "2px solid currentColor" }, '&:checked, &[aria-checked="true"]': { "border-color": "currentcolor", "background-color": "var(--color-base-100)", "@media (prefers-reduced-motion: no-preference)": { animation: "radio 0.2s ease-out" }, "&:before": { "background-color": "currentcolor", "box-shadow": "0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1))" }, "@media (forced-colors: active)": { "&:before": { "outline-style": "var(--tw-outline-style)", "outline-width": "1px", "outline-offset": "calc(1px * -1)" } }, "@media print": { "&:before": { outline: "0.25rem solid", "outline-offset": "-1rem" } } } } }, ".radio-primary": { "@layer daisyui.modifier": { "--input-color": "var(--color-primary)" } }, ".radio-secondary": { "@layer daisyui.modifier": { "--input-color": "var(--color-secondary)" } }, ".radio-accent": { "@layer daisyui.modifier": { "--input-color": "var(--color-accent)" } }, ".radio-neutral": { "@layer daisyui.modifier": { "--input-color": "var(--color-neutral)" } }, ".radio-info": { "@layer daisyui.modifier": { "--input-color": "var(--color-info)" } }, ".radio-success": { "@layer daisyui.modifier": { "--input-color": "var(--color-success)" } }, ".radio-warning": { "@layer daisyui.modifier": { "--input-color": "var(--color-warning)" } }, ".radio-error": { "@layer daisyui.modifier": { "--input-color": "var(--color-error)" } }, ".radio:disabled": { "@layer daisyui.modifier": { cursor: "not-allowed", opacity: "20%" } }, ".radio-xs": { "@layer daisyui.modifier": { padding: "0.125rem", '&:is([type="radio"])': { "--size": "calc(var(--size-selector, 0.25rem) * 4)" } } }, ".radio-sm": { "@layer daisyui.modifier": { padding: "0.1875rem", '&:is([type="radio"])': { "--size": "calc(var(--size-selector, 0.25rem) * 5)" } } }, ".radio-md": { "@layer daisyui.modifier": { padding: "0.25rem", '&:is([type="radio"])': { "--size": "calc(var(--size-selector, 0.25rem) * 6)" } } }, ".radio-lg": { "@layer daisyui.modifier": { padding: "0.3125rem", '&:is([type="radio"])': { "--size": "calc(var(--size-selector, 0.25rem) * 7)" } } }, ".radio-xl": { "@layer daisyui.modifier": { padding: "0.375rem", '&:is([type="radio"])': { "--size": "calc(var(--size-selector, 0.25rem) * 8)" } } }, "@keyframes radio": { "0%": { padding: "5px" }, "50%": { padding: "3px" } } };

// packages/daisyui/components/radio/index.js
var radio_default = ({ addComponents, prefix = "" }) => {
  const prefixedradio = addPrefix(object_default18, prefix);
  addComponents({ ...prefixedradio });
};

// packages/daisyui/components/avatar/object.js
var object_default19 = { ".avatar-group": { "@layer daisyui.component": { display: "flex", overflow: "hidden", ".avatar": { overflow: "hidden", "border-radius": "calc(infinity * 1px)", border: "4px solid var(--color-base-100)" } } }, ".avatar": { "@layer daisyui.component": { position: "relative", display: "inline-flex", "vertical-align": "middle", "& > div": { display: "block", "aspect-ratio": "1 / 1", overflow: "hidden" }, img: { height: "100%", width: "100%", "object-fit": "cover" } } }, ".avatar-placeholder": { "@layer daisyui.modifier": { "& > div": { display: "flex", "align-items": "center", "justify-content": "center" } } }, ".avatar-online": { "@layer daisyui.modifier": { "&:before": { content: '""', position: "absolute", "z-index": 1, display: "block", "border-radius": "calc(infinity * 1px)", "background-color": "var(--color-success)", outline: "2px solid var(--color-base-100)", width: "15%", height: "15%", top: "7%", right: "7%" } } }, ".avatar-offline": { "@layer daisyui.modifier": { "&:before": { content: '""', position: "absolute", "z-index": 1, display: "block", "border-radius": "calc(infinity * 1px)", "background-color": "var(--color-base-300)", outline: "2px solid var(--color-base-100)", width: "15%", height: "15%", top: "7%", right: "7%" } } } };

// packages/daisyui/components/avatar/index.js
var avatar_default = ({ addComponents, prefix = "" }) => {
  const prefixedavatar = addPrefix(object_default19, prefix);
  addComponents({ ...prefixedavatar });
};

// packages/daisyui/components/toast/object.js
var object_default20 = { ".toast": { "@layer daisyui.component": { position: "fixed", "inset-inline-start": "auto", "inset-inline-end": "calc(0.25rem * 4)", top: "auto", bottom: "calc(0.25rem * 4)", display: "flex", "flex-direction": "column", gap: "calc(0.25rem * 2)", "background-color": "transparent", translate: "var(--toast-x, 0) var(--toast-y, 0)", width: "max-content", "max-width": "calc(100vw - 2rem)", "& > *": { "@media (prefers-reduced-motion: no-preference)": { animation: "toast 0.25s ease-out" } } } }, ".toast-start": { "@layer daisyui.modifier": { "inset-inline-start": "calc(0.25rem * 4)", "inset-inline-end": "auto", "--toast-x": "0" } }, ".toast-center": { "@layer daisyui.modifier": { "inset-inline-start": "calc(1/2 * 100%)", "inset-inline-end": "calc(1/2 * 100%)", "--toast-x": "-50%" } }, ".toast-end": { "@layer daisyui.modifier": { "inset-inline-start": "auto", "inset-inline-end": "calc(0.25rem * 4)", "--toast-x": "0" } }, ".toast-bottom": { "@layer daisyui.modifier": { top: "auto", bottom: "calc(0.25rem * 4)", "--toast-y": "0" } }, ".toast-middle": { "@layer daisyui.modifier": { top: "calc(1/2 * 100%)", bottom: "auto", "--toast-y": "-50%" } }, ".toast-top": { "@layer daisyui.modifier": { top: "calc(0.25rem * 4)", bottom: "auto", "--toast-y": "0" } }, "@keyframes toast": { "0%": { scale: "0.9", opacity: 0 }, "100%": { scale: "1", opacity: 1 } } };

// packages/daisyui/components/toast/index.js
var toast_default = ({ addComponents, prefix = "" }) => {
  const prefixedtoast = addPrefix(object_default20, prefix);
  addComponents({ ...prefixedtoast });
};

// packages/daisyui/components/carousel/object.js
var object_default21 = { ".carousel": { "@layer daisyui.component": { display: "inline-flex", "overflow-x": "scroll", "scroll-snap-type": "x mandatory", "scrollbar-width": "none", "@media (prefers-reduced-motion: no-preference)": { "scroll-behavior": "smooth" }, "&::-webkit-scrollbar": { display: "none" } } }, ".carousel-vertical": { "@layer daisyui.modifier": { "flex-direction": "column", "overflow-y": "scroll", "scroll-snap-type": "y mandatory" } }, ".carousel-horizontal": { "@layer daisyui.modifier": { "flex-direction": "row", "overflow-x": "scroll", "scroll-snap-type": "x mandatory" } }, ".carousel-item": { "@layer daisyui.component": { "box-sizing": "content-box", display: "flex", flex: "none", "scroll-snap-align": "start" } }, ".carousel-start": { "@layer daisyui.modifier": { ".carousel-item": { "scroll-snap-align": "start" } } }, ".carousel-center": { "@layer daisyui.modifier": { ".carousel-item": { "scroll-snap-align": "center" } } }, ".carousel-end": { "@layer daisyui.modifier": { ".carousel-item": { "scroll-snap-align": "end" } } } };

// packages/daisyui/components/carousel/index.js
var carousel_default = ({ addComponents, prefix = "" }) => {
  const prefixedcarousel = addPrefix(object_default21, prefix);
  addComponents({ ...prefixedcarousel });
};

// packages/daisyui/components/mockup/object.js
var object_default22 = { ".mockup-code": { "@layer daisyui.component": { position: "relative", overflow: "hidden", "overflow-x": "auto", "border-radius": "var(--radius-box)", "background-color": "var(--color-neutral)", "padding-block": "calc(0.25rem * 5)", color: "var(--color-neutral-content)", "font-size": "0.875rem", direction: "ltr", "&:before": { content: '""', "margin-bottom": "calc(0.25rem * 4)", display: "block", height: "calc(0.25rem * 3)", width: "calc(0.25rem * 3)", "border-radius": "calc(infinity * 1px)", opacity: "30%", "box-shadow": "1.4em 0, 2.8em 0, 4.2em 0" }, pre: { "padding-right": "calc(0.25rem * 5)", "&:before": { content: '""', "margin-right": "2ch" }, "&[data-prefix]": { "&:before": { content: "attr(data-prefix)", display: "inline-block", width: "calc(0.25rem * 8)", "text-align": "right", opacity: "50%" } } } } }, ".mockup-window": { "@layer daisyui.component": { position: "relative", display: "flex", "flex-direction": "column", overflow: "hidden", "overflow-x": "auto", "border-radius": "var(--radius-box)", "padding-top": "calc(0.25rem * 5)", "&:before": { content: '""', "margin-bottom": "calc(0.25rem * 4)", display: "block", "aspect-ratio": "1 / 1", height: "calc(0.25rem * 3)", "flex-shrink": 0, "align-self": "flex-start", "border-radius": "calc(infinity * 1px)", opacity: "30%", "box-shadow": "1.4em 0, 2.8em 0, 4.2em 0" }, '[dir="rtl"] &:before': { "align-self": "flex-end" }, "pre[data-prefix]": { "&:before": { content: "attr(data-prefix)", display: "inline-block", "text-align": "right" } } } }, ".mockup-browser": { "@layer daisyui.component": { position: "relative", overflow: "hidden", "overflow-x": "auto", "border-radius": "var(--radius-box)", "pre[data-prefix]": { "&:before": { content: "attr(data-prefix)", display: "inline-block", "text-align": "right" } }, ".mockup-browser-toolbar": { "margin-block": "calc(0.25rem * 3)", display: "inline-flex", width: "100%", "align-items": "center", "padding-right": "1.4em", '&:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *)': { "flex-direction": "row-reverse" }, "&:before": { content: '""', "margin-right": "4.8rem", display: "inline-block", "aspect-ratio": "1 / 1", height: "calc(0.25rem * 3)", "border-radius": "calc(infinity * 1px)", opacity: "30%", "box-shadow": "1.4em 0, 2.8em 0, 4.2em 0" }, ".input": { "margin-inline": "auto", display: "flex", height: "100%", "align-items": "center", gap: "calc(0.25rem * 2)", overflow: "hidden", "background-color": "var(--color-base-200)", "text-overflow": "ellipsis", "white-space": "nowrap", "font-size": "0.75rem", direction: "ltr", "&:before": { content: '""', width: "calc(0.25rem * 4)", height: "calc(0.25rem * 4)", opacity: "50%", "background-color": "currentColor", mask: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z' clip-rule='evenodd' /%3E%3C/svg%3E") no-repeat center`, "mask-size": "contain" } } } } }, ".mockup-phone": { "@layer daisyui.component": { display: "inline-grid", "justify-items": "center", border: "5px solid #6b6b6b", "border-radius": "65px", "background-color": "#000", padding: "6px", overflow: "hidden", width: "100%", "max-width": "462px", "aspect-ratio": "462 / 978", "@supports (corner-shape: superellipse(1.45))": { "border-radius": "90px", "corner-shape": "superellipse(1.45)" } } }, ".mockup-phone-camera": { "@layer daisyui.component": { "grid-column": "1/1", "grid-row": "1/1", background: "#000", height: "3.7%", width: "28%", "border-radius": "17px", "z-index": 1, "margin-top": "3%" } }, ".mockup-phone-display": { "@layer daisyui.component": { "border-radius": "54px", "grid-column": "1/1", "grid-row": "1/1", overflow: "hidden", width: "100%", height: "100%", "@supports (corner-shape: superellipse(1.87))": { "border-radius": "101px", "corner-shape": "superellipse(1.87)" }, "& > img": { width: "100%", height: "100%", "object-fit": "cover" } } } };

// packages/daisyui/components/mockup/index.js
var mockup_default = ({ addComponents, prefix = "" }) => {
  const prefixedmockup = addPrefix(object_default22, prefix);
  addComponents({ ...prefixedmockup });
};

// packages/daisyui/components/divider/object.js
var object_default23 = { ".divider": { "@layer daisyui.component": { display: "flex", height: "calc(0.25rem * 4)", "flex-direction": "row", "align-items": "center", "align-self": "stretch", "white-space": "nowrap", margin: "var(--divider-m, 1rem 0)", "--divider-color": "color-mix(in oklab, var(--color-base-content) 10%, transparent)", "&:before, &:after": { content: '""', height: "calc(0.25rem * 0.5)", width: "100%", "flex-grow": 1, "background-color": "var(--divider-color)" }, "@media print": { "&:before, &:after": { border: "0.5px solid" } }, "&:not(:empty)": { gap: "calc(0.25rem * 4)" } } }, ".divider-horizontal": { "@layer daisyui.modifier": { "--divider-m": "0 1rem", "&.divider": { height: "auto", width: "calc(0.25rem * 4)", "flex-direction": "column", "&:before": { height: "100%", width: "calc(0.25rem * 0.5)" }, "&:after": { height: "100%", width: "calc(0.25rem * 0.5)" } } } }, ".divider-vertical": { "@layer daisyui.modifier": { "--divider-m": "1rem 0", "&.divider": { height: "calc(0.25rem * 4)", width: "auto", "flex-direction": "row", "&:before": { height: "calc(0.25rem * 0.5)", width: "100%" }, "&:after": { height: "calc(0.25rem * 0.5)", width: "100%" } } } }, ".divider-neutral": { "@layer daisyui.modifier": { "&:before, &:after": { "background-color": "var(--color-neutral)" } } }, ".divider-primary": { "@layer daisyui.modifier": { "&:before, &:after": { "background-color": "var(--color-primary)" } } }, ".divider-secondary": { "@layer daisyui.modifier": { "&:before, &:after": { "background-color": "var(--color-secondary)" } } }, ".divider-accent": { "@layer daisyui.modifier": { "&:before, &:after": { "background-color": "var(--color-accent)" } } }, ".divider-success": { "@layer daisyui.modifier": { "&:before, &:after": { "background-color": "var(--color-success)" } } }, ".divider-warning": { "@layer daisyui.modifier": { "&:before, &:after": { "background-color": "var(--color-warning)" } } }, ".divider-info": { "@layer daisyui.modifier": { "&:before, &:after": { "background-color": "var(--color-info)" } } }, ".divider-error": { "@layer daisyui.modifier": { "&:before, &:after": { "background-color": "var(--color-error)" } } }, ".divider-start:before": { "@layer daisyui.modifier": { display: "none" } }, ".divider-end:after": { "@layer daisyui.modifier": { display: "none" } } };

// packages/daisyui/components/divider/index.js
var divider_default = ({ addComponents, prefix = "" }) => {
  const prefixeddivider = addPrefix(object_default23, prefix);
  addComponents({ ...prefixeddivider });
};

// packages/daisyui/components/button/object.js
var object_default24 = { ":where(.btn)": { "@layer daisyui.component": { width: "unset" } }, ".btn": { ".prose &": { "text-decoration-line": "none" }, "@layer daisyui.component": { display: "inline-flex", "flex-shrink": 0, cursor: "pointer", "flex-wrap": "nowrap", "align-items": "center", "justify-content": "center", gap: "calc(0.25rem * 1.5)", "text-align": "center", "vertical-align": "middle", "outline-offset": "2px", "webkit-user-select": "none", "user-select": "none", "padding-inline": "var(--btn-p)", color: "var(--btn-fg)", "--tw-prose-links": "var(--btn-fg)", height: "var(--size)", "font-size": "var(--fontsize, 0.875rem)", "font-weight": 600, "outline-color": "var(--btn-color, var(--color-base-content))", "transition-property": "color, background-color, border-color, box-shadow", "transition-timing-function": "cubic-bezier(0, 0, 0.2, 1)", "transition-duration": "0.2s", "border-start-start-radius": "var(--join-ss, var(--radius-field))", "border-start-end-radius": "var(--join-se, var(--radius-field))", "border-end-start-radius": "var(--join-es, var(--radius-field))", "border-end-end-radius": "var(--join-ee, var(--radius-field))", "background-color": "var(--btn-bg)", "background-size": "auto, calc(var(--noise) * 100%)", "background-image": "none, var(--btn-noise)", "border-width": "var(--border)", "border-style": "solid", "border-color": "var(--btn-border)", "text-shadow": "0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15))", "touch-action": "manipulation", "box-shadow": "0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow)", "--size": "calc(var(--size-field, 0.25rem) * 10)", "--btn-bg": "var(--btn-color, var(--color-base-200))", "--btn-fg": "var(--color-base-content)", "--btn-p": "1rem", "--btn-border": "color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%))", "--btn-shadow": `0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
      0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000)`, "--btn-noise": "var(--fx-noise)", "@media (hover: hover)": { "&:hover": { "--btn-bg": "color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%)" } }, "&:focus-visible, &:has(:focus-visible)": { "outline-width": "2px", "outline-style": "solid", isolation: "isolate" }, "&:active:not(.btn-active)": { translate: "0 0.5px", "--btn-bg": "color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%)", "--btn-border": "color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%)", "--btn-shadow": "0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0)" }, '&:is(input[type="checkbox"], input[type="radio"])': { appearance: "none", "&::after": { content: "attr(aria-label)" } }, "&:where(input:checked:not(.filter .btn))": { "--btn-color": "var(--color-primary)", "--btn-fg": "var(--color-primary-content)", isolation: "isolate" } } }, ".btn-disabled, .btn:disabled, .btn[disabled]": { "@layer daisyui.modifier": { "&:not(.btn-link, .btn-ghost)": { "background-color": "color-mix(in oklab, var(--color-base-content) 10%, transparent)", "box-shadow": "none" }, "pointer-events": "none", "--btn-border": "#0000", "--btn-noise": "none", "--btn-fg": "color-mix(in oklch, var(--color-base-content) 20%, #0000)", "@media (hover: hover)": { "&:hover": { "pointer-events": "none", "background-color": "color-mix(in oklab, var(--color-neutral) 20%, transparent)", "--btn-border": "#0000", "--btn-fg": "color-mix(in oklch, var(--color-base-content) 20%, #0000)" } } } }, ".btn-active": { "@layer daisyui.modifier": { "--btn-bg": "color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%)", "--btn-shadow": "0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0)", isolation: "isolate" } }, ".btn-primary": { "@layer daisyui.modifier.color": { "--btn-color": "var(--color-primary)", "--btn-fg": "var(--color-primary-content)" } }, ".btn-secondary": { "@layer daisyui.modifier.color": { "--btn-color": "var(--color-secondary)", "--btn-fg": "var(--color-secondary-content)" } }, ".btn-accent": { "@layer daisyui.modifier.color": { "--btn-color": "var(--color-accent)", "--btn-fg": "var(--color-accent-content)" } }, ".btn-neutral": { "@layer daisyui.modifier.color": { "--btn-color": "var(--color-neutral)", "--btn-fg": "var(--color-neutral-content)" } }, ".btn-info": { "@layer daisyui.modifier.color": { "--btn-color": "var(--color-info)", "--btn-fg": "var(--color-info-content)" } }, ".btn-success": { "@layer daisyui.modifier.color": { "--btn-color": "var(--color-success)", "--btn-fg": "var(--color-success-content)" } }, ".btn-warning": { "@layer daisyui.modifier.color": { "--btn-color": "var(--color-warning)", "--btn-fg": "var(--color-warning-content)" } }, ".btn-error": { "@layer daisyui.modifier.color": { "--btn-color": "var(--color-error)", "--btn-fg": "var(--color-error-content)" } }, ".btn-ghost": { "@layer daisyui.modifier": { "&:not(.btn-active, :hover, :active:focus, :focus-visible)": { "--btn-shadow": '""', "--btn-bg": "#0000", "--btn-border": "#0000", "--btn-noise": "none", "&:not(:disabled, [disabled], .btn-disabled)": { "outline-color": "currentcolor", "--btn-fg": "currentColor" } }, "@media (hover: none)": { "&:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled)": { "--btn-shadow": '""', "--btn-bg": "#0000", "--btn-border": "#0000", "--btn-noise": "none", "--btn-fg": "currentColor" } } } }, ".btn-link": { "@layer daisyui.modifier": { "text-decoration-line": "underline", "outline-color": "currentcolor", "--btn-border": "#0000", "--btn-bg": "#0000", "--btn-fg": "var(--color-primary)", "--btn-noise": "none", "--btn-shadow": '""', "&:is(.btn-active, :hover, :active:focus, :focus-visible)": { "text-decoration-line": "underline", "--btn-border": "#0000", "--btn-bg": "#0000" }, "@media (hover: none)": { "&:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled)": { "text-decoration-line": "none" } } } }, ".btn-outline": { "@layer daisyui.modifier": { "&:not( .btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled, :checked )": { "--btn-shadow": '""', "--btn-bg": "#0000", "--btn-fg": "var(--btn-color)", "--btn-border": "var(--btn-color)", "--btn-noise": "none" }, "@media (hover: none)": { "&:hover:not( .btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled, :checked )": { "--btn-shadow": '""', "--btn-bg": "#0000", "--btn-fg": "var(--btn-color)", "--btn-border": "var(--btn-color)", "--btn-noise": "none" } } } }, ".btn-dash": { "@layer daisyui.modifier": { "&:not( .btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled, :checked )": { "--btn-shadow": '""', "border-style": "dashed", "--btn-bg": "#0000", "--btn-fg": "var(--btn-color)", "--btn-border": "var(--btn-color)", "--btn-noise": "none" }, "@media (hover: none)": { "&:hover:not( .btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled, :checked )": { "--btn-shadow": '""', "border-style": "dashed", "--btn-bg": "#0000", "--btn-fg": "var(--btn-color)", "--btn-border": "var(--btn-color)", "--btn-noise": "none" } } } }, ".btn-soft": { "@layer daisyui.modifier": { "&:not( .btn-active, :hover, :active:focus, :focus-visible, :disabled, [disabled], .btn-disabled )": { "--btn-shadow": '""', "--btn-fg": "var(--btn-color, var(--color-base-content))", "--btn-bg": `color-mix(
        in oklab,
        var(--btn-color, var(--color-base-content)) 8%,
        var(--color-base-100)
      )`, "--btn-border": `color-mix(
        in oklab,
        var(--btn-color, var(--color-base-content)) 10%,
        var(--color-base-100)
      )`, "--btn-noise": "none" }, "@media (hover: none)": { "&:hover:not(.btn-active, :active, :focus-visible, :disabled, [disabled], .btn-disabled)": { "--btn-shadow": '""', "--btn-fg": "var(--btn-color, var(--color-base-content))", "--btn-bg": `color-mix(
          in oklab,
          var(--btn-color, var(--color-base-content)) 8%,
          var(--color-base-100)
        )`, "--btn-border": `color-mix(
          in oklab,
          var(--btn-color, var(--color-base-content)) 10%,
          var(--color-base-100)
        )`, "--btn-noise": "none" } } } }, ".btn-xs": { "@layer daisyui.modifier": { "--fontsize": "0.6875rem", "--btn-p": "0.5rem", "--size": "calc(var(--size-field, 0.25rem) * 6)" } }, ".btn-sm": { "@layer daisyui.modifier": { "--fontsize": "0.75rem", "--btn-p": "0.75rem", "--size": "calc(var(--size-field, 0.25rem) * 8)" } }, ".btn-md": { "@layer daisyui.modifier": { "--fontsize": "0.875rem", "--btn-p": "1rem", "--size": "calc(var(--size-field, 0.25rem) * 10)" } }, ".btn-lg": { "@layer daisyui.modifier": { "--fontsize": "1.125rem", "--btn-p": "1.25rem", "--size": "calc(var(--size-field, 0.25rem) * 12)" } }, ".btn-xl": { "@layer daisyui.modifier": { "--fontsize": "1.375rem", "--btn-p": "1.5rem", "--size": "calc(var(--size-field, 0.25rem) * 14)" } }, ".btn-square": { "@layer daisyui.modifier": { "padding-inline": "calc(0.25rem * 0)", width: "var(--size)", height: "var(--size)" } }, ".btn-circle": { "@layer daisyui.modifier": { "border-radius": "calc(infinity * 1px)", "padding-inline": "calc(0.25rem * 0)", width: "var(--size)", height: "var(--size)" } }, ".btn-wide": { "@layer daisyui.modifier": { width: "100%", "max-width": "calc(0.25rem * 64)" } }, ".btn-block": { "@layer daisyui.modifier": { width: "100%" } } };

// packages/daisyui/components/button/index.js
var button_default = ({ addComponents, prefix = "" }) => {
  const prefixedbutton = addPrefix(object_default24, prefix);
  addComponents({ ...prefixedbutton });
};

// packages/daisyui/components/fieldset/object.js
var object_default25 = { ".fieldset": { "@layer daisyui.component": { display: "grid", gap: "calc(0.25rem * 1.5)", "padding-block": "calc(0.25rem * 1)", "font-size": "0.75rem", "grid-template-columns": "1fr", "grid-auto-rows": "max-content" } }, ".fieldset-legend": { "@layer daisyui.component": { "margin-bottom": "calc(0.25rem * -1)", display: "flex", "align-items": "center", "justify-content": "space-between", gap: "calc(0.25rem * 2)", "padding-block": "calc(0.25rem * 2)", color: "var(--color-base-content)", "font-weight": 600 } }, ".fieldset-label": { "@layer daisyui.component": { display: "flex", "align-items": "center", gap: "calc(0.25rem * 1.5)", color: "color-mix(in oklab, var(--color-base-content) 60%, transparent)", "&:has(input)": { cursor: "pointer" } } } };

// packages/daisyui/components/fieldset/index.js
var fieldset_default = ({ addComponents, prefix = "" }) => {
  const prefixedfieldset = addPrefix(object_default25, prefix);
  addComponents({ ...prefixedfieldset });
};

// packages/daisyui/components/steps/object.js
var object_default26 = { ".steps": { "@layer daisyui.component": { display: "inline-grid", "grid-auto-flow": "column", overflow: "hidden", "overflow-x": "auto", "counter-reset": "step", "grid-auto-columns": "1fr", ".step": { display: "grid", "grid-template-columns": ["repeat(1, minmax(0, 1fr))", "auto"], "grid-template-rows": ["repeat(2, minmax(0, 1fr))", "40px 1fr"], "place-items": "center", "text-align": "center", "min-width": "4rem", "--step-bg": "var(--color-base-300)", "--step-fg": "var(--color-base-content)", "&:before": { top: "calc(0.25rem * 0)", "grid-column-start": "1", "grid-row-start": "1", height: "calc(0.25rem * 2)", width: "100%", border: "1px solid", color: "var(--step-bg)", "background-color": "var(--step-bg)", "--tw-content": '""', content: "var(--tw-content)", "margin-inline-start": "-100%" }, "> .step-icon, &:not(:has(.step-icon)):after": { content: "counter(step)", "counter-increment": "step", "z-index": 1, color: "var(--step-fg)", "background-color": "var(--step-bg)", border: "1px solid var(--step-bg)", position: "relative", "grid-column-start": "1", "grid-row-start": "1", display: "grid", height: "calc(0.25rem * 8)", width: "calc(0.25rem * 8)", "place-items": "center", "place-self": "center", "border-radius": "calc(infinity * 1px)" }, "&:first-child:before": { content: "none" }, "&[data-content]:after": { content: "attr(data-content)" } } }, "@layer daisyui.modifier": { ".step-neutral": { "+ .step-neutral:before, &:after, > .step-icon": { "--step-bg": "var(--color-neutral)", "--step-fg": "var(--color-neutral-content)" } }, ".step-primary": { "+ .step-primary:before, &:after, > .step-icon": { "--step-bg": "var(--color-primary)", "--step-fg": "var(--color-primary-content)" } }, ".step-secondary": { "+ .step-secondary:before, &:after, > .step-icon": { "--step-bg": "var(--color-secondary)", "--step-fg": "var(--color-secondary-content)" } }, ".step-accent": { "+ .step-accent:before, &:after, > .step-icon": { "--step-bg": "var(--color-accent)", "--step-fg": "var(--color-accent-content)" } }, ".step-info": { "+ .step-info:before, &:after, > .step-icon": { "--step-bg": "var(--color-info)", "--step-fg": "var(--color-info-content)" } }, ".step-success": { "+ .step-success:before, &:after, > .step-icon": { "--step-bg": "var(--color-success)", "--step-fg": "var(--color-success-content)" } }, ".step-warning": { "+ .step-warning:before, &:after, > .step-icon": { "--step-bg": "var(--color-warning)", "--step-fg": "var(--color-warning-content)" } }, ".step-error": { "+ .step-error:before, &:after, > .step-icon": { "--step-bg": "var(--color-error)", "--step-fg": "var(--color-error-content)" } } } }, ".steps-horizontal": { "@layer daisyui.modifier": { "grid-auto-columns": "1fr", display: "inline-grid", "grid-auto-flow": "column", overflow: "hidden", "overflow-x": "auto", ".step": { display: "grid", "grid-template-columns": ["repeat(1, minmax(0, 1fr))", "auto"], "grid-template-rows": ["repeat(2, minmax(0, 1fr))", "40px 1fr"], "place-items": "center", "text-align": "center", "min-width": "4rem", "&:before": { height: "calc(0.25rem * 2)", width: "100%", translate: "0", "margin-inline-start": "-100%" }, '[dir="rtl"] &:before': { translate: "0" } } } }, ".steps-vertical": { "@layer daisyui.modifier": { "grid-auto-rows": "1fr", "grid-auto-flow": "row", ".step": { display: "grid", "grid-template-columns": ["repeat(2, minmax(0, 1fr))", "40px 1fr"], "grid-template-rows": ["repeat(1, minmax(0, 1fr))", "auto"], gap: "0.5rem", "min-height": "4rem", "justify-items": "start", "&:before": { height: "100%", width: "calc(0.25rem * 2)", translate: "-50% -50%", "margin-inline-start": "50%" }, '[dir="rtl"] &:before': { translate: "50% -50%" } } } } };

// packages/daisyui/components/steps/index.js
var steps_default = ({ addComponents, prefix = "" }) => {
  const prefixedsteps = addPrefix(object_default26, prefix);
  addComponents({ ...prefixedsteps });
};

// packages/daisyui/components/navbar/object.js
var object_default27 = { ".navbar": { "@layer daisyui.component": { display: "flex", width: "100%", "align-items": "center", padding: "0.5rem", "min-height": "4rem" } }, ":where(.navbar)": { "@layer daisyui.modifier": { position: "relative" } }, ".navbar-start": { "@layer daisyui.component": { display: "inline-flex", "align-items": "center", width: "50%", "justify-content": "flex-start" } }, ".navbar-center": { "@layer daisyui.component": { display: "inline-flex", "align-items": "center", "flex-shrink": 0 } }, ".navbar-end": { "@layer daisyui.component": { display: "inline-flex", "align-items": "center", width: "50%", "justify-content": "flex-end" } } };

// packages/daisyui/components/navbar/index.js
var navbar_default = ({ addComponents, prefix = "" }) => {
  const prefixednavbar = addPrefix(object_default27, prefix);
  addComponents({ ...prefixednavbar });
};

// packages/daisyui/components/stat/object.js
var object_default28 = { ".stats": { "@layer daisyui.component": { position: "relative", display: "inline-grid", "grid-auto-flow": "column", "overflow-x": "auto", "border-radius": "var(--radius-box)" } }, ".stat": { "@layer daisyui.component": { display: "inline-grid", width: "100%", "column-gap": "calc(0.25rem * 4)", "padding-inline": "calc(0.25rem * 6)", "padding-block": "calc(0.25rem * 4)", "grid-template-columns": "repeat(1, 1fr)", "&:not(:last-child)": { "border-inline-end": "var(--border) dashed color-mix(in oklab, currentColor 10%, #0000)", "border-block-end": "none" } } }, ".stat-figure": { "@layer daisyui.component": { "grid-column-start": "2", "grid-row": "span 3 / span 3", "grid-row-start": "1", "place-self": "center", "justify-self": "flex-end" } }, ".stat-title": { "@layer daisyui.component": { "grid-column-start": "1", "white-space": "nowrap", color: "color-mix(in oklab, var(--color-base-content) 60%, transparent)", "font-size": "0.75rem" } }, ".stat-value": { "@layer daisyui.component": { "grid-column-start": "1", "white-space": "nowrap", "font-size": "2rem", "font-weight": 800 } }, ".stat-desc": { "@layer daisyui.component": { "grid-column-start": "1", "white-space": "nowrap", color: "color-mix(in oklab, var(--color-base-content) 60%, transparent)", "font-size": "0.75rem" } }, ".stat-actions": { "@layer daisyui.component": { "grid-column-start": "1", "white-space": "nowrap" } }, ".stats-horizontal": { "@layer daisyui.modifier": { "grid-auto-flow": "column", "overflow-x": "auto", ".stat:not(:last-child)": { "border-inline-end": "var(--border) dashed color-mix(in oklab, currentColor 10%, #0000)", "border-block-end": "none" } } }, ".stats-vertical": { "@layer daisyui.modifier": { "grid-auto-flow": "row", "overflow-y": "auto", ".stat:not(:last-child)": { "border-inline-end": "none", "border-block-end": "var(--border) dashed color-mix(in oklab, currentColor 10%, #0000)" } } } };

// packages/daisyui/components/stat/index.js
var stat_default = ({ addComponents, prefix = "" }) => {
  const prefixedstat = addPrefix(object_default28, prefix);
  addComponents({ ...prefixedstat });
};

// packages/daisyui/components/countdown/object.js
var object_default29 = { ".countdown": { "&.countdown": { "line-height": "1em" }, "@layer daisyui.component": { display: "inline-flex", "& > *": { visibility: "hidden", position: "relative", display: "inline-block", "overflow-y": "clip", transition: "width 0.4s ease-out 0.2s", height: "1em", "--value-v": "calc(mod(max(0, var(--value)), 1000))", "--value-hundreds": "calc(round(to-zero, var(--value-v) / 100, 1))", "--value-tens": "calc(round(to-zero, mod(var(--value-v), 100) / 10, 1))", "--value-ones": "calc(mod(var(--value-v), 100))", "--show-hundreds": "clamp(clamp(0, var(--digits, 1) - 2, 1), var(--value-hundreds), 1)", "--show-tens": `clamp(
        clamp(0, var(--digits, 1) - 1, 1),
        var(--value-tens) + var(--show-hundreds),
        1
      )`, "--first-digits": "calc(round(to-zero, var(--value-v) / 10, 1))", width: "calc(1ch + var(--show-tens) * 1ch + var(--show-hundreds) * 1ch)", direction: "ltr", "&:before, &:after": { visibility: "visible", position: "absolute", "overflow-x": "clip", contentfont-variant-numeric": "tabular-nums", "white-space": "pre", "text-align": "end", direction: "rtl", transition: "all 1s cubic-bezier(1, 0, 0, 1), width 0.2s ease-out 0.2s, opacity 0.2s ease-out 0.2s" }, "&:before": { width: "calc(1ch + var(--show-hundreds) * 1ch)", top: "calc(var(--first-digits) * -1em)", "inset-inline-end": "0", opacity: "var(--show-tens)" }, "&:after": { width: "1ch", top: "calc(var(--value-ones) * -1em)", "inset-inline-start": "0" } } } } };

// packages/daisyui/components/countdown/index.js
var countdown_default = ({ addComponents, prefix = "" }) => {
  const prefixedcountdown = addPrefix(object_default29, prefix);
  addComponents({ ...prefixedcountdown });
};

// packages/daisyui/components/skeleton/object.js
var object_default30 = { ".skeleton": { "@layer daisyui.component": { "border-radius": "var(--radius-box)", "background-color": "var(--color-base-300)", "@media (prefers-reduced-motion: reduce)": { "transition-duration": "15s" }, "will-change": "background-position", "background-image": "linear-gradient( 105deg, #0000 0% 40%, var(--color-base-100) 50%, #0000 60% 100% )", "background-size": "200% auto", "background-repeat": "no-repeat", "background-position-x": "-50%", "@media (prefers-reduced-motion: no-preference)": { animation: "skeleton 1.8s ease-in-out infinite" } } }, "@keyframes skeleton": { "0%": { "background-position": "150%" }, "100%": { "background-position": "-50%" } } };

// packages/daisyui/components/skeleton/index.js
var skeleton_default = ({ addComponents, prefix = "" }) => {
  const prefixedskeleton = addPrefix(object_default30, prefix);
  addComponents({ ...prefixedskeleton });
};

// packages/daisyui/components/card/object.js
var object_default31 = { ".card": { "@layer daisyui.component": { position: "relative", display: "flex", "flex-direction": "column", "border-radius": "var(--radius-box)", "outline-width": "2px", transition: "outline 0.2s ease-in-out", outline: "0 solid #0000", "outline-offset": "2px", "&:focus": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" } }, "&:focus-visible": { "outline-color": "currentColor" }, ":where(figure:first-child)": { overflow: "hidden", "border-start-start-radius": "inherit", "border-start-end-radius": "inherit", "border-end-start-radius": "unset", "border-end-end-radius": "unset" }, ":where(figure:last-child)": { overflow: "hidden", "border-start-start-radius": "unset", "border-start-end-radius": "unset", "border-end-start-radius": "inherit", "border-end-end-radius": "inherit" }, figure: { display: "flex", "align-items": "center", "justify-content": "center" }, '&:has(> input:is(input[type="checkbox"], input[type="radio"]))': { cursor: "pointer", "user-select": "none" }, "&:has(> :checked)": { outline: "2px solid currentColor" } } }, ".card-border": { "@layer daisyui.modifier": { border: "var(--border) solid var(--color-base-200)" } }, ".card-dash": { "@layer daisyui.modifier": { border: "var(--border) dashed var(--color-base-200)" } }, ".image-full": { "@layer daisyui.modifier": { display: "grid", "> *": { "grid-column-start": "1", "grid-row-start": "1" }, "> .card-body": { position: "relative", color: "var(--color-neutral-content)" }, ":where(figure)": { overflow: "hidden", "border-radius": "inherit" }, "> figure img": { height: "100%", "object-fit": "cover", filter: "brightness(28%)" } } }, ".card-title": { "@layer daisyui.component": { display: "flex", "align-items": "center", gap: "calc(0.25rem * 2)", "font-size": "var(--cardtitle-fs, 1.125rem)", "font-weight": 600 } }, ".card-body": { "@layer daisyui.component": { display: "flex", flex: "auto", "flex-direction": "column", gap: "calc(0.25rem * 2)", padding: "var(--card-p, 1.5rem)", "font-size": "var(--card-fs, 0.875rem)", ":where(p)": { "flex-grow": 1 } } }, ".card-actions": { "@layer daisyui.component": { display: "flex", "flex-wrap": "wrap", "align-items": "flex-start", gap: "calc(0.25rem * 2)" } }, ".card-xs": { "@layer daisyui.modifier": { ".card-body": { "--card-p": "0.5rem", "--card-fs": "0.6875rem" }, ".card-title": { "--cardtitle-fs": "0.875rem" } } }, ".card-sm": { "@layer daisyui.modifier": { ".card-body": { "--card-p": "1rem", "--card-fs": "0.75rem" }, ".card-title": { "--cardtitle-fs": "1rem" } } }, ".card-md": { "@layer daisyui.modifier": { ".card-body": { "--card-p": "1.5rem", "--card-fs": "0.875rem" }, ".card-title": { "--cardtitle-fs": "1.125rem" } } }, ".card-lg": { "@layer daisyui.modifier": { ".card-body": { "--card-p": "2rem", "--card-fs": "1rem" }, ".card-title": { "--cardtitle-fs": "1.25rem" } } }, ".card-xl": { "@layer daisyui.modifier": { ".card-body": { "--card-p": "2.5rem", "--card-fs": "1.125rem" }, ".card-title": { "--cardtitle-fs": "1.375rem" } } }, ".card-side": { "@layer daisyui.modifier": { "align-items": "stretch", "flex-direction": "row", ":where(figure:first-child)": { overflow: "hidden", "border-start-start-radius": "inherit", "border-start-end-radius": "unset", "border-end-start-radius": "inherit", "border-end-end-radius": "unset" }, ":where(figure:last-child)": { overflow: "hidden", "border-start-start-radius": "unset", "border-start-end-radius": "inherit", "border-end-start-radius": "unset", "border-end-end-radius": "inherit" }, "figure > *": { "max-width": "unset" }, ":where(figure > *)": { width: "100%", height: "100%", "object-fit": "cover" } } } };

// packages/daisyui/components/card/index.js
var card_default = ({ addComponents, prefix = "" }) => {
  const prefixedcard = addPrefix(object_default31, prefix);
  addComponents({ ...prefixedcard });
};

// packages/daisyui/components/drawer/object.js
var object_default32 = { ".drawer": { "@layer daisyui.component": { position: "relative", display: "grid", width: "100%", "grid-auto-columns": "max-content auto" } }, ".drawer-content": { "@layer daisyui.component": { "grid-column-start": "2", "grid-row-start": "1", "min-width": "calc(0.25rem * 0)" } }, ":where(.drawer-side)": { "@layer daisyui.component": { "overflow-x": "hidden", "overflow-y": "hidden" } }, ".drawer-side": { "@layer daisyui.component": { "pointer-events": "none", visibility: "hidden", position: "fixed", "inset-inline-start": "calc(0.25rem * 0)", top: "calc(0.25rem * 0)", "z-index": 10, "grid-column-start": "1", "grid-row-start": "1", display: "grid", width: "100%", "grid-template-columns": "repeat(1, minmax(0, 1fr))", "grid-template-rows": "repeat(1, minmax(0, 1fr))", "align-items": "flex-start", "justify-items": "start", "overscroll-behavior": "contain", "background-color": "transparent", opacity: "0%", transition: "opacity 0.2s ease-out 0.1s allow-discrete, visibility 0.3s ease-out 0.1s allow-discrete", height: ["100vh", "100dvh"], "> .drawer-overlay": { position: "sticky", top: "calc(0.25rem * 0)", cursor: "pointer", "place-self": "stretch", "background-color": "oklch(0% 0 0 / 40%)" }, "> *": { "grid-column-start": "1", "grid-row-start": "1" }, "> *:not(.drawer-overlay)": { "will-change": "transform", transition: "translate 0.3s ease-out, width 0.2s ease-out", translate: "-100%", '[dir="rtl"] &': { translate: "100%" } } } }, ".drawer-toggle": { "@layer daisyui.component": { position: "fixed", height: "calc(0.25rem * 0)", width: "calc(0.25rem * 0)", appearance: "none", opacity: "0%", "&:checked": { "& ~ .drawer-side": { "pointer-events": "auto", visibility: "visible", "overflow-y": "auto", opacity: "100%", "scrollbar-color": "color-mix(in oklch, currentColor 35%, #0000) oklch(0 0 0 / calc(var(--page-has-backdrop, 0) * 0.4))", "& > *:not(.drawer-overlay)": { translate: "0%" } } }, "&:focus-visible ~ .drawer-content label.drawer-button": { outline: "2px solid", "outline-offset": "2px" } } }, ".drawer-end": { "@layer daisyui.modifier.placement": { "grid-auto-columns": "auto max-content", "> .drawer-toggle": { "& ~ .drawer-content": { "grid-column-start": "1" }, "& ~ .drawer-side": { "grid-column-start": "2", "justify-items": "end" }, "& ~ .drawer-side > *:not(.drawer-overlay)": { translate: "100%", '[dir="rtl"] &': { translate: "-100%" } }, "&:checked ~ .drawer-side > *:not(.drawer-overlay)": { translate: "0%" } } } }, ".drawer-open": { "@layer daisyui.modifier": { ":where(& > .drawer-side)": { "overflow-y": "auto" }, "> .drawer-toggle": { display: "none", "& ~ .drawer-side": { "pointer-events": "auto", visibility: "visible", position: "sticky", display: "block", width: "auto", "overscroll-behavior": "auto", opacity: "100%", "& > .drawer-overlay": { cursor: "default", "background-color": "transparent" }, "& > *:not(.drawer-overlay)": { translate: "0%", '[dir="rtl"] &': { translate: "0%" } } }, "&:checked ~ .drawer-side": { "pointer-events": "auto", visibility: "visible" } } } } };

// packages/daisyui/components/drawer/index.js
var drawer_default = ({ addComponents, prefix = "" }) => {
  const prefixeddrawer = addPrefix(object_default32, prefix);
  addComponents({ ...prefixeddrawer });
};

// packages/daisyui/components/indicator/object.js
var object_default33 = { ".indicator": { "@layer daisyui.component": { position: "relative", display: "inline-flex", width: "max-content", ":where(.indicator-item)": { "z-index": 1, position: "absolute", "white-space": "nowrap", top: "var(--indicator-t, 0)", bottom: "var(--indicator-b, auto)", left: "var(--indicator-s, auto)", right: "var(--indicator-e, 0)", translate: "var(--indicator-x, 50%) var(--indicator-y, -50%)" } } }, ".indicator-start": { "@layer daisyui.modifier": { "--indicator-s": "0", "--indicator-e": "auto", "--indicator-x": "-50%", '[dir="rtl"] &': { "--indicator-s": "auto", "--indicator-e": "0", "--indicator-x": "50%" } } }, ".indicator-center": { "@layer daisyui.modifier": { "--indicator-s": "50%", "--indicator-e": "50%", "--indicator-x": "-50%", '[dir="rtl"] &': { "--indicator-x": "50%" } } }, ".indicator-end": { "@layer daisyui.modifier": { "--indicator-s": "auto", "--indicator-e": "0", "--indicator-x": "50%", '[dir="rtl"] &': { "--indicator-s": "0", "--indicator-e": "auto", "--indicator-x": "-50%" } } }, ".indicator-bottom": { "@layer daisyui.modifier": { "--indicator-t": "auto", "--indicator-b": "0", "--indicator-y": "50%" } }, ".indicator-middle": { "@layer daisyui.modifier": { "--indicator-t": "50%", "--indicator-b": "50%", "--indicator-y": "-50%" } }, ".indicator-top": { "@layer daisyui.modifier": { "--indicator-t": "0", "--indicator-b": "auto", "--indicator-y": "-50%" } } };

// packages/daisyui/components/indicator/index.js
var indicator_default = ({ addComponents, prefix = "" }) => {
  const prefixedindicator = addPrefix(object_default33, prefix);
  addComponents({ ...prefixedindicator });
};

// packages/daisyui/components/footer/object.js
var object_default34 = { ".footer": { "@layer daisyui.component": { display: "grid", width: "100%", "grid-auto-flow": "row", "place-items": "start", "column-gap": "calc(0.25rem * 4)", "row-gap": "calc(0.25rem * 10)", "font-size": "0.875rem", "line-height": "1.25rem", "& > *": { display: "grid", "place-items": "start", gap: "calc(0.25rem * 2)" }, "&.footer-center": { "grid-auto-flow": "column dense", "place-items": "center", "text-align": "center", "& > *": { "place-items": "center" } } } }, ".footer-title": { "@layer daisyui.component": { "margin-bottom": "calc(0.25rem * 2)", "text-transform": "uppercase", opacity: "60%", "font-weight": 600 } }, ".footer-horizontal": { "@layer daisyui.modifier": { "grid-auto-flow": "column", "&.footer-center": { "grid-auto-flow": "row dense" } } }, ".footer-vertical": { "@layer daisyui.modifier": { "grid-auto-flow": "row", "&.footer-center": { "grid-auto-flow": "column dense" } } } };

// packages/daisyui/components/footer/index.js
var footer_default = ({ addComponents, prefix = "" }) => {
  const prefixedfooter = addPrefix(object_default34, prefix);
  addComponents({ ...prefixedfooter });
};

// packages/daisyui/components/loading/object.js
var object_default35 = { ".loading": { "@layer daisyui.component": { "pointer-events": "none", display: "inline-block", "aspect-ratio": "1 / 1", "background-color": "currentcolor", "vertical-align": "middle", width: "calc(var(--size-selector, 0.25rem) * 6)", "mask-size": "100%", "mask-repeat": "no-repeat", "mask-position": "center", "mask-image": `url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E")` } }, ".loading-spinner": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E")` } }, ".loading-dots": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='4' cy='12' r='3'%3E%3Canimate attributeName='cy' values='12;6;12;12' keyTimes='0;0.286;0.571;1' dur='1.05s' repeatCount='indefinite' keySplines='.33,0,.66,.33;.33,.66,.66,1'/%3E%3C/circle%3E%3Ccircle cx='12' cy='12' r='3'%3E%3Canimate attributeName='cy' values='12;6;12;12' keyTimes='0;0.286;0.571;1' dur='1.05s' repeatCount='indefinite' keySplines='.33,0,.66,.33;.33,.66,.66,1' begin='0.1s'/%3E%3C/circle%3E%3Ccircle cx='20' cy='12' r='3'%3E%3Canimate attributeName='cy' values='12;6;12;12' keyTimes='0;0.286;0.571;1' dur='1.05s' repeatCount='indefinite' keySplines='.33,0,.66,.33;.33,.66,.66,1' begin='0.2s'/%3E%3C/circle%3E%3C/svg%3E")` } }, ".loading-ring": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3Csvg width='44' height='44' viewBox='0 0 44 44' xmlns='http://www.w3.org/2000/svg' stroke='white'%3E%3Cg fill='none' fill-rule='evenodd' stroke-width='2'%3E%3Ccircle cx='22' cy='22' r='1'%3E%3Canimate attributeName='r' begin='0s' dur='1.8s' values='1;20' calcMode='spline' keyTimes='0;1' keySplines='0.165,0.84,0.44,1' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-opacity' begin='0s' dur='1.8s' values='1;0' calcMode='spline' keyTimes='0;1' keySplines='0.3,0.61,0.355,1' repeatCount='indefinite'/%3E%3C/circle%3E%3Ccircle cx='22' cy='22' r='1'%3E%3Canimate attributeName='r' begin='-0.9s' dur='1.8s' values='1;20' calcMode='spline' keyTimes='0;1' keySplines='0.165,0.84,0.44,1' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-opacity' begin='-0.9s' dur='1.8s' values='1;0' calcMode='spline' keyTimes='0;1' keySplines='0.3,0.61,0.355,1' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E")` } }, ".loading-ball": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cellipse cx='12' cy='5' rx='4' ry='4'%3E%3Canimate attributeName='cy' values='5;20;20.5;20;5' keyTimes='0;0.469;0.5;0.531;1' dur='.8s' repeatCount='indefinite' keySplines='.33,0,.66,.33;.33,.66,.66,1'/%3E%3Canimate attributeName='rx' values='4;4;4.8;4;4' keyTimes='0;0.469;0.5;0.531;1' dur='.8s' repeatCount='indefinite'/%3E%3Canimate attributeName='ry' values='4;4;3;4;4' keyTimes='0;0.469;0.5;0.531;1' dur='.8s' repeatCount='indefinite'/%3E%3C/ellipse%3E%3C/svg%3E")` } }, ".loading-bars": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Crect x='1' y='1' width='6' height='22'%3E%3Canimate attributeName='y' values='1;5;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite'/%3E%3Canimate attributeName='height' values='22;14;22' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite'/%3E%3Canimate attributeName='opacity' values='1;0.2;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite'/%3E%3C/rect%3E%3Crect x='9' y='1' width='6' height='22'%3E%3Canimate attributeName='y' values='1;5;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.65s'/%3E%3Canimate attributeName='height' values='22;14;22' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.65s'/%3E%3Canimate attributeName='opacity' values='1;0.2;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.65s'/%3E%3C/rect%3E%3Crect x='17' y='1' width='6' height='22'%3E%3Canimate attributeName='y' values='1;5;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.5s'/%3E%3Canimate attributeName='height' values='22;14;22' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.5s'/%3E%3Canimate attributeName='opacity' values='1;0.2;1' keyTimes='0;0.938;1' dur='.8s' repeatCount='indefinite' begin='-0.5s'/%3E%3C/rect%3E%3C/svg%3E")` } }, ".loading-infinity": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' style='shape-rendering:auto;' width='200px' height='200px' viewBox='0 0 100 100' preserveAspectRatio='xMidYMid'%3E%3Cpath fill='none' stroke='black' stroke-width='10' stroke-dasharray='205.271 51.318' d='M24.3 30C11.4 30 5 43.3 5 50s6.4 20 19.3 20c19.3 0 32.1-40 51.4-40C88.6 30 95 43.3 95 50s-6.4 20-19.3 20C56.4 70 43.6 30 24.3 30z' stroke-linecap='round' style='transform:scale(0.8);transform-origin:50px 50px'%3E%3Canimate attributeName='stroke-dashoffset' repeatCount='indefinite' dur='2s' keyTimes='0;1' values='0;256.589'/%3E%3C/path%3E%3C/svg%3E")` } }, ".loading-xs": { "@layer daisyui.modifier": { width: "calc(var(--size-selector, 0.25rem) * 4)" } }, ".loading-sm": { "@layer daisyui.modifier": { width: "calc(var(--size-selector, 0.25rem) * 5)" } }, ".loading-md": { "@layer daisyui.modifier": { width: "calc(var(--size-selector, 0.25rem) * 6)" } }, ".loading-lg": { "@layer daisyui.modifier": { width: "calc(var(--size-selector, 0.25rem) * 7)" } }, ".loading-xl": { "@layer daisyui.modifier": { width: "calc(var(--size-selector, 0.25rem) * 8)" } } };

// packages/daisyui/components/loading/index.js
var loading_default = ({ addComponents, prefix = "" }) => {
  const prefixedloading = addPrefix(object_default35, prefix);
  addComponents({ ...prefixedloading });
};

// packages/daisyui/components/menu/object.js
var object_default36 = { ".menu": { "@layer daisyui.component": { display: "flex", width: "fit-content", "flex-direction": "column", "flex-wrap": "wrap", padding: "calc(0.25rem * 2)", "--menu-active-fg": "var(--color-neutral-content)", "--menu-active-bg": "var(--color-neutral)", "font-size": "0.875rem", ":where(li ul)": { position: "relative", "margin-inline-start": "calc(0.25rem * 4)", "padding-inline-start": "calc(0.25rem * 2)", "white-space": "nowrap", "&:before": { position: "absolute", "inset-inline-start": "calc(0.25rem * 0)", top: "calc(0.25rem * 3)", bottom: "calc(0.25rem * 3)", "background-color": "var(--color-base-content)", opacity: "10%", width: "var(--border)", content: '""' } }, ":where(li > .menu-dropdown:not(.menu-dropdown-show))": { display: "none" }, ":where(li:not(.menu-title) > *:not(ul, details, .menu-title, .btn)), :where(li:not(.menu-title) > details > summary:not(.menu-title))": { display: "grid", "grid-auto-flow": "column", "align-content": "flex-start", "align-items": "center", gap: "calc(0.25rem * 2)", "border-radius": "var(--radius-field)", "padding-inline": "calc(0.25rem * 3)", "padding-block": "calc(0.25rem * 1.5)", "text-align": "start", "transition-property": "color, background-color, box-shadow", "transition-duration": "0.2s", "transition-timing-function": "cubic-bezier(0, 0, 0.2, 1)", "grid-auto-columns": "minmax(auto, max-content) auto max-content", "text-wrap": "balance", "user-select": "none" }, ":where(li > details > summary)": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" }, "&::-webkit-details-marker": { display: "none" } }, ":where(li > details > summary), :where(li > .menu-dropdown-toggle)": { "&:after": { "justify-self": "flex-end", display: "block", height: "0.375rem", width: "0.375rem", rotate: "-135deg", translate: "0 -1px", "transition-property": "rotate, translate", "transition-duration": "0.2s", content: '""', "transform-origin": "50% 50%", "box-shadow": "2px 2px inset", "pointer-events": "none" } }, ":where(li > details[open] > summary):after, :where(li > .menu-dropdown-toggle.menu-dropdown-show):after": { rotate: "45deg", translate: "0 1px" }, ":where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn)": { "&.menu-focus, &:focus-visible": { cursor: "pointer", "background-color": "color-mix(in oklab, var(--color-base-content) 10%, transparent)", color: "var(--color-base-content)", "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" } } }, ":where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover )": { cursor: "pointer", "background-color": "color-mix(in oklab, var(--color-base-content) 10%, transparent)", "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" }, "box-shadow": "0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset" }, ":where(li:empty)": { "background-color": "var(--color-base-content)", opacity: "10%", margin: "0.5rem 1rem", height: "1px" }, ":where(li)": { position: "relative", display: "flex", "flex-shrink": 0, "flex-direction": "column", "flex-wrap": "wrap", "align-items": "stretch", ".badge": { "justify-self": "flex-end" }, "& > *:not(ul, .menu-title, details, .btn):active, & > *:not(ul, .menu-title, details, .btn).menu-active, & > details > summary:active": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" }, color: "var(--menu-active-fg)", "background-color": "var(--menu-active-bg)", "background-size": "auto, calc(var(--noise) * 100%)", "background-image": "none, var(--fx-noise)", "&:not(&:active)": { "box-shadow": "0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg)" } }, "&.menu-disabled": { "pointer-events": "none", color: "color-mix(in oklab, var(--color-base-content) 20%, transparent)" } }, ".dropdown:focus-within": { ".menu-dropdown-toggle:after": { rotate: "45deg", translate: "0 1px" } }, ".dropdown-content": { "margin-top": "calc(0.25rem * 2)", padding: "calc(0.25rem * 2)", "&:before": { display: "none" } } } }, ".menu-title": { "@layer daisyui.component": { "padding-inline": "calc(0.25rem * 3)", "padding-block": "calc(0.25rem * 2)", color: "color-mix(in oklab, var(--color-base-content) 40%, transparent)", "font-size": "0.875rem", "font-weight": 600 } }, ".menu-horizontal": { "@layer daisyui.modifier": { display: "inline-flex", "flex-direction": "row", "& > li:not(.menu-title) > details > ul": { position: "absolute", "margin-inline-start": "calc(0.25rem * 0)", "margin-top": "calc(0.25rem * 4)", "padding-block": "calc(0.25rem * 2)", "padding-inline-end": "calc(0.25rem * 2)" }, "& > li > details > ul": { "&:before": { content: "none" } }, ":where(& > li:not(.menu-title) > details > ul)": { "border-radius": "var(--radius-box)", "background-color": "var(--color-base-100)", "box-shadow": "0 1px 3px 0 oklch(0% 0 0/0.1), 0 1px 2px -1px oklch(0% 0 0/0.1)" } } }, ".menu-vertical": { "@layer daisyui.modifier": { display: "inline-flex", "flex-direction": "column", "& > li:not(.menu-title) > details > ul": { position: "relative", "margin-inline-start": "calc(0.25rem * 4)", "margin-top": "calc(0.25rem * 0)", "padding-block": "calc(0.25rem * 0)", "padding-inline-end": "calc(0.25rem * 0)" } } }, ".menu-xs": { "@layer daisyui.modifier": { ":where(li:not(.menu-title) > *:not(ul, details, .menu-title)), :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "border-radius": "var(--radius-field)", "padding-inline": "calc(0.25rem * 2)", "padding-block": "calc(0.25rem * 1)", "font-size": "0.6875rem" }, ".menu-title": { "padding-inline": "calc(0.25rem * 2)", "padding-block": "calc(0.25rem * 1)" } } }, ".menu-sm": { "@layer daisyui.modifier": { ":where(li:not(.menu-title) > *:not(ul, details, .menu-title)), :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "border-radius": "var(--radius-field)", "padding-inline": "calc(0.25rem * 2.5)", "padding-block": "calc(0.25rem * 1)", "font-size": "0.75rem" }, ".menu-title": { "padding-inline": "calc(0.25rem * 3)", "padding-block": "calc(0.25rem * 2)" } } }, ".menu-md": { "@layer daisyui.modifier": { ":where(li:not(.menu-title) > *:not(ul, details, .menu-title)), :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "border-radius": "var(--radius-field)", "padding-inline": "calc(0.25rem * 3)", "padding-block": "calc(0.25rem * 1.5)", "font-size": "0.875rem" }, ".menu-title": { "padding-inline": "calc(0.25rem * 3)", "padding-block": "calc(0.25rem * 2)" } } }, ".menu-lg": { "@layer daisyui.modifier": { ":where(li:not(.menu-title) > *:not(ul, details, .menu-title)), :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "border-radius": "var(--radius-field)", "padding-inline": "calc(0.25rem * 4)", "padding-block": "calc(0.25rem * 1.5)", "font-size": "1.125rem" }, ".menu-title": { "padding-inline": "calc(0.25rem * 6)", "padding-block": "calc(0.25rem * 3)" } } }, ".menu-xl": { "@layer daisyui.modifier": { ":where(li:not(.menu-title) > *:not(ul, details, .menu-title)), :where(li:not(.menu-title) > details > summary:not(.menu-title))": { "border-radius": "var(--radius-field)", "padding-inline": "calc(0.25rem * 5)", "padding-block": "calc(0.25rem * 1.5)", "font-size": "1.375rem" }, ".menu-title": { "padding-inline": "calc(0.25rem * 6)", "padding-block": "calc(0.25rem * 3)" } } }, ":where(:not(ul, details, .menu-title, .btn)).menu-active": { "@layer daisyui.modifier": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" }, color: "var(--menu-active-fg)", "background-color": "var(--menu-active-bg)", "background-size": "auto, calc(var(--noise) * 100%)", "background-image": "none, var(--fx-noise)" } } };

// packages/daisyui/components/menu/index.js
var menu_default = ({ addComponents, prefix = "" }) => {
  const prefixedmenu = addPrefix(object_default36, prefix);
  addComponents({ ...prefixedmenu });
};

// packages/daisyui/components/toggle/object.js
var object_default37 = { ".toggle": { "@layer daisyui.component": { border: "var(--border) solid currentColor", color: "var(--input-color)", position: "relative", display: "inline-grid", "flex-shrink": 0, cursor: "pointer", appearance: "none", "place-content": "center", "vertical-align": "middle", "webkit-user-select": "none", "user-select": "none", "grid-template-columns": "0fr 1fr 1fr", "--radius-selector-max": `calc(
      var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
    )`, "border-radius": "calc( var(--radius-selector) + min(var(--toggle-p), var(--radius-selector-max)) + min(var(--border), var(--radius-selector-max)) )", padding: "var(--toggle-p)", "box-shadow": "0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset", transition: "color 0.3s, grid-template-columns 0.2s", "--input-color": "color-mix(in oklab, var(--color-base-content) 50%, #0000)", "--toggle-p": "calc(var(--size) * 0.125)", "--size": "calc(var(--size-selector, 0.25rem) * 6)", width: "calc((var(--size) * 2) - (var(--border) + var(--toggle-p)) * 2)", height: "var(--size)", "> *": { "z-index": 1, "grid-column": "span 1 / span 1", "grid-column-start": "2", "grid-row-start": "1", height: "100%", cursor: "pointer", appearance: "none", "background-color": "transparent", padding: "calc(0.25rem * 0.5)", transition: "opacity 0.2s, rotate 0.4s", border: "none", "&:focus": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" } }, "&:nth-child(2)": { color: "var(--color-base-100)", rotate: "0deg" }, "&:nth-child(3)": { color: "var(--color-base-100)", opacity: "0%", rotate: "-15deg" } }, "&:has(:checked)": { "> :nth-child(2)": { opacity: "0%", rotate: "15deg" }, "> :nth-child(3)": { opacity: "100%", rotate: "0deg" } }, "&:before": { position: "relative", "inset-inline-start": "calc(0.25rem * 0)", "grid-column-start": "2", "grid-row-start": "1", "aspect-ratio": "1 / 1", height: "100%", "border-radius": "var(--radius-selector)", "background-color": "currentcolor", translate: "0", "--tw-content": '""', content: "var(--tw-content)", transition: "background-color 0.1s, translate 0.2s, inset-inline-start 0.2s", "box-shadow": "0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000)", "background-size": "auto, calc(var(--noise) * 100%)", "background-image": "none, var(--fx-noise)" }, "@media (forced-colors: active)": { "&:before": { "outline-style": "var(--tw-outline-style)", "outline-width": "1px", "outline-offset": "calc(1px * -1)" } }, "@media print": { "&:before": { outline: "0.25rem solid", "outline-offset": "-1rem" } }, "&:focus-visible, &:has(:focus-visible)": { outline: "2px solid currentColor", "outline-offset": "2px" }, '&:checked, &[aria-checked="true"], &:has(> input:checked)': { "grid-template-columns": "1fr 1fr 0fr", "background-color": "var(--color-base-100)", "--input-color": "var(--color-base-content)", "&:before": { "background-color": "currentcolor" }, "@starting-style": { "&:before": { opacity: 0 } } }, "&:indeterminate": { "grid-template-columns": "0.5fr 1fr 0.5fr" }, "&:disabled": { cursor: "not-allowed", opacity: "30%", "&:before": { "background-color": "transparent", border: "var(--border) solid currentColor" } } } }, ".toggle-primary": { "@layer daisyui.modifier": { '&:checked, &[aria-checked="true"]': { "--input-color": "var(--color-primary)" } } }, ".toggle-secondary": { "@layer daisyui.modifier": { '&:checked, &[aria-checked="true"]': { "--input-color": "var(--color-secondary)" } } }, ".toggle-accent": { "@layer daisyui.modifier": { '&:checked, &[aria-checked="true"]': { "--input-color": "var(--color-accent)" } } }, ".toggle-neutral": { "@layer daisyui.modifier": { '&:checked, &[aria-checked="true"]': { "--input-color": "var(--color-neutral)" } } }, ".toggle-success": { "@layer daisyui.modifier": { '&:checked, &[aria-checked="true"]': { "--input-color": "var(--color-success)" } } }, ".toggle-warning": { "@layer daisyui.modifier": { '&:checked, &[aria-checked="true"]': { "--input-color": "var(--color-warning)" } } }, ".toggle-info": { "@layer daisyui.modifier": { '&:checked, &[aria-checked="true"]': { "--input-color": "var(--color-info)" } } }, ".toggle-error": { "@layer daisyui.modifier": { '&:checked, &[aria-checked="true"]': { "--input-color": "var(--color-error)" } } }, ".toggle-xs": { "@layer daisyui.modifier": { '&:is([type="checkbox"]), &:has([type="checkbox"])': { "--size": "calc(var(--size-selector, 0.25rem) * 4)" } } }, ".toggle-sm": { "@layer daisyui.modifier": { '&:is([type="checkbox"]), &:has([type="checkbox"])': { "--size": "calc(var(--size-selector, 0.25rem) * 5)" } } }, ".toggle-md": { "@layer daisyui.modifier": { '&:is([type="checkbox"]), &:has([type="checkbox"])': { "--size": "calc(var(--size-selector, 0.25rem) * 6)" } } }, ".toggle-lg": { "@layer daisyui.modifier": { '&:is([type="checkbox"]), &:has([type="checkbox"])': { "--size": "calc(var(--size-selector, 0.25rem) * 7)" } } }, ".toggle-xl": { "@layer daisyui.modifier": { '&:is([type="checkbox"]), &:has([type="checkbox"])': { "--size": "calc(var(--size-selector, 0.25rem) * 8)" } } } };

// packages/daisyui/components/toggle/index.js
var toggle_default = ({ addComponents, prefix = "" }) => {
  const prefixedtoggle = addPrefix(object_default37, prefix);
  addComponents({ ...prefixedtoggle });
};

// packages/daisyui/components/badge/object.js
var object_default38 = { ".badge": { "@layer daisyui.component": { display: "inline-flex", "align-items": "center", "justify-content": "center", gap: "calc(0.25rem * 2)", "border-radius": "var(--radius-selector)", "vertical-align": "middle", color: "var(--badge-fg)", border: "var(--border) solid var(--badge-color, var(--color-base-200))", "font-size": "0.875rem", width: "fit-content", "padding-inline": "calc(0.25rem * 3 - var(--border))", "background-size": "auto, calc(var(--noise) * 100%)", "background-image": "none, var(--fx-noise)", "background-color": "var(--badge-bg)", "--badge-bg": "var(--badge-color, var(--color-base-100))", "--badge-fg": "var(--color-base-content)", "--size": "calc(var(--size-selector, 0.25rem) * 6)", height: "var(--size)" } }, ".badge-outline": { "@layer daisyui.modifier": { color: "var(--badge-color)", "--badge-bg": "#0000", "background-image": "none", "border-color": "currentColor" } }, ".badge-dash": { "@layer daisyui.modifier": { color: "var(--badge-color)", "--badge-bg": "#0000", "background-image": "none", "border-color": "currentColor", "border-style": "dashed" } }, ".badge-soft": { "@layer daisyui.modifier": { color: "var(--badge-color, var(--color-base-content))", "background-color": "color-mix( in oklab, var(--badge-color, var(--color-base-content)) 8%, var(--color-base-100) )", "border-color": "color-mix( in oklab, var(--badge-color, var(--color-base-content)) 10%, var(--color-base-100) )", "background-image": "none" } }, ".badge-primary": { "@layer daisyui.modifier": { "--badge-color": "var(--color-primary)", "--badge-fg": "var(--color-primary-content)" } }, ".badge-secondary": { "@layer daisyui.modifier": { "--badge-color": "var(--color-secondary)", "--badge-fg": "var(--color-secondary-content)" } }, ".badge-accent": { "@layer daisyui.modifier": { "--badge-color": "var(--color-accent)", "--badge-fg": "var(--color-accent-content)" } }, ".badge-neutral": { "@layer daisyui.modifier": { "--badge-color": "var(--color-neutral)", "--badge-fg": "var(--color-neutral-content)" } }, ".badge-info": { "@layer daisyui.modifier": { "--badge-color": "var(--color-info)", "--badge-fg": "var(--color-info-content)" } }, ".badge-success": { "@layer daisyui.modifier": { "--badge-color": "var(--color-success)", "--badge-fg": "var(--color-success-content)" } }, ".badge-warning": { "@layer daisyui.modifier": { "--badge-color": "var(--color-warning)", "--badge-fg": "var(--color-warning-content)" } }, ".badge-error": { "@layer daisyui.modifier": { "--badge-color": "var(--color-error)", "--badge-fg": "var(--color-error-content)" } }, ".badge-ghost": { "@layer daisyui.modifier": { "border-color": "var(--color-base-200)", "background-color": "var(--color-base-200)", color: "var(--color-base-content)", "background-image": "none" } }, ".badge-xs": { "@layer daisyui.modifier": { "--size": "calc(var(--size-selector, 0.25rem) * 4)", "font-size": "0.625rem", "padding-inline": "calc(0.25rem * 2 - var(--border))" } }, ".badge-sm": { "@layer daisyui.modifier": { "--size": "calc(var(--size-selector, 0.25rem) * 5)", "font-size": "0.75rem", "padding-inline": "calc(0.25rem * 2.5 - var(--border))" } }, ".badge-md": { "@layer daisyui.modifier": { "--size": "calc(var(--size-selector, 0.25rem) * 6)", "font-size": "0.875rem", "padding-inline": "calc(0.25rem * 3 - var(--border))" } }, ".badge-lg": { "@layer daisyui.modifier": { "--size": "calc(var(--size-selector, 0.25rem) * 7)", "font-size": "1rem", "padding-inline": "calc(0.25rem * 3.5 - var(--border))" } }, ".badge-xl": { "@layer daisyui.modifier": { "--size": "calc(var(--size-selector, 0.25rem) * 8)", "font-size": "1.125rem", "padding-inline": "calc(0.25rem * 4 - var(--border))" } } };

// packages/daisyui/components/badge/index.js
var badge_default = ({ addComponents, prefix = "" }) => {
  const prefixedbadge = addPrefix(object_default38, prefix);
  addComponents({ ...prefixedbadge });
};

// packages/daisyui/components/link/object.js
var object_default39 = { ".link": { "@layer daisyui.component": { cursor: "pointer", "text-decoration-line": "underline", "&:focus": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" } }, "&:focus-visible": { outline: "2px solid currentColor", "outline-offset": "2px" } } }, ".link-hover": { "@layer daisyui.modifier": { "text-decoration-line": "none", "&:hover": { "@media (hover: hover)": { "text-decoration-line": "underline" } } } }, ".link-primary": { "@layer daisyui.modifier": { color: "var(--color-primary)", "@media (hover: hover)": { "&:hover": { color: "color-mix(in oklab, var(--color-primary) 80%, #000)" } } } }, ".link-secondary": { "@layer daisyui.modifier": { color: "var(--color-secondary)", "@media (hover: hover)": { "&:hover": { color: "color-mix(in oklab, var(--color-secondary) 80%, #000)" } } } }, ".link-accent": { "@layer daisyui.modifier": { color: "var(--color-accent)", "@media (hover: hover)": { "&:hover": { color: "color-mix(in oklab, var(--color-accent) 80%, #000)" } } } }, ".link-neutral": { "@layer daisyui.modifier": { color: "var(--color-neutral)", "@media (hover: hover)": { "&:hover": { color: "color-mix(in oklab, var(--color-neutral) 80%, #000)" } } } }, ".link-success": { "@layer daisyui.modifier": { color: "var(--color-success)", "@media (hover: hover)": { "&:hover": { color: "color-mix(in oklab, var(--color-success) 80%, #000)" } } } }, ".link-info": { "@layer daisyui.modifier": { color: "var(--color-info)", "@media (hover: hover)": { "&:hover": { color: "color-mix(in oklab, var(--color-info) 80%, #000)" } } } }, ".link-warning": { "@layer daisyui.modifier": { color: "var(--color-warning)", "@media (hover: hover)": { "&:hover": { color: "color-mix(in oklab, var(--color-warning) 80%, #000)" } } } }, ".link-error": { "@layer daisyui.modifier": { color: "var(--color-error)", "@media (hover: hover)": { "&:hover": { color: "color-mix(in oklab, var(--color-error) 80%, #000)" } } } } };

// packages/daisyui/components/link/index.js
var link_default = ({ addComponents, prefix = "" }) => {
  const prefixedlink = addPrefix(object_default39, prefix);
  addComponents({ ...prefixedlink });
};

// packages/daisyui/components/validator/object.js
var object_default40 = { ".validator": { "@layer daisyui.component": { "&:user-valid, &:has(:user-valid)": { '&, &:focus, &:checked, &[aria-checked="true"], &:focus-within': { "--input-color": "var(--color-success)" } }, '&:user-invalid, &:has(:user-invalid), &[aria-invalid]:not([aria-invalid="false"]), &:has([aria-invalid]:not([aria-invalid="false"]))': { '&, &:focus, &:checked, &[aria-checked="true"], &:focus-within': { "--input-color": "var(--color-error)" }, "& ~ .validator-hint": { visibility: "visible", color: "var(--color-error)" } } }, '&:user-invalid, &:has(:user-invalid), &[aria-invalid]:not([aria-invalid="false"]), &:has([aria-invalid]:not([aria-invalid="false"]))': { "& ~ .validator-hint": { display: "revert-layer" } } }, ".validator-hint": { "@layer daisyui.component": { visibility: "hidden", "margin-top": "calc(0.25rem * 2)", "font-size": "0.75rem" } } };

// packages/daisyui/components/validator/index.js
var validator_default = ({ addComponents, prefix = "" }) => {
  const prefixedvalidator = addPrefix(object_default40, prefix);
  addComponents({ ...prefixedvalidator });
};

// packages/daisyui/components/list/object.js
var object_default41 = { ".list": { "@layer daisyui.component": { display: "flex", "flex-direction": "column", "font-size": "0.875rem", ".list-row": { "--list-grid-cols": "minmax(0, auto) 1fr", position: "relative", display: "grid", "grid-auto-flow": "column", gap: "calc(0.25rem * 4)", "border-radius": "var(--radius-box)", padding: "calc(0.25rem * 4)", "word-break": "break-word", "grid-template-columns": "var(--list-grid-cols)" }, "& > :not(:last-child)": { "&.list-row, .list-row": { "&:after": { content: '""', "border-bottom": "var(--border) solid", "inset-inline": "var(--radius-box)", position: "absolute", bottom: "calc(0.25rem * 0)", "border-color": "color-mix(in oklab, var(--color-base-content) 5%, transparent)" } } } }, "@layer daisyui.modifier": { ".list-row": { "&:has(.list-col-grow:nth-child(1))": { "--list-grid-cols": "1fr" }, "&:has(.list-col-grow:nth-child(2))": { "--list-grid-cols": "minmax(0, auto) 1fr" }, "&:has(.list-col-grow:nth-child(3))": { "--list-grid-cols": "minmax(0, auto) minmax(0, auto) 1fr" }, "&:has(.list-col-grow:nth-child(4))": { "--list-grid-cols": "minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr" }, "&:has(.list-col-grow:nth-child(5))": { "--list-grid-cols": "minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr" }, "&:has(.list-col-grow:nth-child(6))": { "--list-grid-cols": `minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto)
          minmax(0, auto) 1fr` }, ":not(.list-col-wrap)": { "grid-row-start": "1" } } } }, ".list-col-wrap": { "@layer daisyui.modifier": { "grid-row-start": "2" } } };

// packages/daisyui/components/list/index.js
var list_default = ({ addComponents, prefix = "" }) => {
  const prefixedlist = addPrefix(object_default41, prefix);
  addComponents({ ...prefixedlist });
};

// packages/daisyui/components/tooltip/object.js
var object_default42 = { ".tooltip": { "@layer daisyui.component": { position: "relative", display: "inline-block", "--tt-bg": "var(--color-neutral)", "--tt-off": "calc(100% + 0.5rem)", "--tt-tail": "calc(100% + 1px + 0.25rem)", "& > .tooltip-content, &[data-tip]:before": { position: "absolute", "max-width": "20rem", "border-radius": "var(--radius-field)", "padding-inline": "calc(0.25rem * 2)", "padding-block": "calc(0.25rem * 1)", "text-align": "center", "white-space": "normal", color: "var(--color-neutral-content)", opacity: "0%", "font-size": "0.875rem", "line-height": 1.25, "background-color": "var(--tt-bg)", width: "max-content", "pointer-events": "none", "z-index": 2, "--tw-content": "attr(data-tip)", content: "var(--tw-content)" }, "@media (prefers-reduced-motion: no-preference)": { "& > .tooltip-content, &[data-tip]:before, &:after": { transition: "opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms" } }, "&:after": { opacity: "0%", "background-color": "var(--tt-bg)", content: '""', "pointer-events": "none", width: "0.625rem", height: "0.25rem", display: "block", position: "absolute", "mask-repeat": "no-repeat", "mask-position": "-1px 0", "--mask-tooltip": `url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A")`, "mask-image": "var(--mask-tooltip)" }, '&.tooltip-open, &[data-tip]:not([data-tip=""]):hover, &:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover, &:has(:focus-visible)': { "> .tooltip-content, &[data-tip]:before, &:after": { opacity: "100%", "--tt-pos": "0rem" }, "@media (prefers-reduced-motion: no-preference)": { "& > .tooltip-content, &[data-tip]:before, &:after": { transition: "opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0s, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0ms" } } } } }, ".tooltip, .tooltip-top": { "@layer daisyui.modifier": { "> .tooltip-content, &[data-tip]:before": { transform: "translateX(-50%) translateY(var(--tt-pos, 0.25rem))", inset: "auto auto var(--tt-off) 50%" }, "&:after": { transform: "translateX(-50%) translateY(var(--tt-pos, 0.25rem))", inset: "auto auto var(--tt-tail) 50%" } } }, ".tooltip-bottom": { "@layer daisyui.modifier": { "> .tooltip-content, &[data-tip]:before": { transform: "translateX(-50%) translateY(var(--tt-pos, -0.25rem))", inset: "var(--tt-off) auto auto 50%" }, "&:after": { transform: "translateX(-50%) translateY(var(--tt-pos, -0.25rem)) rotate(180deg)", inset: "var(--tt-tail) auto auto 50%" } } }, ".tooltip-left": { "@layer daisyui.modifier": { "> .tooltip-content, &[data-tip]:before": { transform: "translateX(calc(var(--tt-pos, 0.25rem) - 0.25rem)) translateY(-50%)", inset: "50% var(--tt-off) auto auto" }, "&:after": { transform: "translateX(var(--tt-pos, 0.25rem)) translateY(-50%) rotate(-90deg)", inset: "50% calc(var(--tt-tail) + 1px) auto auto" } } }, ".tooltip-right": { "@layer daisyui.modifier": { "> .tooltip-content, &[data-tip]:before": { transform: "translateX(calc(var(--tt-pos, -0.25rem) + 0.25rem)) translateY(-50%)", inset: "50% auto auto var(--tt-off)" }, "&:after": { transform: "translateX(var(--tt-pos, -0.25rem)) translateY(-50%) rotate(90deg)", inset: "50% auto auto calc(var(--tt-tail) + 1px)" } } }, ".tooltip-primary": { "@layer daisyui.modifier": { "--tt-bg": "var(--color-primary)", "> .tooltip-content, &[data-tip]:before": { color: "var(--color-primary-content)" } } }, ".tooltip-secondary": { "@layer daisyui.modifier": { "--tt-bg": "var(--color-secondary)", "> .tooltip-content, &[data-tip]:before": { color: "var(--color-secondary-content)" } } }, ".tooltip-accent": { "@layer daisyui.modifier": { "--tt-bg": "var(--color-accent)", "> .tooltip-content, &[data-tip]:before": { color: "var(--color-accent-content)" } } }, ".tooltip-info": { "@layer daisyui.modifier": { "--tt-bg": "var(--color-info)", "> .tooltip-content, &[data-tip]:before": { color: "var(--color-info-content)" } } }, ".tooltip-success": { "@layer daisyui.modifier": { "--tt-bg": "var(--color-success)", "> .tooltip-content, &[data-tip]:before": { color: "var(--color-success-content)" } } }, ".tooltip-warning": { "@layer daisyui.modifier": { "--tt-bg": "var(--color-warning)", "> .tooltip-content, &[data-tip]:before": { color: "var(--color-warning-content)" } } }, ".tooltip-error": { "@layer daisyui.modifier": { "--tt-bg": "var(--color-error)", "> .tooltip-content, &[data-tip]:before": { color: "var(--color-error-content)" } } } };

// packages/daisyui/components/tooltip/index.js
var tooltip_default = ({ addComponents, prefix = "" }) => {
  const prefixedtooltip = addPrefix(object_default42, prefix);
  addComponents({ ...prefixedtooltip });
};

// packages/daisyui/components/table/object.js
var object_default43 = { ".table": { "@layer daisyui.component": { "font-size": "0.875rem", position: "relative", width: "100%", "border-radius": "var(--radius-box)", "text-align": "left", '&:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *)': { "text-align": "right" }, "tr.row-hover": { "&, &:nth-child(even)": { "&:hover": { "@media (hover: hover)": { "background-color": "var(--color-base-200)" } } } }, ":where(th, td)": { "padding-inline": "calc(0.25rem * 4)", "padding-block": "calc(0.25rem * 3)", "vertical-align": "middle" }, ":where(thead, tfoot)": { "white-space": "nowrap", color: "color-mix(in oklab, var(--color-base-content) 60%, transparent)", "font-size": "0.875rem", "font-weight": 600 }, ":where(tfoot)": { "border-top": "var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000)" }, ":where(.table-pin-rows thead tr)": { position: "sticky", top: "calc(0.25rem * 0)", "z-index": 1, "background-color": "var(--color-base-100)" }, ":where(.table-pin-rows tfoot tr)": { position: "sticky", bottom: "calc(0.25rem * 0)", "z-index": 1, "background-color": "var(--color-base-100)" }, ":where(.table-pin-cols tr th)": { position: "sticky", right: "calc(0.25rem * 0)", left: "calc(0.25rem * 0)", "background-color": "var(--color-base-100)" }, ":where(thead tr, tbody tr:not(:last-child))": { "border-bottom": "var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000)" } } }, ".table-zebra": { "@layer daisyui.modifier": { tbody: { tr: { "&:where(:nth-child(even))": { "background-color": "var(--color-base-200)", ":where(.table-pin-cols tr th)": { "background-color": "var(--color-base-200)" } }, "&.row-hover": { "&, &:where(:nth-child(even))": { "&:hover": { "@media (hover: hover)": { "background-color": "var(--color-base-300)" } } } } } } } }, ".table-xs": { "@layer daisyui.modifier": { ":not(thead, tfoot) tr": { "font-size": "0.6875rem" }, ":where(th, td)": { "padding-inline": "calc(0.25rem * 2)", "padding-block": "calc(0.25rem * 1)" } } }, ".table-sm": { "@layer daisyui.modifier": { ":not(thead, tfoot) tr": { "font-size": "0.75rem" }, ":where(th, td)": { "padding-inline": "calc(0.25rem * 3)", "padding-block": "calc(0.25rem * 2)" } } }, ".table-md": { "@layer daisyui.modifier": { ":not(thead, tfoot) tr": { "font-size": "0.875rem" }, ":where(th, td)": { "padding-inline": "calc(0.25rem * 4)", "padding-block": "calc(0.25rem * 3)" } } }, ".table-lg": { "@layer daisyui.modifier": { ":not(thead, tfoot) tr": { "font-size": "1.125rem" }, ":where(th, td)": { "padding-inline": "calc(0.25rem * 5)", "padding-block": "calc(0.25rem * 4)" } } }, ".table-xl": { "@layer daisyui.modifier": { ":not(thead, tfoot) tr": { "font-size": "1.375rem" }, ":where(th, td)": { "padding-inline": "calc(0.25rem * 6)", "padding-block": "calc(0.25rem * 5)" } } } };

// packages/daisyui/components/table/index.js
var table_default = ({ addComponents, prefix = "" }) => {
  const prefixedtable = addPrefix(object_default43, prefix);
  addComponents({ ...prefixedtable });
};

// packages/daisyui/components/hero/object.js
var object_default44 = { ".hero": { "@layer daisyui.component": { display: "grid", width: "100%", "place-items": "center", "background-size": "cover", "background-position": "center", "& > *": { "grid-column-start": "1", "grid-row-start": "1" } } }, ".hero-overlay": { "@layer daisyui.component": { "grid-column-start": "1", "grid-row-start": "1", height: "100%", width: "100%", "background-color": "color-mix(in oklab, var(--color-neutral) 50%, transparent)" } }, ".hero-content": { "@layer daisyui.component": { isolation: "isolate", display: "flex", "max-width": "80rem", "align-items": "center", "justify-content": "center", gap: "calc(0.25rem * 4)", padding: "calc(0.25rem * 4)" } } };

// packages/daisyui/components/hero/index.js
var hero_default = ({ addComponents, prefix = "" }) => {
  const prefixedhero = addPrefix(object_default44, prefix);
  addComponents({ ...prefixedhero });
};

// packages/daisyui/components/breadcrumbs/object.js
var object_default45 = { ".breadcrumbs": { "@layer daisyui.component": { "max-width": "100%", "overflow-x": "auto", "padding-block": "calc(0.25rem * 2)", "> menu, > ul, > ol": { display: "flex", "min-height": "min-content", "align-items": "center", "white-space": "nowrap", "> li": { display: "flex", "align-items": "center", "> *": { display: "flex", cursor: "pointer", "align-items": "center", gap: "calc(0.25rem * 2)", "&:hover": { "@media (hover: hover)": { "text-decoration-line": "underline" } }, "&:focus": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" } }, "&:focus-visible": { outline: "2px solid currentColor", "outline-offset": "2px" } }, "& + *:before": { content: '""', "margin-right": "calc(0.25rem * 3)", "margin-left": "calc(0.25rem * 2)", display: "block", height: "calc(0.25rem * 1.5)", width: "calc(0.25rem * 1.5)", opacity: "40%", rotate: "45deg", "border-top": "1px solid", "border-right": "1px solid", "background-color": "#0000" }, '[dir="rtl"] & + *:before': { rotate: "-135deg" } } } } } };

// packages/daisyui/components/breadcrumbs/index.js
var breadcrumbs_default = ({ addComponents, prefix = "" }) => {
  const prefixedbreadcrumbs = addPrefix(object_default45, prefix);
  addComponents({ ...prefixedbreadcrumbs });
};

// packages/daisyui/components/collapse/object.js
var object_default46 = { ".collapse:not(td, tr, colgroup)": { visibility: "revert-layer" }, ".collapse": { "@layer daisyui.component": { display: "grid", position: "relative", overflow: "hidden", "border-radius": "var(--radius-box, 1rem)", width: "100%", "grid-template-rows": "max-content 0fr", "grid-template-columns": "minmax(0, 1fr)", isolation: "isolate", "@media (prefers-reduced-motion: no-preference)": { transition: "grid-template-rows 0.2s" }, '> input:is([type="checkbox"], [type="radio"])': { "grid-column-start": "1", "grid-row-start": "1", appearance: "none", opacity: 0, "z-index": 1, width: "100%", padding: "1rem", "padding-inline-end": "3rem", "min-height": "1lh", transition: "background-color 0.2s ease-out" }, '&:is( [open], [tabindex]:focus:not(.collapse-close), [tabindex]:focus-within:not(.collapse-close) ), &:not(.collapse-close):has(> input:is([type="checkbox"], [type="radio"]):checked)': { "grid-template-rows": "max-content 1fr" }, '&:is( [open], [tabindex]:focus:not(.collapse-close), [tabindex]:focus-within:not(.collapse-close) ) > .collapse-content, &:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content)': { visibility: "visible", "min-height": "fit-content" }, '&:focus-visible, &:has(> input:is([type="checkbox"], [type="radio"]):focus-visible), &:has(summary:focus-visible)': { "outline-color": "var(--color-base-content)", "outline-style": "solid", "outline-width": "2px", "outline-offset": "2px" }, "&:not(.collapse-close)": { '> input[type="checkbox"], > input[type="radio"]:not(:checked), > .collapse-title': { cursor: "pointer" } }, "&[tabindex]:focus:not(.collapse-close, .collapse[open]), &[tabindex]:focus-within:not(.collapse-close, .collapse[open])": { "> .collapse-title": { cursor: "unset" } }, '&:is( [open], [tabindex]:focus:not(.collapse-close), [tabindex]:focus-within:not(.collapse-close) ) > :where(.collapse-content), &:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content)': { "padding-bottom": "1rem", "@media (prefers-reduced-motion: no-preference)": { transition: "padding 0.2s ease-out, background-color 0.2s ease-out" } } }, "@layer daisyui.modifier": { "&:is([open])": { "&.collapse-arrow": { "> .collapse-title:after": { "@media (prefers-reduced-motion: no-preference)": { transform: "translateY(-50%) rotate(225deg)" } } } }, "&.collapse-open": { "&.collapse-arrow": { "> .collapse-title:after": { "@media (prefers-reduced-motion: no-preference)": { transform: "translateY(-50%) rotate(225deg)" } } }, "&.collapse-plus": { "> .collapse-title:after": { content: '"−"' } } }, "&[tabindex].collapse-arrow:focus:not(.collapse-close), &.collapse-arrow[tabindex]:focus-within:not(.collapse-close)": { "> .collapse-title:after": { transform: "translateY(-50%) rotate(225deg)" } }, "&.collapse-arrow:not(.collapse-close)": { '> input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after': { transform: "translateY(-50%) rotate(225deg)" } }, "&[open]": { "&.collapse-plus": { "> .collapse-title:after": { content: '"−"' } } }, "&[tabindex].collapse-plus:focus:not(.collapse-close)": { "> .collapse-title:after": { content: '"−"' } }, "&.collapse-plus:not(.collapse-close)": { '> input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after': { content: '"−"' } } } }, ".collapse-title, .collapse-content": { "@layer daisyui.component": { "grid-column-start": "1", "grid-row-start": "1" } }, ".collapse-content": { "@layer daisyui.component": { visibility: "hidden", "grid-column-start": "1", "grid-row-start": "2", "min-height": "0", "padding-left": "1rem", "padding-right": "1rem", cursor: "unset", "@media (prefers-reduced-motion: no-preference)": { transition: "visibility 0.2s, padding 0.2s ease-out, background-color 0.2s ease-out" } } }, ".collapse:is(details)": { "@layer daisyui.component": { width: "100%", "@media (prefers-reduced-motion: no-preference)": { "@supports (transition: content-visibility allow-discrete) and (interpolate-size: allow-keywords)": { "&::details-content": { transition: "content-visibility 0.2s allow-discrete, height 0.2s", height: "0", "interpolate-size": "allow-keywords" }, "&:where([open], .collapse-open)::details-content": { height: "auto" } } }, "& summary": { position: "relative", display: "block", "&::-webkit-details-marker": { display: "none" } } } }, ".collapse:is(details) summary": { "@layer daisyui.component": { outline: "none" } }, ".collapse-arrow": { "@layer daisyui.modifier": { "> .collapse-title:after": { position: "absolute", display: "block", height: "0.5rem", width: "0.5rem", transform: "translateY(-100%) rotate(45deg)", "@media (prefers-reduced-motion: no-preference)": { "transition-property": "all", "transition-timing-function": "cubic-bezier(0.4, 0, 0.2, 1)", "transition-duration": "0.2s" }, top: "50%", "inset-inline-end": "1.4rem", content: '""', "transform-origin": "75% 75%", "box-shadow": "2px 2px", "pointer-events": "none" } } }, ".collapse-plus": { "@layer daisyui.modifier": { "> .collapse-title:after": { position: "absolute", display: "block", height: "0.5rem", width: "0.5rem", "@media (prefers-reduced-motion: no-preference)": { "transition-property": "all", "transition-duration": "300ms", "transition-timing-function": "cubic-bezier(0.4, 0, 0.2, 1)" }, top: "0.9rem", "inset-inline-end": "1.4rem", content: '"+"', "pointer-events": "none" } } }, ".collapse-title": { "@layer daisyui.component": { position: "relative", width: "100%", padding: "1rem", "padding-inline-end": "3rem", "min-height": "1lh", transition: "background-color 0.2s ease-out" } }, ".collapse-open": { "@layer daisyui.modifier": { "grid-template-rows": "max-content 1fr", "> .collapse-content": { visibility: "visible", "min-height": "fit-content", "padding-bottom": "1rem", "@media (prefers-reduced-motion: no-preference)": { transition: "padding 0.2s ease-out, background-color 0.2s ease-out" } } } } };

// packages/daisyui/components/collapse/index.js
var collapse_default = ({ addComponents, prefix = "" }) => {
  const prefixedcollapse = addPrefix(object_default46, prefix);
  addComponents({ ...prefixedcollapse });
};

// packages/daisyui/components/stack/object.js
var object_default47 = { ".stack": { "@layer daisyui.component": { display: "inline-grid", "grid-template-columns": "3px 4px 1fr 4px 3px", "grid-template-rows": "3px 4px 1fr 4px 3px", "& > *": { height: "100%", width: "100%", "&:nth-child(n + 2)": { width: "100%", opacity: "70%" }, "&:nth-child(2)": { "z-index": 2, opacity: "90%" }, "&:nth-child(1)": { "z-index": 3, width: "100%" } } }, "@layer daisyui.modifier": { "&, &.stack-bottom": { "> *": { "grid-column": "3 / 4", "grid-row": "3 / 6", "&:nth-child(2)": { "grid-column": "2 / 5", "grid-row": "2 / 5" }, "&:nth-child(1)": { "grid-column": "1 / 6", "grid-row": "1 / 4" } } }, "&.stack-top": { "> *": { "grid-column": "3 / 4", "grid-row": "1 / 4", "&:nth-child(2)": { "grid-column": "2 / 5", "grid-row": "2 / 5" }, "&:nth-child(1)": { "grid-column": "1 / 6", "grid-row": "3 / 6" } } }, "&.stack-start": { "> *": { "grid-column": "1 / 4", "grid-row": "3 / 4", "&:nth-child(2)": { "grid-column": "2 / 5", "grid-row": "2 / 5" }, "&:nth-child(1)": { "grid-column": "3 / 6", "grid-row": "1 / 6" } } }, "&.stack-end": { "> *": { "grid-column": "3 / 6", "grid-row": "3 / 4", "&:nth-child(2)": { "grid-column": "2 / 5", "grid-row": "2 / 5" }, "&:nth-child(1)": { "grid-column": "1 / 4", "grid-row": "1 / 6" } } } } } };

// packages/daisyui/components/stack/index.js
var stack_default = ({ addComponents, prefix = "" }) => {
  const prefixedstack = addPrefix(object_default47, prefix);
  addComponents({ ...prefixedstack });
};

// packages/daisyui/components/diff/object.js
var object_default48 = { ".diff": { "@layer daisyui.component": { position: "relative", display: "grid", width: "100%", overflow: "hidden", "webkit-user-select": "none", "user-select": "none", "grid-template-rows": "1fr 1.8rem 1fr", direction: "ltr", "container-type": "inline-size", "grid-template-columns": "auto 1fr", "&:focus-visible, &:has(.diff-item-1:focus-visible)": { "outline-style": "var(--tw-outline-style)", "outline-width": "2px", "outline-offset": "1px", "outline-color": "var(--color-base-content)" }, "&:focus-visible": { "outline-style": "var(--tw-outline-style)", "outline-width": "2px", "outline-offset": "1px", "outline-color": "var(--color-base-content)", ".diff-resizer": { "min-width": "95cqi", "max-width": "95cqi" } }, "&:has(.diff-item-1:focus-visible)": { "outline-style": "var(--tw-outline-style)", "outline-width": "2px", "outline-offset": "1px", ".diff-resizer": { "min-width": "5cqi", "max-width": "5cqi" } }, "@supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x)": { "&:focus": { ".diff-resizer": { "min-width": "5cqi", "max-width": "5cqi" } }, "&:has(.diff-item-1:focus)": { ".diff-resizer": { "min-width": "95cqi", "max-width": "95cqi" } } } } }, ".diff-resizer": { "@layer daisyui.component": { position: "relative", "z-index": 1, "grid-column-start": "1", "grid-row-start": "2", height: "calc(0.25rem * 4)", width: "50cqi", "max-width": "calc(100cqi - 1rem)", "min-width": "1rem", resize: "horizontal", overflow: "hidden", opacity: "0%", transform: "scaleY(3) translate(0.35rem, 0.35rem)", cursor: "ew-resize", "transform-origin": "100% 100%", "clip-path": "inset(calc(100% - 0.75rem) 0 0 calc(100% - 0.75rem))", transition: "min-width 0.3s ease-out, max-width 0.3s ease-out" } }, ".diff-item-2": { "@layer daisyui.component": { position: "relative", "grid-column-start": "1", "grid-row": "span 3 / span 3", "grid-row-start": "1", "&:after": { "pointer-events": "none", position: "absolute", top: "calc(1/2 * 100%)", right: "1px", bottom: "calc(0.25rem * 0)", "z-index": 2, "border-radius": "calc(infinity * 1px)", "background-color": "color-mix(in oklab, var(--color-base-100) 50%, transparent)", width: "1.2rem", height: "1.8rem", border: "2px solid var(--color-base-100)", content: '""', outline: "1px solid color-mix(in oklab, var(--color-base-content) 5%, #0000)", "outline-offset": "-3px", "backdrop-filter": "blur(8px)", "box-shadow": "0 1px 2px 0 oklch(0% 0 0 / 0.1)", translate: "50% -50%" }, "> *": { "pointer-events": "none", position: "absolute", top: "calc(0.25rem * 0)", bottom: "calc(0.25rem * 0)", left: "calc(0.25rem * 0)", height: "100%", width: "100cqi", "max-width": "none", "object-fit": "cover", "object-position": "center" }, "@supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x)": { "&:after": { content: "none" } } } }, ".diff-item-1": { "@layer daisyui.component": { position: "relative", "z-index": 1, "grid-column-start": "1", "grid-row": "span 3 / span 3", "grid-row-start": "1", overflow: "hidden", "border-right": "2px solid var(--color-base-100)", "&:focus-visible": { "--tw-outline-style": "none", "outline-style": "none" }, "> *": { "pointer-events": "none", position: "absolute", top: "calc(0.25rem * 0)", bottom: "calc(0.25rem * 0)", left: "calc(0.25rem * 0)", height: "100%", width: "100cqi", "max-width": "none", "object-fit": "cover", "object-position": "center" } } } };

// packages/daisyui/components/diff/index.js
var diff_default = ({ addComponents, prefix = "" }) => {
  const prefixeddiff = addPrefix(object_default48, prefix);
  addComponents({ ...prefixeddiff });
};

// packages/daisyui/components/filter/object.js
var object_default49 = { ".filter": { "@layer daisyui.component": { display: "flex", "flex-wrap": "wrap", 'input[type="radio"]': { width: "auto" }, input: { overflow: "hidden", opacity: "100%", scale: "1", transition: "margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s", "&:not(:last-child)": { "margin-inline-end": "calc(0.25rem * 1)" }, "&.filter-reset": { "aspect-ratio": "1 / 1", "&::after": { content: '"×"' } } }, "&:not(:has(input:checked:not(.filter-reset)))": { '.filter-reset, input[type="reset"]': { scale: "0", "border-width": "0", "margin-inline": "calc(0.25rem * 0)", width: "calc(0.25rem * 0)", "padding-inline": "calc(0.25rem * 0)", opacity: "0%" } }, "&:has(input:checked:not(.filter-reset))": { 'input:not(:checked, .filter-reset, input[type="reset"])': { scale: "0", "border-width": "0", "margin-inline": "calc(0.25rem * 0)", width: "calc(0.25rem * 0)", "padding-inline": "calc(0.25rem * 0)", opacity: "0%" } } } } };

// packages/daisyui/components/filter/index.js
var filter_default = ({ addComponents, prefix = "" }) => {
  const prefixedfilter = addPrefix(object_default49, prefix);
  addComponents({ ...prefixedfilter });
};

// packages/daisyui/components/dock/object.js
var object_default50 = { ".dock": { "@layer daisyui.component": { position: "fixed", right: "calc(0.25rem * 0)", bottom: "calc(0.25rem * 0)", left: "calc(0.25rem * 0)", "z-index": 1, display: "flex", width: "100%", "flex-direction": "row", "align-items": "center", "justify-content": "space-around", "background-color": "var(--color-base-100)", padding: "calc(0.25rem * 2)", color: "currentcolor", "border-top": "0.5px solid color-mix(in oklab, var(--color-base-content) 5%, #0000)", height: ["4rem", "calc(4rem + env(safe-area-inset-bottom))"], "padding-bottom": "env(safe-area-inset-bottom)", "> *": { position: "relative", "margin-bottom": "calc(0.25rem * 2)", display: "flex", height: "100%", "max-width": "calc(0.25rem * 32)", "flex-shrink": 1, "flex-basis": "100%", cursor: "pointer", "flex-direction": "column", "align-items": "center", "justify-content": "center", gap: "1px", "border-radius": "var(--radius-box)", "background-color": "transparent", transition: "opacity 0.2s ease-out", "@media (hover: hover)": { "&:hover": { opacity: "80%" } }, '&[aria-disabled="true"], &[disabled]': { "&, &:hover": { "pointer-events": "none", color: "color-mix(in oklab, var(--color-base-content) 10%, transparent)", opacity: "100%" } }, ".dock-label": { "font-size": "0.6875rem" }, "&:after": { content: '""', position: "absolute", height: "calc(0.25rem * 1)", width: "calc(0.25rem * 6)", "border-radius": "calc(infinity * 1px)", "background-color": "transparent", bottom: "0.2rem", "border-top": "3px solid transparent", transition: "background-color 0.1s ease-out, text-color 0.1s ease-out, width 0.1s ease-out" } } } }, ".dock-active": { "@layer daisyui.modifier": { "&:after": { width: "calc(0.25rem * 10)", "background-color": "currentcolor", color: "currentcolor" } } }, ".dock-xs": { "@layer daisyui.modifier": { height: ["3rem", "calc(3rem + env(safe-area-inset-bottom))"], ".dock-active": { "&:after": { bottom: "-0.1rem" } }, ".dock-label": { "font-size": "0.625rem" } } }, ".dock-sm": { "@layer daisyui.modifier": { height: ["calc(0.25rem * 14)", "3.5rem", "calc(3.5rem + env(safe-area-inset-bottom))"], ".dock-active": { "&:after": { bottom: "-0.1rem" } }, ".dock-label": { "font-size": "0.625rem" } } }, ".dock-md": { "@layer daisyui.modifier": { height: ["4rem", "calc(4rem + env(safe-area-inset-bottom))"], ".dock-label": { "font-size": "0.6875rem" } } }, ".dock-lg": { "@layer daisyui.modifier": { height: ["4.5rem", "calc(4.5rem + env(safe-area-inset-bottom))"], ".dock-active": { "&:after": { bottom: "0.4rem" } }, ".dock-label": { "font-size": "0.6875rem" } } }, ".dock-xl": { "@layer daisyui.modifier": { height: ["5rem", "calc(5rem + env(safe-area-inset-bottom))"], ".dock-active": { "&:after": { bottom: "0.4rem" } }, ".dock-label": { "font-size": "0.75rem" } } } };

// packages/daisyui/components/dock/index.js
var dock_default = ({ addComponents, prefix = "" }) => {
  const prefixeddock = addPrefix(object_default50, prefix);
  addComponents({ ...prefixeddock });
};

// packages/daisyui/components/mask/object.js
var object_default51 = { ".mask": { "@layer daisyui.component": { display: "inline-block", "vertical-align": "middle", "mask-size": "contain", "mask-repeat": "no-repeat", "mask-position": "center" } }, ".mask-half-1": { "@layer daisyui.modifier": { "mask-size": "200%", "mask-position": ["left", "left"], '&:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *)': { "mask-position": "right" } } }, ".mask-half-2": { "@layer daisyui.modifier": { "mask-size": "200%", "mask-position": ["right", "right"], '&:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *)': { "mask-position": "left" } } }, ".mask-squircle": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 0C20 0 0 20 0 100s20 100 100 100 100-20 100-100S180 0 100 0Z'/%3e%3c/svg%3e")` } }, ".mask-decagon": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='192' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 0 58.779 19.098 36.327 50v61.804l-36.327 50L96 200l-58.779-19.098-36.327-50V69.098l36.327-50z' fill-rule='evenodd'/%3e%3c/svg%3e")` } }, ".mask-diamond": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m100 0 100 100-100 100L0 100z' fill-rule='evenodd'/%3e%3c/svg%3e")` } }, ".mask-heart": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='200' height='185' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M100 184.606a15.384 15.384 0 0 1-8.653-2.678C53.565 156.28 37.205 138.695 28.182 127.7 8.952 104.264-.254 80.202.005 54.146.308 24.287 24.264 0 53.406 0c21.192 0 35.869 11.937 44.416 21.879a2.884 2.884 0 0 0 4.356 0C110.725 11.927 125.402 0 146.594 0c29.142 0 53.098 24.287 53.4 54.151.26 26.061-8.956 50.122-28.176 73.554-9.023 10.994-25.383 28.58-63.165 54.228a15.384 15.384 0 0 1-8.653 2.673Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e")` } }, ".mask-hexagon": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='182' height='201' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M.3 65.486c0-9.196 6.687-20.063 14.211-25.078l61.86-35.946c8.36-5.016 20.899-5.016 29.258 0l61.86 35.946c8.36 5.015 14.211 15.882 14.211 25.078v71.055c0 9.196-6.687 20.063-14.211 25.079l-61.86 35.945c-8.36 4.18-20.899 4.18-29.258 0L14.51 161.62C6.151 157.44.3 145.737.3 136.54V65.486Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e")` } }, ".mask-hexagon-2": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='200' height='182' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M64.786 181.4c-9.196 0-20.063-6.687-25.079-14.21L3.762 105.33c-5.016-8.36-5.016-20.9 0-29.259l35.945-61.86C44.723 5.851 55.59 0 64.786 0h71.055c9.196 0 20.063 6.688 25.079 14.211l35.945 61.86c4.18 8.36 4.18 20.899 0 29.258l-35.945 61.86c-4.18 8.36-15.883 14.211-25.079 14.211H64.786Z' fill='black' fill-rule='nonzero'/%3e%3c/svg%3e")` } }, ".mask-circle": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='200' height='200' xmlns='http://www.w3.org/2000/svg'%3e%3ccircle fill='black' cx='100' cy='100' r='100' fill-rule='evenodd'/%3e%3c/svg%3e")` } }, ".mask-pentagon": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='192' height='181' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 0 95.106 69.098-36.327 111.804H37.22L.894 69.098z' fill-rule='evenodd'/%3e%3c/svg%3e")` } }, ".mask-star": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 137.263-58.779 42.024 22.163-68.389L.894 68.481l72.476-.243L96 0l22.63 68.238 72.476.243-58.49 42.417 22.163 68.389z' fill-rule='evenodd'/%3e%3c/svg%3e")` } }, ".mask-star-2": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='192' height='180' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m96 153.044-58.779 26.243 7.02-63.513L.894 68.481l63.117-13.01L96 0l31.989 55.472 63.117 13.01-43.347 47.292 7.02 63.513z' fill-rule='evenodd'/%3e%3c/svg%3e")` } }, ".mask-triangle": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='174' height='149' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m87 148.476-86.603.185L43.86 74.423 87 0l43.14 74.423 43.463 74.238z' fill-rule='evenodd'/%3e%3c/svg%3e")` } }, ".mask-triangle-2": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='174' height='150' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m87 .738 86.603-.184-43.463 74.238L87 149.214 43.86 74.792.397.554z' fill-rule='evenodd'/%3e%3c/svg%3e")` } }, ".mask-triangle-3": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='150' height='174' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='m149.369 87.107.185 86.603-74.239-43.463L.893 87.107l74.422-43.14L149.554.505z' fill-rule='evenodd'/%3e%3c/svg%3e")` } }, ".mask-triangle-4": { "@layer daisyui.modifier": { "mask-image": `url("data:image/svg+xml,%3csvg width='150' height='174' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M.631 87.107.446.505l74.239 43.462 74.422 43.14-74.422 43.14L.446 173.71z' fill-rule='evenodd'/%3e%3c/svg%3e")` } } };

// packages/daisyui/components/mask/index.js
var mask_default = ({ addComponents, prefix = "" }) => {
  const prefixedmask = addPrefix(object_default51, prefix);
  addComponents({ ...prefixedmask });
};

// packages/daisyui/components/label/object.js
var object_default52 = { ".label": { "@layer daisyui.component": { display: "inline-flex", "align-items": "center", gap: "calc(0.25rem * 1.5)", "white-space": "nowrap", color: "color-mix(in oklab, currentcolor 60%, transparent)", "&:has(input)": { cursor: "pointer" }, "&:is(.input > *, .select > *)": { display: "flex", height: "calc(100% - 0.5rem)", "align-items": "center", "padding-inline": "calc(0.25rem * 3)", "white-space": "nowrap", "font-size": "inherit", "&:first-child": { "margin-inline-start": "calc(0.25rem * -3)", "margin-inline-end": "calc(0.25rem * 3)", "border-inline-end": "var(--border) solid color-mix(in oklab, currentColor 10%, #0000)" }, "&:last-child": { "margin-inline-start": "calc(0.25rem * 3)", "margin-inline-end": "calc(0.25rem * -3)", "border-inline-start": "var(--border) solid color-mix(in oklab, currentColor 10%, #0000)" } } } }, ".floating-label": { "@layer daisyui.component": { position: "relative", display: "block", input: { display: "block", "&::placeholder": { transition: "top 0.1s ease-out, translate 0.1s ease-out, scale 0.1s ease-out, opacity 0.1s ease-out" } }, textarea: { "&::placeholder": { transition: "top 0.1s ease-out, translate 0.1s ease-out, scale 0.1s ease-out, opacity 0.1s ease-out" } }, "> span": { position: "absolute", "inset-inline-start": "calc(0.25rem * 3)", "z-index": 1, "background-color": "var(--color-base-100)", "padding-inline": "calc(0.25rem * 1)", opacity: "0%", "font-size": "0.875rem", top: "calc(var(--size-field, 0.25rem) * 10 / 2)", "line-height": 1, "border-radius": "2px", "pointer-events": "none", translate: "0 -50%", transition: "top 0.1s ease-out, translate 0.1s ease-out, scale 0.1s ease-out, opacity 0.1s ease-out" }, "&:focus-within, &:not(:has(input:placeholder-shown, textarea:placeholder-shown))": { "::placeholder": { opacity: "0%", top: "0", translate: "-12.5% calc(-50% - 0.125em)", scale: "0.75", "pointer-events": "auto" }, "> span": { opacity: "100%", top: "0", translate: "-12.5% calc(-50% - 0.125em)", scale: "0.75", "pointer-events": "auto", "z-index": 2 } }, "&:has(:disabled, [disabled])": { "> span": { opacity: "0%" } }, "&:has(.input-xs, .select-xs, .textarea-xs) span": { "font-size": "0.6875rem", top: "calc(var(--size-field, 0.25rem) * 6 / 2)" }, "&:has(.input-sm, .select-sm, .textarea-sm) span": { "font-size": "0.75rem", top: "calc(var(--size-field, 0.25rem) * 8 / 2)" }, "&:has(.input-md, .select-md, .textarea-md) span": { "font-size": "0.875rem", top: "calc(var(--size-field, 0.25rem) * 10 / 2)" }, "&:has(.input-lg, .select-lg, .textarea-lg) span": { "font-size": "1.125rem", top: "calc(var(--size-field, 0.25rem) * 12 / 2)" }, "&:has(.input-xl, .select-xl, .textarea-xl) span": { "font-size": "1.375rem", top: "calc(var(--size-field, 0.25rem) * 14 / 2)" } } } };

// packages/daisyui/components/label/index.js
var label_default = ({ addComponents, prefix = "" }) => {
  const prefixedlabel = addPrefix(object_default52, prefix);
  addComponents({ ...prefixedlabel });
};

// packages/daisyui/components/status/object.js
var object_default53 = { ".status": { "@layer daisyui.component": { display: "inline-block", "aspect-ratio": "1 / 1", width: "calc(0.25rem * 2)", height: "calc(0.25rem * 2)", "border-radius": "var(--radius-selector)", "background-color": "color-mix(in oklab, var(--color-base-content) 20%, transparent)", "background-position": "center", "background-repeat": "no-repeat", "vertical-align": "middle", color: "color-mix(in oklab, var(--color-black) 30%, transparent)", "background-image": "radial-gradient( circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000 )", "box-shadow": "0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000)" } }, ".status-primary": { "@layer daisyui.modifier": { "background-color": "var(--color-primary)", color: "var(--color-primary)" } }, ".status-secondary": { "@layer daisyui.modifier": { "background-color": "var(--color-secondary)", color: "var(--color-secondary)" } }, ".status-accent": { "@layer daisyui.modifier": { "background-color": "var(--color-accent)", color: "var(--color-accent)" } }, ".status-neutral": { "@layer daisyui.modifier": { "background-color": "var(--color-neutral)", color: "var(--color-neutral)" } }, ".status-info": { "@layer daisyui.modifier": { "background-color": "var(--color-info)", color: "var(--color-info)" } }, ".status-success": { "@layer daisyui.modifier": { "background-color": "var(--color-success)", color: "var(--color-success)" } }, ".status-warning": { "@layer daisyui.modifier": { "background-color": "var(--color-warning)", color: "var(--color-warning)" } }, ".status-error": { "@layer daisyui.modifier": { "background-color": "var(--color-error)", color: "var(--color-error)" } }, ".status-xs": { "@layer daisyui.modifier": { width: "calc(0.25rem * 0.5)", height: "calc(0.25rem * 0.5)" } }, ".status-sm": { "@layer daisyui.modifier": { width: "calc(0.25rem * 1)", height: "calc(0.25rem * 1)" } }, ".status-md": { "@layer daisyui.modifier": { width: "calc(0.25rem * 2)", height: "calc(0.25rem * 2)" } }, ".status-lg": { "@layer daisyui.modifier": { width: "calc(0.25rem * 3)", height: "calc(0.25rem * 3)" } }, ".status-xl": { "@layer daisyui.modifier": { width: "calc(0.25rem * 4)", height: "calc(0.25rem * 4)" } } };

// packages/daisyui/components/status/index.js
var status_default = ({ addComponents, prefix = "" }) => {
  const prefixedstatus = addPrefix(object_default53, prefix);
  addComponents({ ...prefixedstatus });
};

// packages/daisyui/components/hovergallery/object.js
var object_default54 = { ".hover-gallery": { "@layer daisyui.component": { "--items": "1", "grid-template-columns": "repeat(var(--items), 1fr)", width: "100%", gap: "1px", overflow: "hidden", "&, &:is(figure)": { display: "inline-grid" }, "&:has(> :nth-child(3))": { "--items": "2" }, "&:has(> :nth-child(4))": { "--items": "3" }, "&:has(> :nth-child(5))": { "--items": "4" }, "&:has(> :nth-child(6))": { "--items": "5" }, "&:has(> :nth-child(7))": { "--items": "6" }, "&:has(> :nth-child(8))": { "--items": "7" }, "&:has(> :nth-child(9))": { "--items": "8" }, "&:has(> :nth-child(10))": { "--items": "9" }, "> *": { opacity: 0, height: "100%", "grid-row": "1", "object-fit": "cover", width: "100%", "&:nth-child(1)": { "grid-column": "1 / -1", opacity: 1 }, "&:nth-child(2)": { "grid-column": "1" }, "&:nth-child(3)": { "grid-column": "2" }, "&:nth-child(4)": { "grid-column": "3" }, "&:nth-child(5)": { "grid-column": "4" }, "&:nth-child(6)": { "grid-column": "5" }, "&:nth-child(7)": { "grid-column": "6" }, "&:nth-child(8)": { "grid-column": "7" }, "&:nth-child(9)": { "grid-column": "8" }, "&:nth-child(10)": { "grid-column": "9" }, "&:nth-child(n + 11)": { display: "none" } }, "> *:hover": { "grid-column": "1 / -1", opacity: 1 }, "&:has(*:hover)": { "> :nth-child(1)": { display: "none" } } } } };

// packages/daisyui/components/hovergallery/index.js
var hovergallery_default = ({ addComponents, prefix = "" }) => {
  const prefixedhovergallery = addPrefix(object_default54, prefix);
  addComponents({ ...prefixedhovergallery });
};

// packages/daisyui/components/alert/object.js
var object_default55 = { ".alert": { "border-width": "var(--border)", "border-color": "var(--alert-border-color, var(--color-base-200))", "@layer daisyui.component": { "border-style": "solid", "--alert-border-color": "var(--color-base-200)", display: "grid", "align-items": "center", gap: "calc(0.25rem * 4)", "border-radius": "var(--radius-box)", "padding-inline": "calc(0.25rem * 4)", "padding-block": "calc(0.25rem * 3)", color: "var(--color-base-content)", "background-color": "var(--alert-color, var(--color-base-200))", "justify-content": "start", "justify-items": "start", "grid-auto-flow": "column", "grid-template-columns": "auto", "text-align": "start", "font-size": "0.875rem", "line-height": "1.25rem", "background-size": "auto, calc(var(--noise) * 100%)", "background-image": "none, var(--fx-noise)", "box-shadow": "0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px color-mix( in oklab, color-mix(in oklab, #000 20%, var(--alert-color, var(--color-base-200))) calc(var(--depth) * 20%), #0000 ), 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08))", "&:has(:nth-child(2))": { "grid-template-columns": "auto minmax(auto, 1fr)" } } }, ".alert-info": { "@layer daisyui.modifier": { color: "var(--color-info-content)", "--alert-border-color": "var(--color-info)", "--alert-color": "var(--color-info)" } }, ".alert-success": { "@layer daisyui.modifier": { color: "var(--color-success-content)", "--alert-border-color": "var(--color-success)", "--alert-color": "var(--color-success)" } }, ".alert-warning": { "@layer daisyui.modifier": { color: "var(--color-warning-content)", "--alert-border-color": "var(--color-warning)", "--alert-color": "var(--color-warning)" } }, ".alert-error": { "@layer daisyui.modifier": { color: "var(--color-error-content)", "--alert-border-color": "var(--color-error)", "--alert-color": "var(--color-error)" } }, ".alert-soft": { "@layer daisyui.style": { color: "var(--alert-color, var(--color-base-content))", background: "color-mix( in oklab, var(--alert-color, var(--color-base-content)) 8%, var(--color-base-100) )", "--alert-border-color": `color-mix(
      in oklab,
      var(--alert-color, var(--color-base-content)) 10%,
      var(--color-base-100)
    )`, "box-shadow": "none", "background-image": "none" } }, ".alert-outline": { "@layer daisyui.style": { "background-color": "transparent", color: "var(--alert-color)", "box-shadow": "none", "background-image": "none" } }, ".alert-dash": { "@layer daisyui.style": { "background-color": "transparent", color: "var(--alert-color)", "border-style": "dashed", "box-shadow": "none", "background-image": "none" } }, ".alert-vertical": { "@layer daisyui.modifier": { "justify-content": "center", "justify-items": "center", "grid-auto-flow": "row", "grid-template-columns": "auto", "text-align": "center", "&:has(:nth-child(2))": { "grid-template-columns": "auto" } } }, ".alert-horizontal": { "@layer daisyui.modifier": { "justify-content": "start", "justify-items": "start", "grid-auto-flow": "column", "grid-template-columns": "auto", "text-align": "start", "&:has(:nth-child(2))": { "grid-template-columns": "auto minmax(auto, 1fr)" } } } };

// packages/daisyui/components/alert/index.js
var alert_default = ({ addComponents, prefix = "" }) => {
  const prefixedalert = addPrefix(object_default55, prefix);
  addComponents({ ...prefixedalert });
};

// packages/daisyui/components/fab/object.js
var object_default56 = { ".fab": { "@layer daisyui.component": { "pointer-events": "none", position: "fixed", "inset-inline-end": "calc(0.25rem * 4)", bottom: "calc(0.25rem * 4)", "z-index": 999, display: "flex", "flex-direction": "column-reverse", "align-items": "flex-end", gap: "calc(0.25rem * 2)", "font-size": "var(--text-sm)", "line-height": "var(--tw-leading, var(--text-sm--line-height))", "white-space": "nowrap", "> *": { "pointer-events": "auto", display: "flex", "align-items": "center", gap: "calc(0.25rem * 2)", "&:hover, &:has(:focus-visible)": { "z-index": 1 } }, "> [tabindex]": { "&:first-child": { position: "relative", display: "grid", "transition-property": "opacity, visibility, rotate", "transition-duration": "0.2s", "transition-timing-function": "cubic-bezier(0.4, 0, 0.2, 1)" } }, ".fab-close": { position: "absolute", "inset-inline-end": "calc(0.25rem * 0)", bottom: "calc(0.25rem * 0)" }, ".fab-main-action": { position: "absolute", "inset-inline-end": "calc(0.25rem * 0)", bottom: "calc(0.25rem * 0)" }, "&:focus-within": { "&:has(.fab-close), &:has(.fab-main-action)": { "> [tabindex]": { rotate: "90deg", opacity: "0%" } }, "> [tabindex]:first-child": { "pointer-events": "none" }, "> :nth-child(n + 2)": { visibility: "visible", "--tw-scale-x": "100%", "--tw-scale-y": "100%", "--tw-scale-z": "100%", scale: "var(--tw-scale-x) var(--tw-scale-y)", opacity: "100%" } }, "> :nth-child(n + 2)": { visibility: "hidden", "--tw-scale-x": "80%", "--tw-scale-y": "80%", "--tw-scale-z": "80%", scale: "var(--tw-scale-x) var(--tw-scale-y)", opacity: "0%", "transition-property": "opacity, scale, visibility", "transition-duration": "0.2s", "transition-timing-function": "cubic-bezier(0.4, 0, 0.2, 1)", "&.fab-main-action, &.fab-close": { "--tw-scale-x": "100%", "--tw-scale-y": "100%", "--tw-scale-z": "100%", scale: "var(--tw-scale-x) var(--tw-scale-y)" } }, "> :nth-child(3)": { "transition-delay": "30ms" }, "> :nth-child(4)": { "transition-delay": "60ms" }, "> :nth-child(5)": { "transition-delay": "90ms" }, "> :nth-child(6)": { "transition-delay": "120ms" } } }, ".fab-flower": { "@layer daisyui.component": { display: "grid", "--position": "0rem", "> *:nth-child(-n + 2)": { "--position": "0rem" }, "> *": { "grid-area": "1/1", "--degree": "180deg", "--flip-degree": "calc(180deg - var(--degree))", transform: "translateX(calc(cos(var(--degree)) * var(--position))) translateY(calc(sin(var(--degree)) * calc(-1 * var(--position))))", '[dir="rtl"] &': { transform: "translateX(calc(cos(var(--flip-degree)) * var(--position))) translateY(calc(sin(var(--flip-degree)) * calc(-1 * var(--position))))" } }, "> :nth-child(n + 7)": { display: "none" }, "&:has(:nth-child(3))": { "--position": "140%", "> :nth-child(3)": { "--degree": "135deg" } }, "&:has(:nth-child(4))": { "--position": "140%", "> :nth-child(3)": { "--degree": "165deg" }, "> :nth-child(4)": { "--degree": "105deg" } }, "&:has(:nth-child(5))": { "--position": "180%", "> :nth-child(3)": { "--degree": "180deg" }, "> :nth-child(4)": { "--degree": "135deg" }, "> :nth-child(5)": { "--degree": "90deg" } }, "&:has(:nth-child(6))": { "--position": "220%", "> :nth-child(3)": { "--degree": "180deg" }, "> :nth-child(4)": { "--degree": "150deg" }, "> :nth-child(5)": { "--degree": "120deg" }, "> :nth-child(6)": { "--degree": "90deg" } } } } };

// packages/daisyui/components/fab/index.js
var fab_default = ({ addComponents, prefix = "" }) => {
  const prefixedfab = addPrefix(object_default56, prefix);
  addComponents({ ...prefixedfab });
};

// packages/daisyui/components/kbd/object.js
var object_default57 = { ".kbd": { "@layer daisyui.component": { display: "inline-flex", "align-items": "center", "justify-content": "center", "border-radius": "var(--radius-field)", "background-color": "var(--color-base-200)", "vertical-align": "middle", "padding-left": "0.5em", "padding-right": "0.5em", border: "var(--border) solid color-mix(in srgb, var(--color-base-content) 20%, #0000)", "border-bottom": "calc(var(--border) + 1px) solid color-mix(in srgb, var(--color-base-content) 20%, #0000)", "--size": "calc(var(--size-selector, 0.25rem) * 6)", "font-size": "0.875rem", height: "var(--size)", "min-width": "var(--size)", "box-shadow": "none" } }, ".kbd-xs": { "@layer daisyui.modifier": { "--size": "calc(var(--size-selector, 0.25rem) * 4)", "font-size": "0.625rem" } }, ".kbd-sm": { "@layer daisyui.modifier": { "--size": "calc(var(--size-selector, 0.25rem) * 5)", "font-size": "0.75rem" } }, ".kbd-md": { "@layer daisyui.modifier": { "--size": "calc(var(--size-selector, 0.25rem) * 6)", "font-size": "0.875rem" } }, ".kbd-lg": { "@layer daisyui.modifier": { "--size": "calc(var(--size-selector, 0.25rem) * 7)", "font-size": "1rem" } }, ".kbd-xl": { "@layer daisyui.modifier": { "--size": "calc(var(--size-selector, 0.25rem) * 8)", "font-size": "1.125rem" } } };

// packages/daisyui/components/kbd/index.js
var kbd_default = ({ addComponents, prefix = "" }) => {
  const prefixedkbd = addPrefix(object_default57, prefix);
  addComponents({ ...prefixedkbd });
};

// packages/daisyui/components/input/object.js
var object_default58 = { ".input": { "@layer daisyui.component": { cursor: "text", border: "var(--border) solid #0000", position: "relative", display: "inline-flex", "flex-shrink": 1, appearance: "none", "align-items": "center", gap: "calc(0.25rem * 2)", "background-color": "var(--color-base-100)", "padding-inline": "calc(0.25rem * 3)", "vertical-align": "middle", "white-space": "nowrap", width: "clamp(3rem, 20rem, 100%)", height: "var(--size)", "font-size": "max(var(--font-size, 0.875rem), 0.875rem)", "touch-action": "manipulation", "border-start-start-radius": "var(--join-ss, var(--radius-field))", "border-start-end-radius": "var(--join-se, var(--radius-field))", "border-end-start-radius": "var(--join-es, var(--radius-field))", "border-end-end-radius": "var(--join-ee, var(--radius-field))", "border-color": "var(--input-color)", "box-shadow": "0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset", "--size": "calc(var(--size-field, 0.25rem) * 10)", "--input-color": "color-mix(in oklab, var(--color-base-content) 20%, #0000)", "&:where(input)": { display: "inline-flex" }, ":where(input)": { display: "inline-flex", height: "100%", width: "100%", appearance: "none", "background-color": "transparent", border: "none", "&:focus, &:focus-within": { "--tw-outline-style": "none", "outline-style": "none", "@media (forced-colors: active)": { outline: "2px solid transparent", "outline-offset": "2px" } } }, ':where(input[type="url"]), :where(input[type="email"])': { direction: "ltr" }, ':where(input[type="date"])': { display: "inline-flex" }, "&:focus, &:focus-within": { "--input-color": "var(--color-base-content)", "box-shadow": "0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000)", outline: "2px solid var(--input-color)", "outline-offset": "2px", isolation: "isolate", "z-index": 1 }, "@media (pointer: coarse)": { "@supports (-webkit-touch-callout: none)": { "&:focus, &:focus-within": { "--font-size": "1rem" } } }, "&:has(> input[disabled]), &:is(:disabled, [disabled]), fieldset:disabled &": { cursor: "not-allowed", "border-color": "var(--color-base-200)", "background-color": "var(--color-base-200)", color: "color-mix(in oklab, var(--color-base-content) 40%, transparent)", "&::placeholder": { color: "color-mix(in oklab, var(--color-base-content) 20%, transparent)" }, "box-shadow": "none" }, "&:has(> input[disabled]) > input[disabled]": { cursor: "not-allowed" }, "&::-webkit-date-and-time-value": { "text-align": "inherit" }, '&[type="number"]': { "&::-webkit-inner-spin-button": { "margin-block": "calc(0.25rem * -3)", "margin-inline-end": "calc(0.25rem * -3)" } }, "&::-webkit-calendar-picker-indicator": { position: "absolute", "inset-inline-end": "0.75em" }, '&:has(> input[type="date"])': { ':where(input[type="date"])': { display: "inline-flex", "webkit-appearance": "none", appearance: "none" }, 'input[type="date"]::-webkit-calendar-picker-indicator': { position: "absolute", "inset-inline-end": "0.75em", width: "1em", height: "1em", cursor: "pointer" } } } }, ".input-ghost": { "@layer daisyui.modifier": { "background-color": "transparent", "box-shadow": "none", "border-color": "#0000", "&:focus, &:focus-within": { "background-color": "var(--color-base-100)", color: "var(--color-base-content)", "border-color": "#0000", "box-shadow": "none" } } }, ".input-neutral": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-neutral)" } } }, ".input-primary": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-primary)" } } }, ".input-secondary": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-secondary)" } } }, ".input-accent": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-accent)" } } }, ".input-info": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-info)" } } }, ".input-success": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-success)" } } }, ".input-warning": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-warning)" } } }, ".input-error": { "@layer daisyui.modifier": { "&, &:focus, &:focus-within": { "--input-color": "var(--color-error)" } } }, ".input-xs": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 6)", "font-size": "max(var(--font-size, 0.6875rem), 0.6875rem)", '&[type="number"]': { "&::-webkit-inner-spin-button": { "margin-block": "calc(0.25rem * -1)", "margin-inline-end": "calc(0.25rem * -3)" } } } }, ".input-sm": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 8)", "font-size": "max(var(--font-size, 0.75rem), 0.75rem)", '&[type="number"]': { "&::-webkit-inner-spin-button": { "margin-block": "calc(0.25rem * -2)", "margin-inline-end": "calc(0.25rem * -3)" } } } }, ".input-md": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 10)", "font-size": "max(var(--font-size, 0.875rem), 0.875rem)", '&[type="number"]': { "&::-webkit-inner-spin-button": { "margin-block": "calc(0.25rem * -3)", "margin-inline-end": "calc(0.25rem * -3)" } } } }, ".input-lg": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 12)", "font-size": "max(var(--font-size, 1.125rem), 1.125rem)", '&[type="number"]': { "&::-webkit-inner-spin-button": { "margin-block": "calc(0.25rem * -3)", "margin-inline-end": "calc(0.25rem * -3)" } } } }, ".input-xl": { "@layer daisyui.modifier": { "--size": "calc(var(--size-field, 0.25rem) * 14)", "font-size": "max(var(--font-size, 1.375rem), 1.375rem)", '&[type="number"]': { "&::-webkit-inner-spin-button": { "margin-block": "calc(0.25rem * -4)", "margin-inline-end": "calc(0.25rem * -3)" } } } } };

// packages/daisyui/components/input/index.js
var input_default = ({ addComponents, prefix = "" }) => {
  const prefixedinput = addPrefix(object_default58, prefix);
  addComponents({ ...prefixedinput });
};

// packages/daisyui/components/timeline/object.js
var object_default59 = { ".timeline": { "@layer daisyui.component": { position: "relative", display: "flex", "> li": { position: "relative", display: "grid", "flex-shrink": 0, "align-items": "center", "grid-template-rows": "var(--timeline-row-start, minmax(0, 1fr)) auto var( --timeline-row-end, minmax(0, 1fr) )", "grid-template-columns": "var(--timeline-col-start, minmax(0, 1fr)) auto var( --timeline-col-end, minmax(0, 1fr) )", "> hr": { border: "none", width: "100%", "&:first-child": { "grid-column-start": "1", "grid-row-start": "2" }, "&:last-child": { "grid-column-start": "3", "grid-column-end": "none", "grid-row-start": "2", "grid-row-end": "auto" }, "@media print": { border: "0.1px solid var(--color-base-300)" } } }, ":where(hr)": { height: "calc(0.25rem * 1)", "background-color": "var(--color-base-300)" }, "&:has(.timeline-middle hr)": { "&:first-child": { "border-start-start-radius": "0", "border-end-start-radius": "0", "border-start-end-radius": "var(--radius-selector)", "border-end-end-radius": "var(--radius-selector)" }, "&:last-child": { "border-start-start-radius": "var(--radius-selector)", "border-end-start-radius": "var(--radius-selector)", "border-start-end-radius": "0", "border-end-end-radius": "0" } }, "&:not(:has(.timeline-middle))": { ":first-child hr:last-child": { "border-start-start-radius": "var(--radius-selector)", "border-end-start-radius": "var(--radius-selector)", "border-start-end-radius": "0", "border-end-end-radius": "0" }, ":last-child hr:first-child": { "border-start-start-radius": "0", "border-end-start-radius": "0", "border-start-end-radius": "var(--radius-selector)", "border-end-end-radius": "var(--radius-selector)" } } } }, ".timeline-box": { "@layer daisyui.component": { border: "var(--border) solid", "border-radius": "var(--radius-box)", "border-color": "var(--color-base-300)", "background-color": "var(--color-base-100)", "padding-inline": "calc(0.25rem * 4)", "padding-block": "calc(0.25rem * 2)", "font-size": "0.75rem", "box-shadow": "0 1px 2px 0 oklch(0% 0 0/0.05)" } }, ".timeline-start": { "@layer daisyui.component": { "grid-column-start": "1", "grid-column-end": "4", "grid-row-start": "1", "grid-row-end": "2", margin: "calc(0.25rem * 1)", "align-self": "flex-end", "justify-self": "center" } }, ".timeline-middle": { "@layer daisyui.component": { "grid-column-start": "2", "grid-row-start": "2" } }, ".timeline-end": { "@layer daisyui.component": { "grid-column-start": "1", "grid-column-end": "4", "grid-row-start": "3", "grid-row-end": "4", margin: "calc(0.25rem * 1)", "align-self": "flex-start", "justify-self": "center" } }, ".timeline-compact": { "@layer daisyui.modifier": { "--timeline-row-start": "0", ".timeline-start": { "grid-column-start": "1", "grid-column-end": "4", "grid-row-start": "3", "grid-row-end": "4", "align-self": "flex-start", "justify-self": "center" }, "li:has(.timeline-start)": { ".timeline-end": { "grid-column-start": "none", "grid-row-start": "auto" } }, "&.timeline-vertical": { "> li": { "--timeline-col-start": "0" }, ".timeline-start": { "grid-column-start": "3", "grid-column-end": "4", "grid-row-start": "1", "grid-row-end": "4", "align-self": "center", "justify-self": "flex-start" }, "li:has(.timeline-start)": { ".timeline-end": { "grid-column-start": "auto", "grid-row-start": "none" } } } } }, ".timeline-snap-icon": { "@layer daisyui.modifier": { "> li": { "--timeline-col-start": "0.5rem", "--timeline-row-start": "minmax(0, 1fr)" } } }, ".timeline-vertical": { "@layer daisyui.modifier": { "flex-direction": "column", "> li": { "justify-items": "center", "--timeline-row-start": "minmax(0, 1fr)", "--timeline-row-end": "minmax(0, 1fr)", "> hr": { height: "100%", width: "calc(0.25rem * 1)", "&:first-child": { "grid-column-start": "2", "grid-row-start": "1" }, "&:last-child": { "grid-column-start": "2", "grid-column-end": "auto", "grid-row-start": "3", "grid-row-end": "none" } } }, ".timeline-start": { "grid-column-start": "1", "grid-column-end": "2", "grid-row-start": "1", "grid-row-end": "4", "align-self": "center", "justify-self": "flex-end" }, ".timeline-end": { "grid-column-start": "3", "grid-column-end": "4", "grid-row-start": "1", "grid-row-end": "4", "align-self": "center", "justify-self": "flex-start" }, "&:has(.timeline-middle)": { "> li": { "> hr": { "&:first-child": { "border-top-left-radius": "0", "border-top-right-radius": "0", "border-bottom-right-radius": "var(--radius-selector)", "border-bottom-left-radius": "var(--radius-selector)" }, "&:last-child": { "border-top-left-radius": "var(--radius-selector)", "border-top-right-radius": "var(--radius-selector)", "border-bottom-right-radius": "0", "border-bottom-left-radius": "0" } } } }, "&:not(:has(.timeline-middle))": { ":first-child": { "> hr:last-child": { "border-top-left-radius": "var(--radius-selector)", "border-top-right-radius": "var(--radius-selector)", "border-bottom-right-radius": "0", "border-bottom-left-radius": "0" } }, ":last-child": { "> hr:first-child": { "border-top-left-radius": "0", "border-top-right-radius": "0", "border-bottom-right-radius": "var(--radius-selector)", "border-bottom-left-radius": "var(--radius-selector)" } } }, "&.timeline-snap-icon": { "> li": { "--timeline-col-start": "minmax(0, 1fr)", "--timeline-row-start": "0.5rem" } } } }, ".timeline-horizontal": { "@layer daisyui.modifier": { "flex-direction": "row", "> li": { "align-items": "center", "> hr": { height: "calc(0.25rem * 1)", width: "100%", "&:first-child": { "grid-column-start": "1", "grid-row-start": "2" }, "&:last-child": { "grid-column-start": "3", "grid-column-end": "none", "grid-row-start": "2", "grid-row-end": "auto" } } }, ".timeline-start": { "grid-column-start": "1", "grid-column-end": "4", "grid-row-start": "1", "grid-row-end": "2", "align-self": "flex-end", "justify-self": "center" }, ".timeline-end": { "grid-column-start": "1", "grid-column-end": "4", "grid-row-start": "3", "grid-row-end": "4", "align-self": "flex-start", "justify-self": "center" }, "&:has(.timeline-middle)": { "> li": { "> hr": { "&:first-child": { "border-start-start-radius": "0", "border-end-start-radius": "0", "border-start-end-radius": "var(--radius-selector)", "border-end-end-radius": "var(--radius-selector)" }, "&:last-child": { "border-start-start-radius": "var(--radius-selector)", "border-end-start-radius": "var(--radius-selector)", "border-start-end-radius": "0", "border-end-end-radius": "0" } } } }, "&:not(:has(.timeline-middle))": { ":first-child": { "> hr:last-child": { "border-start-start-radius": "var(--radius-selector)", "border-end-start-radius": "var(--radius-selector)", "border-start-end-radius": "0", "border-end-end-radius": "0" } }, ":last-child": { "> hr:first-child": { "border-start-start-radius": "0", "border-end-start-radius": "0", "border-start-end-radius": "var(--radius-selector)", "border-end-end-radius": "var(--radius-selector)" } } } } } };

// packages/daisyui/components/timeline/index.js
var timeline_default = ({ addComponents, prefix = "" }) => {
  const prefixedtimeline = addPrefix(object_default59, prefix);
  addComponents({ ...prefixedtimeline });
};

// packages/daisyui/components/chat/object.js
var object_default60 = { ".chat": { "@layer daisyui.component": { display: "grid", "column-gap": "calc(0.25rem * 3)", "padding-block": "calc(0.25rem * 1)", "--mask-chat": `url("data:image/svg+xml,%3csvg width='13' height='13' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 11.5004C0 13.0004 2 13.0004 2 13.0004H12H13V0.00036329L12.5 0C12.5 0 11.977 2.09572 11.8581 2.50033C11.6075 3.35237 10.9149 4.22374 9 5.50036C6 7.50036 0 10.0004 0 11.5004Z'/%3e%3c/svg%3e")` } }, ".chat-bubble": { "@layer daisyui.component": { position: "relative", display: "block", width: "fit-content", "border-radius": "var(--radius-field)", "background-color": "var(--color-base-300)", "padding-inline": "calc(0.25rem * 4)", "padding-block": "calc(0.25rem * 2)", color: "var(--color-base-content)", "grid-row-end": "3", "min-height": "2rem", "min-width": "2.5rem", "max-width": "90%", "&:before": { position: "absolute", bottom: "calc(0.25rem * 0)", height: "calc(0.25rem * 3)", width: "calc(0.25rem * 3)", "background-color": "inherit", content: '""', "mask-repeat": "no-repeat", "mask-image": "var(--mask-chat)", "mask-position": "0px -1px", "mask-size": "0.8125rem" } } }, ".chat-bubble-primary": { "@layer daisyui.modifier": { "background-color": "var(--color-primary)", color: "var(--color-primary-content)" } }, ".chat-bubble-secondary": { "@layer daisyui.modifier": { "background-color": "var(--color-secondary)", color: "var(--color-secondary-content)" } }, ".chat-bubble-accent": { "@layer daisyui.modifier": { "background-color": "var(--color-accent)", color: "var(--color-accent-content)" } }, ".chat-bubble-neutral": { "@layer daisyui.modifier": { "background-color": "var(--color-neutral)", color: "var(--color-neutral-content)" } }, ".chat-bubble-info": { "@layer daisyui.modifier": { "background-color": "var(--color-info)", color: "var(--color-info-content)" } }, ".chat-bubble-success": { "@layer daisyui.modifier": { "background-color": "var(--color-success)", color: "var(--color-success-content)" } }, ".chat-bubble-warning": { "@layer daisyui.modifier": { "background-color": "var(--color-warning)", color: "var(--color-warning-content)" } }, ".chat-bubble-error": { "@layer daisyui.modifier": { "background-color": "var(--color-error)", color: "var(--color-error-content)" } }, ".chat-image": { "@layer daisyui.component": { "grid-row": "span 2 / span 2", "align-self": "flex-end" } }, ".chat-header": { "@layer daisyui.component": { "grid-row-start": "1", display: "flex", gap: "calc(0.25rem * 1)", "font-size": "0.6875rem" } }, ".chat-footer": { "@layer daisyui.component": { "grid-row-start": "3", display: "flex", gap: "calc(0.25rem * 1)", "font-size": "0.6875rem" } }, ".chat-start": { "@layer daisyui.modifier": { "place-items": "start", "grid-template-columns": "auto 1fr", ".chat-header": { "grid-column-start": "2" }, ".chat-footer": { "grid-column-start": "2" }, ".chat-image": { "grid-column-start": "1" }, ".chat-bubble": { "grid-column-start": "2", "border-end-start-radius": "0", "&:before": { transform: "rotateY(0deg)", "inset-inline-start": "-0.75rem" }, '[dir="rtl"] &:before': { transform: "rotateY(180deg)" } } } }, ".chat-end": { "@layer daisyui.modifier": { "place-items": "end", "grid-template-columns": "1fr auto", ".chat-header": { "grid-column-start": "1" }, ".chat-footer": { "grid-column-start": "1" }, ".chat-image": { "grid-column-start": "2" }, ".chat-bubble": { "grid-column-start": "1", "border-end-end-radius": "0", "&:before": { transform: "rotateY(180deg)", "inset-inline-start": "100%" }, '[dir="rtl"] &:before': { transform: "rotateY(0deg)" } } } } };

// packages/daisyui/components/chat/index.js
var chat_default = ({ addComponents, prefix = "" }) => {
  const prefixedchat = addPrefix(object_default60, prefix);
  addComponents({ ...prefixedchat });
};

// packages/daisyui/components/range/object.js
var object_default61 = { ".range": { "@layer daisyui.component": { appearance: "none", "webkit-appearance": "none", "--range-thumb": "var(--color-base-100)", "--range-thumb-size": "calc(var(--size-selector, 0.25rem) * 6)", "--range-progress": "currentColor", "--range-fill": "1", "--range-p": "0.25rem", "--range-bg": "color-mix(in oklab, currentColor 10%, #0000)", cursor: "pointer", overflow: "hidden", "background-color": "transparent", "vertical-align": "middle", width: "clamp(3rem, 20rem, 100%)", "--radius-selector-max": `calc(
      var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
    )`, "border-radius": "calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)))", border: "none", height: "var(--range-thumb-size)", '[dir="rtl"] &': { "--range-dir": "-1" }, "&:focus": { outline: "none" }, "&:focus-visible": { outline: "2px solid", "outline-offset": "2px" }, "&::-webkit-slider-runnable-track": { width: "100%", "background-color": "var(--range-bg)", "border-radius": "var(--radius-selector)", height: "calc(var(--range-thumb-size) * 0.5)" }, "@media (forced-colors: active)": [{ "&::-webkit-slider-runnable-track": { border: "1px solid" } }, { "&::-moz-range-track": { border: "1px solid" } }], "&::-webkit-slider-thumb": { position: "relative", "box-sizing": "border-box", "border-radius": "calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)))", "background-color": "currentColor", height: "var(--range-thumb-size)", width: "var(--range-thumb-size)", border: "var(--range-p) solid", appearance: "none", "webkit-appearance": "none", top: "50%", color: "var(--range-progress)", transform: "translateY(-50%)", "box-shadow": "0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill))" }, "&::-moz-range-track": { width: "100%", "background-color": "var(--range-bg)", "border-radius": "var(--radius-selector)", height: "calc(var(--range-thumb-size) * 0.5)" }, "&::-moz-range-thumb": { position: "relative", "box-sizing": "border-box", "border-radius": "calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)))", "background-color": "currentColor", height: "var(--range-thumb-size)", width: "var(--range-thumb-size)", border: "var(--range-p) solid", top: "50%", color: "var(--range-progress)", "box-shadow": "0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill))" }, "&:disabled": { cursor: "not-allowed", opacity: "30%" } } }, ".range-primary": { "@layer daisyui.modifier": { color: "var(--color-primary)", "--range-thumb": "var(--color-primary-content)" } }, ".range-secondary": { "@layer daisyui.modifier": { color: "var(--color-secondary)", "--range-thumb": "var(--color-secondary-content)" } }, ".range-accent": { "@layer daisyui.modifier": { color: "var(--color-accent)", "--range-thumb": "var(--color-accent-content)" } }, ".range-neutral": { "@layer daisyui.modifier": { color: "var(--color-neutral)", "--range-thumb": "var(--color-neutral-content)" } }, ".range-success": { "@layer daisyui.modifier": { color: "var(--color-success)", "--range-thumb": "var(--color-success-content)" } }, ".range-warning": { "@layer daisyui.modifier": { color: "var(--color-warning)", "--range-thumb": "var(--color-warning-content)" } }, ".range-info": { "@layer daisyui.modifier": { color: "var(--color-info)", "--range-thumb": "var(--color-info-content)" } }, ".range-error": { "@layer daisyui.modifier": { color: "var(--color-error)", "--range-thumb": "var(--color-error-content)" } }, ".range-xs": { "@layer daisyui.modifier": { "--range-thumb-size": "calc(var(--size-selector, 0.25rem) * 4)" } }, ".range-sm": { "@layer daisyui.modifier": { "--range-thumb-size": "calc(var(--size-selector, 0.25rem) * 5)" } }, ".range-md": { "@layer daisyui.modifier": { "--range-thumb-size": "calc(var(--size-selector, 0.25rem) * 6)" } }, ".range-lg": { "@layer daisyui.modifier": { "--range-thumb-size": "calc(var(--size-selector, 0.25rem) * 7)" } }, ".range-xl": { "@layer daisyui.modifier": { "--range-thumb-size": "calc(var(--size-selector, 0.25rem) * 8)" } } };

// packages/daisyui/components/range/index.js
var range_default = ({ addComponents, prefix = "" }) => {
  const prefixedrange = addPrefix(object_default61, prefix);
  addComponents({ ...prefixedrange });
};

// packages/daisyui/components/progress/object.js
var object_default62 = { ".progress": { "@layer daisyui.component": { position: "relative", height: "calc(0.25rem * 2)", width: "100%", appearance: "none", overflow: "hidden", "border-radius": "var(--radius-box)", "background-color": "color-mix(in oklab, currentcolor 20%, transparent)", color: "var(--color-base-content)", "&:indeterminate": { "background-image": "repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% )", "background-size": "200%", "background-position-x": "15%", "@media (prefers-reduced-motion: no-preference)": { animation: "progress 5s ease-in-out infinite" }, "@supports (-moz-appearance: none)": { "&::-moz-progress-bar": { "background-color": "transparent", "@media (prefers-reduced-motion: no-preference)": { animation: "progress 5s ease-in-out infinite", "background-image": "repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% )", "background-size": "200%", "background-position-x": "15%" } } } }, "@supports (-moz-appearance: none)": { "&::-moz-progress-bar": { "border-radius": "var(--radius-box)", "background-color": "currentcolor" } }, "@supports (-webkit-appearance: none)": { "&::-webkit-progress-bar": { "border-radius": "var(--radius-box)", "background-color": "transparent" }, "&::-webkit-progress-value": { "border-radius": "var(--radius-box)", "background-color": "currentColor" } } } }, ".progress-primary": { "@layer daisyui.modifier": { color: "var(--color-primary)" } }, ".progress-secondary": { "@layer daisyui.modifier": { color: "var(--color-secondary)" } }, ".progress-accent": { "@layer daisyui.modifier": { color: "var(--color-accent)" } }, ".progress-neutral": { "@layer daisyui.modifier": { color: "var(--color-neutral)" } }, ".progress-info": { "@layer daisyui.modifier": { color: "var(--color-info)" } }, ".progress-success": { "@layer daisyui.modifier": { color: "var(--color-success)" } }, ".progress-warning": { "@layer daisyui.modifier": { color: "var(--color-warning)" } }, ".progress-error": { "@layer daisyui.modifier": { color: "var(--color-error)" } }, "@keyframes progress": { "50%": { "background-position-x": "-115%" } } };

// packages/daisyui/components/progress/index.js
var progress_default = ({ addComponents, prefix = "" }) => {
  const prefixedprogress = addPrefix(object_default62, prefix);
  addComponents({ ...prefixedprogress });
};

// packages/daisyui/components/swap/object.js
var object_default63 = { ".swap": { "@layer daisyui.component": { position: "relative", display: "inline-grid", cursor: "pointer", "place-content": "center", "vertical-align": "middle", "webkit-user-select": "none", "user-select": "none", input: { appearance: "none", border: "none" }, "> *": { "grid-column-start": "1", "grid-row-start": "1", "@media (prefers-reduced-motion: no-preference)": { "transition-property": "transform, rotate, opacity", "transition-duration": "0.2s", "transition-timing-function": "cubic-bezier(0, 0, 0.2, 1)" } }, ".swap-on, .swap-indeterminate, input:indeterminate ~ .swap-on": { opacity: "0%" }, "input:is(:checked, :indeterminate)": { "& ~ .swap-off": { opacity: "0%" } }, "input:checked ~ .swap-on, input:indeterminate ~ .swap-indeterminate": { opacity: "100%", "backface-visibility": "visible" } } }, ".swap-active": { "@layer daisyui.modifier": { ".swap-off": { opacity: "0%" }, ".swap-on": { opacity: "100%" } } }, ".swap-rotate": { "@layer daisyui.modifier": { ".swap-on, input:indeterminate ~ .swap-on": { rotate: "45deg" }, "input:is(:checked, :indeterminate) ~ .swap-on, &.swap-active .swap-on": { rotate: "0deg" }, "input:is(:checked, :indeterminate) ~ .swap-off, &.swap-active .swap-off": { rotate: "calc(45deg * -1)" } } }, ".swap-flip": { "@layer daisyui.modifier": { "transform-style": "preserve-3d", perspective: "20rem", ".swap-on, .swap-indeterminate, input:indeterminate ~ .swap-on": { transform: "rotateY(180deg)", "backface-visibility": "hidden" }, "input:is(:checked, :indeterminate) ~ .swap-on, &.swap-active .swap-on": { transform: "rotateY(0deg)" }, "input:is(:checked, :indeterminate) ~ .swap-off, &.swap-active .swap-off": { transform: "rotateY(-180deg)", "backface-visibility": "hidden", opacity: "100%" } } } };

// packages/daisyui/components/swap/index.js
var swap_default = ({ addComponents, prefix = "" }) => {
  const prefixedswap = addPrefix(object_default63, prefix);
  addComponents({ ...prefixedswap });
};

// packages/daisyui/utilities/glass/object.js
var object_default64 = { ".glass": { border: "none", "backdrop-filter": "blur(var(--glass-blur, 40px))", "background-color": "#0000", "background-image": "linear-gradient( 135deg, oklch(100% 0 0 / var(--glass-opacity, 30%)) 0%, oklch(0% 0 0 / 0%) 100% ), linear-gradient( var(--glass-reflect-degree, 100deg), oklch(100% 0 0 / var(--glass-reflect-opacity, 5%)) 25%, oklch(0% 0 0 / 0%) 25% )", "box-shadow": "0 0 0 1px oklch(100% 0 0 / var(--glass-border-opacity, 20%)) inset, 0 0 0 2px oklch(0% 0 0 / 5%)", "text-shadow": "0 1px oklch(0% 0 0 / var(--glass-text-shadow-opacity, 5%))" } };

// packages/daisyui/utilities/glass/index.js
var glass_default = ({ addUtilities, prefix = "" }) => {
  const prefixedglass = addPrefix(object_default64, prefix);
  addUtilities({ ...prefixedglass });
};

// packages/daisyui/utilities/join/object.js
var object_default65 = { ".join": { display: "inline-flex", "align-items": "stretch", "--join-ss": "0", "--join-se": "0", "--join-es": "0", "--join-ee": "0", ":where(.join-item)": { "border-start-start-radius": "var(--join-ss, 0)", "border-start-end-radius": "var(--join-se, 0)", "border-end-start-radius": "var(--join-es, 0)", "border-end-end-radius": "var(--join-ee, 0)", "*": { "--join-ss": "var(--radius-field)", "--join-se": "var(--radius-field)", "--join-es": "var(--radius-field)", "--join-ee": "var(--radius-field)" } }, "> .join-item:where(:first-child)": { "--join-ss": "var(--radius-field)", "--join-se": "0", "--join-es": "var(--radius-field)", "--join-ee": "0" }, ":first-child:not(:last-child)": { ":where(.join-item)": { "--join-ss": "var(--radius-field)", "--join-se": "0", "--join-es": "var(--radius-field)", "--join-ee": "0" } }, "> .join-item:where(:last-child)": { "--join-ss": "0", "--join-se": "var(--radius-field)", "--join-es": "0", "--join-ee": "var(--radius-field)" }, ":last-child:not(:first-child)": { ":where(.join-item)": { "--join-ss": "0", "--join-se": "var(--radius-field)", "--join-es": "0", "--join-ee": "var(--radius-field)" } }, "> .join-item:where(:only-child)": { "--join-ss": "var(--radius-field)", "--join-se": "var(--radius-field)", "--join-es": "var(--radius-field)", "--join-ee": "var(--radius-field)" }, ":only-child": { ":where(.join-item)": { "--join-ss": "var(--radius-field)", "--join-se": "var(--radius-field)", "--join-es": "var(--radius-field)", "--join-ee": "var(--radius-field)" } } }, ".join-item": { "&:where(*:not(:first-child, :disabled, [disabled], .btn-disabled))": { "margin-inline-start": "calc(var(--border, 1px) * -1)", "margin-block-start": "0" }, "&:where(*:is(:disabled, [disabled], .btn-disabled))": { "border-width": "var(--border, 1px) 0 var(--border, 1px) var(--border, 1px)" } }, ".join-vertical": { "flex-direction": "column", "> .join-item:first-child": { "--join-ss": "var(--radius-field)", "--join-se": "var(--radius-field)", "--join-es": "0", "--join-ee": "0" }, ":first-child:not(:last-child)": { ".join-item": { "--join-ss": "var(--radius-field)", "--join-se": "var(--radius-field)", "--join-es": "0", "--join-ee": "0" } }, "> .join-item:last-child": { "--join-ss": "0", "--join-se": "0", "--join-es": "var(--radius-field)", "--join-ee": "var(--radius-field)" }, ":last-child:not(:first-child)": { ".join-item": { "--join-ss": "0", "--join-se": "0", "--join-es": "var(--radius-field)", "--join-ee": "var(--radius-field)" } }, "> .join-item:only-child": { "--join-ss": "var(--radius-field)", "--join-se": "var(--radius-field)", "--join-es": "var(--radius-field)", "--join-ee": "var(--radius-field)" }, ":only-child": { ".join-item": { "--join-ss": "var(--radius-field)", "--join-se": "var(--radius-field)", "--join-es": "var(--radius-field)", "--join-ee": "var(--radius-field)" } }, ".join-item": { "&:where(*:not(:first-child))": { "margin-inline-start": "0", "margin-block-start": "calc(var(--border, 1px) * -1)" } } }, ".join-horizontal": { "flex-direction": "row", "> .join-item:first-child": { "--join-ss": "var(--radius-field)", "--join-se": "0", "--join-es": "var(--radius-field)", "--join-ee": "0" }, ":first-child:not(:last-child)": { ".join-item": { "--join-ss": "var(--radius-field)", "--join-se": "0", "--join-es": "var(--radius-field)", "--join-ee": "0" } }, "> .join-item:last-child": { "--join-ss": "0", "--join-se": "var(--radius-field)", "--join-es": "0", "--join-ee": "var(--radius-field)" }, ":last-child:not(:first-child)": { ".join-item": { "--join-ss": "0", "--join-se": "var(--radius-field)", "--join-es": "0", "--join-ee": "var(--radius-field)" } }, "> .join-item:only-child": { "--join-ss": "var(--radius-field)", "--join-se": "var(--radius-field)", "--join-es": "var(--radius-field)", "--join-ee": "var(--radius-field)" }, ":only-child": { ".join-item": { "--join-ss": "var(--radius-field)", "--join-se": "var(--radius-field)", "--join-es": "var(--radius-field)", "--join-ee": "var(--radius-field)" } }, ".join-item": { "&:where(*:not(:first-child))": { "margin-inline-start": "calc(var(--border, 1px) * -1)", "margin-block-start": "0" } } } };

// packages/daisyui/utilities/join/index.js
var join_default = ({ addUtilities, prefix = "" }) => {
  const prefixedjoin = addPrefix(object_default65, prefix);
  addUtilities({ ...prefixedjoin });
};

// packages/daisyui/utilities/typography/object.js
var object_default66 = { ":root .prose": { "--tw-prose-body": "color-mix(in oklab, var(--color-base-content) 80%, #0000)", "--tw-prose-headings": "var(--color-base-content)", "--tw-prose-lead": "var(--color-base-content)", "--tw-prose-links": "var(--color-base-content)", "--tw-prose-bold": "var(--color-base-content)", "--tw-prose-counters": "var(--color-base-content)", "--tw-prose-bullets": "color-mix(in oklab, var(--color-base-content) 50%, #0000)", "--tw-prose-hr": "color-mix(in oklab, var(--color-base-content) 20%, #0000)", "--tw-prose-quotes": "var(--color-base-content)", "--tw-prose-quote-borders": "color-mix(in oklab, var(--color-base-content) 20%, #0000)", "--tw-prose-captions": "color-mix(in oklab, var(--color-base-content) 50%, #0000)", "--tw-prose-code": "var(--color-base-content)", "--tw-prose-pre-code": "var(--color-neutral-content)", "--tw-prose-pre-bg": "var(--color-neutral)", "--tw-prose-th-borders": "color-mix(in oklab, var(--color-base-content) 50%, #0000)", "--tw-prose-td-borders": "color-mix(in oklab, var(--color-base-content) 20%, #0000)", "--tw-prose-kbd": "color-mix(in oklab, var(--color-base-content) 80%, #0000)", ":where(code):not(pre > code)": { "background-color": "var(--color-base-200)", "border-radius": "var(--radius-selector)", border: "var(--border) solid var(--color-base-300)", "padding-inline": "0.5em", "font-weight": "inherit", "&:before, &:after": { display: "none" } } } };

// packages/daisyui/utilities/typography/index.js
var typography_default = ({ addUtilities, prefix = "" }) => {
  const prefixedtypography = addPrefix(object_default66, prefix);
  addUtilities({ ...prefixedtypography });
};

// packages/daisyui/utilities/radius/object.js
var object_default67 = { ".rounded-box": { "border-radius": "var(--radius-box)" }, ".rounded-field": { "border-radius": "var(--radius-field)" }, ".rounded-selector": { "border-radius": "var(--radius-selector)" }, ".rounded-t-box": { "border-top-left-radius": "var(--radius-box)", "border-top-right-radius": "var(--radius-box)" }, ".rounded-b-box": { "border-bottom-left-radius": "var(--radius-box)", "border-bottom-right-radius": "var(--radius-box)" }, ".rounded-l-box": { "border-top-left-radius": "var(--radius-box)", "border-bottom-left-radius": "var(--radius-box)" }, ".rounded-r-box": { "border-top-right-radius": "var(--radius-box)", "border-bottom-right-radius": "var(--radius-box)" }, ".rounded-tl-box": { "border-top-left-radius": "var(--radius-box)" }, ".rounded-tr-box": { "border-top-right-radius": "var(--radius-box)" }, ".rounded-br-box": { "border-bottom-right-radius": "var(--radius-box)" }, ".rounded-bl-box": { "border-bottom-left-radius": "var(--radius-box)" }, ".rounded-t-field": { "border-top-left-radius": "var(--radius-field)", "border-top-right-radius": "var(--radius-field)" }, ".rounded-b-field": { "border-bottom-left-radius": "var(--radius-field)", "border-bottom-right-radius": "var(--radius-field)" }, ".rounded-l-field": { "border-top-left-radius": "var(--radius-field)", "border-bottom-left-radius": "var(--radius-field)" }, ".rounded-r-field": { "border-top-right-radius": "var(--radius-field)", "border-bottom-right-radius": "var(--radius-field)" }, ".rounded-tl-field": { "border-top-left-radius": "var(--radius-field)" }, ".rounded-tr-field": { "border-top-right-radius": "var(--radius-field)" }, ".rounded-br-field": { "border-bottom-right-radius": "var(--radius-field)" }, ".rounded-bl-field": { "border-bottom-left-radius": "var(--radius-field)" }, ".rounded-t-selector": { "border-top-left-radius": "var(--radius-selector)", "border-top-right-radius": "var(--radius-selector)" }, ".rounded-b-selector": { "border-bottom-left-radius": "var(--radius-selector)", "border-bottom-right-radius": "var(--radius-selector)" }, ".rounded-l-selector": { "border-top-left-radius": "var(--radius-selector)", "border-bottom-left-radius": "var(--radius-selector)" }, ".rounded-r-selector": { "border-top-right-radius": "var(--radius-selector)", "border-bottom-right-radius": "var(--radius-selector)" }, ".rounded-tl-selector": { "border-top-left-radius": "var(--radius-selector)" }, ".rounded-tr-selector": { "border-top-right-radius": "var(--radius-selector)" }, ".rounded-br-selector": { "border-bottom-right-radius": "var(--radius-selector)" }, ".rounded-bl-selector": { "border-bottom-left-radius": "var(--radius-selector)" } };

// packages/daisyui/utilities/radius/index.js
var radius_default = ({ addUtilities, prefix = "" }) => {
  const prefixedradius = addPrefix(object_default67, prefix);
  addUtilities({ ...prefixedradius });
};

// packages/daisyui/imports.js
var base = { svg: svg_default, scrollbar: scrollbar_default, properties: properties_default, rootscrolllock: rootscrolllock_default, rootscrollgutter: rootscrollgutter_default, rootcolor: rootcolor_default };
var components = { textarea: textarea_default, rating: rating_default, calendar: calendar_default, dropdown: dropdown_default, tab: tab_default, fileinput: fileinput_default, modal: modal_default, radialprogress: radialprogress_default, checkbox: checkbox_default, select: select_default, radio: radio_default, avatar: avatar_default, toast: toast_default, carousel: carousel_default, mockup: mockup_default, divider: divider_default, button: button_default, fieldset: fieldset_default, steps: steps_default, navbar: navbar_default, stat: stat_default, countdown: countdown_default, skeleton: skeleton_default, card: card_default, drawer: drawer_default, indicator: indicator_default, footer: footer_default, loading: loading_default, menu: menu_default, toggle: toggle_default, badge: badge_default, link: link_default, validator: validator_default, list: list_default, tooltip: tooltip_default, table: table_default, hero: hero_default, breadcrumbs: breadcrumbs_default, collapse: collapse_default, stack: stack_default, diff: diff_default, filter: filter_default, dock: dock_default, mask: mask_default, label: label_default, status: status_default, hovergallery: hovergallery_default, alert: alert_default, fab: fab_default, kbd: kbd_default, input: input_default, timeline: timeline_default, chat: chat_default, range: range_default, progress: progress_default, swap: swap_default };
var utilities = { glass: glass_default, join: join_default, typography: typography_default, radius: radius_default };

// packages/daisyui/index.js
var version = "5.3.7";
var daisyui_default = plugin.withOptions((options) => {
  return ({ addBase, addComponents, addUtilities, addVariant }) => {
    const {
      include,
      exclude,
      prefix = ""
    } = pluginOptionsHandler(options, addBase, object_default, version);
    const shouldIncludeItem = (name) => {
      if (include && exclude) {
        return include.includes(name) && !exclude.includes(name);
      }
      if (include) {
        return include.includes(name);
      }
      if (exclude) {
        return !exclude.includes(name);
      }
      return true;
    };
    Object.entries(base).forEach(([name, item]) => {
      if (!shouldIncludeItem(name))
        return;
      item({ addBase, prefix });
    });
    Object.entries(components).forEach(([name, item]) => {
      if (!shouldIncludeItem(name))
        return;
      item({ addComponents, prefix });
    });
    Object.entries(utilities).forEach(([name, item]) => {
      if (!shouldIncludeItem(name))
        return;
      item({ addUtilities, prefix });
    });
    addVariant("is-drawer-close", "&:where(.drawer-toggle:not(:checked) ~ .drawer-side, .drawer-toggle:not(:checked) ~ .drawer-side *)");
    addVariant("is-drawer-open", "&:where(.drawer-toggle:checked ~ .drawer-side, .drawer-toggle:checked ~ .drawer-side *)");
  };
}, () => ({
  theme: {
    extend: variables_default
  }
}));
export {
  daisyui_default as default
};


/*
    
  MIT License
    
  Copyright (c) 2020 Pouya Saadeghi – https://daisyui.com
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
    
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
    
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

===== END app/assets/tailwind/daisyui.mjs =====

===== BEGIN app/assets/tailwind/daisyui-theme.mjs =====
/** 🌼
 *  @license MIT
 *  daisyUI bundle
 *  https://daisyui.com/
 */

// packages/daisyui/functions/plugin.js
var plugin = {
  withOptions: (pluginFunction, configFunction = () => ({})) => {
    const optionsFunction = (options) => {
      const handler = pluginFunction(options);
      const config = configFunction(options);
      return { handler, config };
    };
    optionsFunction.__isOptionsFunction = true;
    return optionsFunction;
  }
};

// packages/daisyui/theme/object.js
var object_default = { light: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(98% 0 0)", "--color-base-300": "oklch(95% 0 0)", "--color-base-content": "oklch(21% 0.006 285.885)", "--color-primary": "oklch(45% 0.24 277.023)", "--color-primary-content": "oklch(93% 0.034 272.788)", "--color-secondary": "oklch(65% 0.241 354.308)", "--color-secondary-content": "oklch(94% 0.028 342.258)", "--color-accent": "oklch(77% 0.152 181.912)", "--color-accent-content": "oklch(38% 0.063 188.416)", "--color-neutral": "oklch(14% 0.005 285.823)", "--color-neutral-content": "oklch(92% 0.004 286.32)", "--color-info": "oklch(74% 0.16 232.661)", "--color-info-content": "oklch(29% 0.066 243.157)", "--color-success": "oklch(76% 0.177 163.223)", "--color-success-content": "oklch(37% 0.077 168.94)", "--color-warning": "oklch(82% 0.189 84.429)", "--color-warning-content": "oklch(41% 0.112 45.904)", "--color-error": "oklch(71% 0.194 13.428)", "--color-error-content": "oklch(27% 0.105 12.094)", "--radius-selector": "0.5rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, synthwave: { "color-scheme": "dark", "--color-base-100": "oklch(15% 0.09 281.288)", "--color-base-200": "oklch(20% 0.09 281.288)", "--color-base-300": "oklch(25% 0.09 281.288)", "--color-base-content": "oklch(78% 0.115 274.713)", "--color-primary": "oklch(71% 0.202 349.761)", "--color-primary-content": "oklch(28% 0.109 3.907)", "--color-secondary": "oklch(82% 0.111 230.318)", "--color-secondary-content": "oklch(29% 0.066 243.157)", "--color-accent": "oklch(75% 0.183 55.934)", "--color-accent-content": "oklch(26% 0.079 36.259)", "--color-neutral": "oklch(45% 0.24 277.023)", "--color-neutral-content": "oklch(87% 0.065 274.039)", "--color-info": "oklch(74% 0.16 232.661)", "--color-info-content": "oklch(29% 0.066 243.157)", "--color-success": "oklch(77% 0.152 181.912)", "--color-success-content": "oklch(27% 0.046 192.524)", "--color-warning": "oklch(90% 0.182 98.111)", "--color-warning-content": "oklch(42% 0.095 57.708)", "--color-error": "oklch(73.7% 0.121 32.639)", "--color-error-content": "oklch(23.501% 0.096 290.329)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, emerald: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(93% 0 0)", "--color-base-300": "oklch(86% 0 0)", "--color-base-content": "oklch(35.519% 0.032 262.988)", "--color-primary": "oklch(76.662% 0.135 153.45)", "--color-primary-content": "oklch(33.387% 0.04 162.24)", "--color-secondary": "oklch(61.302% 0.202 261.294)", "--color-secondary-content": "oklch(100% 0 0)", "--color-accent": "oklch(72.772% 0.149 33.2)", "--color-accent-content": "oklch(0% 0 0)", "--color-neutral": "oklch(35.519% 0.032 262.988)", "--color-neutral-content": "oklch(98.462% 0.001 247.838)", "--color-info": "oklch(72.06% 0.191 231.6)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(64.8% 0.15 160)", "--color-success-content": "oklch(0% 0 0)", "--color-warning": "oklch(84.71% 0.199 83.87)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(71.76% 0.221 22.18)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, cupcake: { "color-scheme": "light", "--color-base-100": "oklch(97.788% 0.004 56.375)", "--color-base-200": "oklch(93.982% 0.007 61.449)", "--color-base-300": "oklch(91.586% 0.006 53.44)", "--color-base-content": "oklch(23.574% 0.066 313.189)", "--color-primary": "oklch(85% 0.138 181.071)", "--color-primary-content": "oklch(43% 0.078 188.216)", "--color-secondary": "oklch(89% 0.061 343.231)", "--color-secondary-content": "oklch(45% 0.187 3.815)", "--color-accent": "oklch(90% 0.076 70.697)", "--color-accent-content": "oklch(47% 0.157 37.304)", "--color-neutral": "oklch(27% 0.006 286.033)", "--color-neutral-content": "oklch(92% 0.004 286.32)", "--color-info": "oklch(68% 0.169 237.323)", "--color-info-content": "oklch(29% 0.066 243.157)", "--color-success": "oklch(69% 0.17 162.48)", "--color-success-content": "oklch(26% 0.051 172.552)", "--color-warning": "oklch(79% 0.184 86.047)", "--color-warning-content": "oklch(28% 0.066 53.813)", "--color-error": "oklch(64% 0.246 16.439)", "--color-error-content": "oklch(27% 0.105 12.094)", "--radius-selector": "1rem", "--radius-field": "2rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "2px", "--depth": "1", "--noise": "0" }, dark: { "color-scheme": "dark", "--color-base-100": "oklch(25.33% 0.016 252.42)", "--color-base-200": "oklch(23.26% 0.014 253.1)", "--color-base-300": "oklch(21.15% 0.012 254.09)", "--color-base-content": "oklch(97.807% 0.029 256.847)", "--color-primary": "oklch(58% 0.233 277.117)", "--color-primary-content": "oklch(96% 0.018 272.314)", "--color-secondary": "oklch(65% 0.241 354.308)", "--color-secondary-content": "oklch(94% 0.028 342.258)", "--color-accent": "oklch(77% 0.152 181.912)", "--color-accent-content": "oklch(38% 0.063 188.416)", "--color-neutral": "oklch(14% 0.005 285.823)", "--color-neutral-content": "oklch(92% 0.004 286.32)", "--color-info": "oklch(74% 0.16 232.661)", "--color-info-content": "oklch(29% 0.066 243.157)", "--color-success": "oklch(76% 0.177 163.223)", "--color-success-content": "oklch(37% 0.077 168.94)", "--color-warning": "oklch(82% 0.189 84.429)", "--color-warning-content": "oklch(41% 0.112 45.904)", "--color-error": "oklch(71% 0.194 13.428)", "--color-error-content": "oklch(27% 0.105 12.094)", "--radius-selector": "0.5rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, night: { "color-scheme": "dark", "--color-base-100": "oklch(20.768% 0.039 265.754)", "--color-base-200": "oklch(19.314% 0.037 265.754)", "--color-base-300": "oklch(17.86% 0.034 265.754)", "--color-base-content": "oklch(84.153% 0.007 265.754)", "--color-primary": "oklch(75.351% 0.138 232.661)", "--color-primary-content": "oklch(15.07% 0.027 232.661)", "--color-secondary": "oklch(68.011% 0.158 276.934)", "--color-secondary-content": "oklch(13.602% 0.031 276.934)", "--color-accent": "oklch(72.36% 0.176 350.048)", "--color-accent-content": "oklch(14.472% 0.035 350.048)", "--color-neutral": "oklch(27.949% 0.036 260.03)", "--color-neutral-content": "oklch(85.589% 0.007 260.03)", "--color-info": "oklch(68.455% 0.148 237.251)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(78.452% 0.132 181.911)", "--color-success-content": "oklch(15.69% 0.026 181.911)", "--color-warning": "oklch(83.242% 0.139 82.95)", "--color-warning-content": "oklch(16.648% 0.027 82.95)", "--color-error": "oklch(71.785% 0.17 13.118)", "--color-error-content": "oklch(14.357% 0.034 13.118)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, pastel: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(98.462% 0.001 247.838)", "--color-base-300": "oklch(92.462% 0.001 247.838)", "--color-base-content": "oklch(20% 0 0)", "--color-primary": "oklch(90% 0.063 306.703)", "--color-primary-content": "oklch(49% 0.265 301.924)", "--color-secondary": "oklch(89% 0.058 10.001)", "--color-secondary-content": "oklch(51% 0.222 16.935)", "--color-accent": "oklch(90% 0.093 164.15)", "--color-accent-content": "oklch(50% 0.118 165.612)", "--color-neutral": "oklch(55% 0.046 257.417)", "--color-neutral-content": "oklch(92% 0.013 255.508)", "--color-info": "oklch(86% 0.127 207.078)", "--color-info-content": "oklch(52% 0.105 223.128)", "--color-success": "oklch(87% 0.15 154.449)", "--color-success-content": "oklch(52% 0.154 150.069)", "--color-warning": "oklch(83% 0.128 66.29)", "--color-warning-content": "oklch(55% 0.195 38.402)", "--color-error": "oklch(80% 0.114 19.571)", "--color-error-content": "oklch(50% 0.213 27.518)", "--radius-selector": "1rem", "--radius-field": "2rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "2px", "--depth": "0", "--noise": "0" }, halloween: { "color-scheme": "dark", "--color-base-100": "oklch(21% 0.006 56.043)", "--color-base-200": "oklch(14% 0.004 49.25)", "--color-base-300": "oklch(0% 0 0)", "--color-base-content": "oklch(84.955% 0 0)", "--color-primary": "oklch(77.48% 0.204 60.62)", "--color-primary-content": "oklch(19.693% 0.004 196.779)", "--color-secondary": "oklch(45.98% 0.248 305.03)", "--color-secondary-content": "oklch(89.196% 0.049 305.03)", "--color-accent": "oklch(64.8% 0.223 136.073)", "--color-accent-content": "oklch(0% 0 0)", "--color-neutral": "oklch(24.371% 0.046 65.681)", "--color-neutral-content": "oklch(84.874% 0.009 65.681)", "--color-info": "oklch(54.615% 0.215 262.88)", "--color-info-content": "oklch(90.923% 0.043 262.88)", "--color-success": "oklch(62.705% 0.169 149.213)", "--color-success-content": "oklch(12.541% 0.033 149.213)", "--color-warning": "oklch(66.584% 0.157 58.318)", "--color-warning-content": "oklch(13.316% 0.031 58.318)", "--color-error": "oklch(65.72% 0.199 27.33)", "--color-error-content": "oklch(13.144% 0.039 27.33)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, lofi: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(97% 0 0)", "--color-base-300": "oklch(94% 0 0)", "--color-base-content": "oklch(0% 0 0)", "--color-primary": "oklch(15.906% 0 0)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(21.455% 0.001 17.278)", "--color-secondary-content": "oklch(100% 0 0)", "--color-accent": "oklch(26.861% 0 0)", "--color-accent-content": "oklch(100% 0 0)", "--color-neutral": "oklch(0% 0 0)", "--color-neutral-content": "oklch(100% 0 0)", "--color-info": "oklch(79.54% 0.103 205.9)", "--color-info-content": "oklch(15.908% 0.02 205.9)", "--color-success": "oklch(90.13% 0.153 164.14)", "--color-success-content": "oklch(18.026% 0.03 164.14)", "--color-warning": "oklch(88.37% 0.135 79.94)", "--color-warning-content": "oklch(17.674% 0.027 79.94)", "--color-error": "oklch(78.66% 0.15 28.47)", "--color-error-content": "oklch(15.732% 0.03 28.47)", "--radius-selector": "2rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, garden: { "color-scheme": "light", "--color-base-100": "oklch(92.951% 0.002 17.197)", "--color-base-200": "oklch(86.445% 0.002 17.197)", "--color-base-300": "oklch(79.938% 0.001 17.197)", "--color-base-content": "oklch(16.961% 0.001 17.32)", "--color-primary": "oklch(62.45% 0.278 3.836)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(48.495% 0.11 355.095)", "--color-secondary-content": "oklch(89.699% 0.022 355.095)", "--color-accent": "oklch(56.273% 0.054 154.39)", "--color-accent-content": "oklch(100% 0 0)", "--color-neutral": "oklch(24.155% 0.049 89.07)", "--color-neutral-content": "oklch(92.951% 0.002 17.197)", "--color-info": "oklch(72.06% 0.191 231.6)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(64.8% 0.15 160)", "--color-success-content": "oklch(0% 0 0)", "--color-warning": "oklch(84.71% 0.199 83.87)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(71.76% 0.221 22.18)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, silk: { "color-scheme": "light", "--color-base-100": "oklch(97% 0.0035 67.78)", "--color-base-200": "oklch(95% 0.0081 61.42)", "--color-base-300": "oklch(90% 0.0081 61.42)", "--color-base-content": "oklch(40% 0.0081 61.42)", "--color-primary": "oklch(23.27% 0.0249 284.3)", "--color-primary-content": "oklch(94.22% 0.2505 117.44)", "--color-secondary": "oklch(23.27% 0.0249 284.3)", "--color-secondary-content": "oklch(73.92% 0.2135 50.94)", "--color-accent": "oklch(23.27% 0.0249 284.3)", "--color-accent-content": "oklch(88.92% 0.2061 189.9)", "--color-neutral": "oklch(20% 0 0)", "--color-neutral-content": "oklch(80% 0.0081 61.42)", "--color-info": "oklch(80.39% 0.1148 241.68)", "--color-info-content": "oklch(30.39% 0.1148 241.68)", "--color-success": "oklch(83.92% 0.0901 136.87)", "--color-success-content": "oklch(23.92% 0.0901 136.87)", "--color-warning": "oklch(83.92% 0.1085 80)", "--color-warning-content": "oklch(43.92% 0.1085 80)", "--color-error": "oklch(75.1% 0.1814 22.37)", "--color-error-content": "oklch(35.1% 0.1814 22.37)", "--radius-selector": "2rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "2px", "--depth": "1", "--noise": "0" }, forest: { "color-scheme": "dark", "--color-base-100": "oklch(20.84% 0.008 17.911)", "--color-base-200": "oklch(18.522% 0.007 17.911)", "--color-base-300": "oklch(16.203% 0.007 17.911)", "--color-base-content": "oklch(83.768% 0.001 17.911)", "--color-primary": "oklch(68.628% 0.185 148.958)", "--color-primary-content": "oklch(0% 0 0)", "--color-secondary": "oklch(69.776% 0.135 168.327)", "--color-secondary-content": "oklch(13.955% 0.027 168.327)", "--color-accent": "oklch(70.628% 0.119 185.713)", "--color-accent-content": "oklch(14.125% 0.023 185.713)", "--color-neutral": "oklch(30.698% 0.039 171.364)", "--color-neutral-content": "oklch(86.139% 0.007 171.364)", "--color-info": "oklch(72.06% 0.191 231.6)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(64.8% 0.15 160)", "--color-success-content": "oklch(0% 0 0)", "--color-warning": "oklch(84.71% 0.199 83.87)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(71.76% 0.221 22.18)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "1rem", "--radius-field": "2rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, corporate: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(93% 0 0)", "--color-base-300": "oklch(86% 0 0)", "--color-base-content": "oklch(22.389% 0.031 278.072)", "--color-primary": "oklch(58% 0.158 241.966)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(55% 0.046 257.417)", "--color-secondary-content": "oklch(100% 0 0)", "--color-accent": "oklch(60% 0.118 184.704)", "--color-accent-content": "oklch(100% 0 0)", "--color-neutral": "oklch(0% 0 0)", "--color-neutral-content": "oklch(100% 0 0)", "--color-info": "oklch(60% 0.126 221.723)", "--color-info-content": "oklch(100% 0 0)", "--color-success": "oklch(62% 0.194 149.214)", "--color-success-content": "oklch(100% 0 0)", "--color-warning": "oklch(85% 0.199 91.936)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(70% 0.191 22.216)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "0.25rem", "--radius-field": "0.25rem", "--radius-box": "0.25rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, caramellatte: { "color-scheme": "light", "--color-base-100": "oklch(98% 0.016 73.684)", "--color-base-200": "oklch(95% 0.038 75.164)", "--color-base-300": "oklch(90% 0.076 70.697)", "--color-base-content": "oklch(40% 0.123 38.172)", "--color-primary": "oklch(0% 0 0)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(22.45% 0.075 37.85)", "--color-secondary-content": "oklch(90% 0.076 70.697)", "--color-accent": "oklch(46.44% 0.111 37.85)", "--color-accent-content": "oklch(90% 0.076 70.697)", "--color-neutral": "oklch(55% 0.195 38.402)", "--color-neutral-content": "oklch(98% 0.016 73.684)", "--color-info": "oklch(42% 0.199 265.638)", "--color-info-content": "oklch(90% 0.076 70.697)", "--color-success": "oklch(43% 0.095 166.913)", "--color-success-content": "oklch(90% 0.076 70.697)", "--color-warning": "oklch(82% 0.189 84.429)", "--color-warning-content": "oklch(41% 0.112 45.904)", "--color-error": "oklch(70% 0.191 22.216)", "--color-error-content": "oklch(39% 0.141 25.723)", "--radius-selector": "2rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "2px", "--depth": "1", "--noise": "1" }, coffee: { "color-scheme": "dark", "--color-base-100": "oklch(24% 0.023 329.708)", "--color-base-200": "oklch(21% 0.021 329.708)", "--color-base-300": "oklch(16% 0.019 329.708)", "--color-base-content": "oklch(72.354% 0.092 79.129)", "--color-primary": "oklch(71.996% 0.123 62.756)", "--color-primary-content": "oklch(14.399% 0.024 62.756)", "--color-secondary": "oklch(34.465% 0.029 199.194)", "--color-secondary-content": "oklch(86.893% 0.005 199.194)", "--color-accent": "oklch(42.621% 0.074 224.389)", "--color-accent-content": "oklch(88.524% 0.014 224.389)", "--color-neutral": "oklch(16.51% 0.015 326.261)", "--color-neutral-content": "oklch(83.302% 0.003 326.261)", "--color-info": "oklch(79.49% 0.063 184.558)", "--color-info-content": "oklch(15.898% 0.012 184.558)", "--color-success": "oklch(74.722% 0.072 131.116)", "--color-success-content": "oklch(14.944% 0.014 131.116)", "--color-warning": "oklch(88.15% 0.14 87.722)", "--color-warning-content": "oklch(17.63% 0.028 87.722)", "--color-error": "oklch(77.318% 0.128 31.871)", "--color-error-content": "oklch(15.463% 0.025 31.871)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, acid: { "color-scheme": "light", "--color-base-100": "oklch(98% 0 0)", "--color-base-200": "oklch(95% 0 0)", "--color-base-300": "oklch(91% 0 0)", "--color-base-content": "oklch(0% 0 0)", "--color-primary": "oklch(71.9% 0.357 330.759)", "--color-primary-content": "oklch(14.38% 0.071 330.759)", "--color-secondary": "oklch(73.37% 0.224 48.25)", "--color-secondary-content": "oklch(14.674% 0.044 48.25)", "--color-accent": "oklch(92.78% 0.264 122.962)", "--color-accent-content": "oklch(18.556% 0.052 122.962)", "--color-neutral": "oklch(21.31% 0.128 278.68)", "--color-neutral-content": "oklch(84.262% 0.025 278.68)", "--color-info": "oklch(60.72% 0.227 252.05)", "--color-info-content": "oklch(12.144% 0.045 252.05)", "--color-success": "oklch(85.72% 0.266 158.53)", "--color-success-content": "oklch(17.144% 0.053 158.53)", "--color-warning": "oklch(91.01% 0.212 100.5)", "--color-warning-content": "oklch(18.202% 0.042 100.5)", "--color-error": "oklch(64.84% 0.293 29.349)", "--color-error-content": "oklch(12.968% 0.058 29.349)", "--radius-selector": "1rem", "--radius-field": "1rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, cyberpunk: { "color-scheme": "light", "--color-base-100": "oklch(94.51% 0.179 104.32)", "--color-base-200": "oklch(91.51% 0.179 104.32)", "--color-base-300": "oklch(85.51% 0.179 104.32)", "--color-base-content": "oklch(0% 0 0)", "--color-primary": "oklch(74.22% 0.209 6.35)", "--color-primary-content": "oklch(14.844% 0.041 6.35)", "--color-secondary": "oklch(83.33% 0.184 204.72)", "--color-secondary-content": "oklch(16.666% 0.036 204.72)", "--color-accent": "oklch(71.86% 0.217 310.43)", "--color-accent-content": "oklch(14.372% 0.043 310.43)", "--color-neutral": "oklch(23.04% 0.065 269.31)", "--color-neutral-content": "oklch(94.51% 0.179 104.32)", "--color-info": "oklch(72.06% 0.191 231.6)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(64.8% 0.15 160)", "--color-success-content": "oklch(0% 0 0)", "--color-warning": "oklch(84.71% 0.199 83.87)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(71.76% 0.221 22.18)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "0rem", "--radius-field": "0rem", "--radius-box": "0rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, aqua: { "color-scheme": "dark", "--color-base-100": "oklch(37% 0.146 265.522)", "--color-base-200": "oklch(28% 0.091 267.935)", "--color-base-300": "oklch(22% 0.091 267.935)", "--color-base-content": "oklch(90% 0.058 230.902)", "--color-primary": "oklch(85.661% 0.144 198.645)", "--color-primary-content": "oklch(40.124% 0.068 197.603)", "--color-secondary": "oklch(60.682% 0.108 309.782)", "--color-secondary-content": "oklch(96% 0.016 293.756)", "--color-accent": "oklch(93.426% 0.102 94.555)", "--color-accent-content": "oklch(18.685% 0.02 94.555)", "--color-neutral": "oklch(27% 0.146 265.522)", "--color-neutral-content": "oklch(80% 0.146 265.522)", "--color-info": "oklch(54.615% 0.215 262.88)", "--color-info-content": "oklch(90.923% 0.043 262.88)", "--color-success": "oklch(62.705% 0.169 149.213)", "--color-success-content": "oklch(12.541% 0.033 149.213)", "--color-warning": "oklch(66.584% 0.157 58.318)", "--color-warning-content": "oklch(27% 0.077 45.635)", "--color-error": "oklch(73.95% 0.19 27.33)", "--color-error-content": "oklch(14.79% 0.038 27.33)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, business: { "color-scheme": "dark", "--color-base-100": "oklch(24.353% 0 0)", "--color-base-200": "oklch(22.648% 0 0)", "--color-base-300": "oklch(20.944% 0 0)", "--color-base-content": "oklch(84.87% 0 0)", "--color-primary": "oklch(41.703% 0.099 251.473)", "--color-primary-content": "oklch(88.34% 0.019 251.473)", "--color-secondary": "oklch(64.092% 0.027 229.389)", "--color-secondary-content": "oklch(12.818% 0.005 229.389)", "--color-accent": "oklch(67.271% 0.167 35.791)", "--color-accent-content": "oklch(13.454% 0.033 35.791)", "--color-neutral": "oklch(27.441% 0.013 253.041)", "--color-neutral-content": "oklch(85.488% 0.002 253.041)", "--color-info": "oklch(62.616% 0.143 240.033)", "--color-info-content": "oklch(12.523% 0.028 240.033)", "--color-success": "oklch(70.226% 0.094 156.596)", "--color-success-content": "oklch(14.045% 0.018 156.596)", "--color-warning": "oklch(77.482% 0.115 81.519)", "--color-warning-content": "oklch(15.496% 0.023 81.519)", "--color-error": "oklch(51.61% 0.146 29.674)", "--color-error-content": "oklch(90.322% 0.029 29.674)", "--radius-selector": "0rem", "--radius-field": "0.25rem", "--radius-box": "0.25rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, fantasy: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(93% 0 0)", "--color-base-300": "oklch(86% 0 0)", "--color-base-content": "oklch(27.807% 0.029 256.847)", "--color-primary": "oklch(37.45% 0.189 325.02)", "--color-primary-content": "oklch(87.49% 0.037 325.02)", "--color-secondary": "oklch(53.92% 0.162 241.36)", "--color-secondary-content": "oklch(90.784% 0.032 241.36)", "--color-accent": "oklch(75.98% 0.204 56.72)", "--color-accent-content": "oklch(15.196% 0.04 56.72)", "--color-neutral": "oklch(27.807% 0.029 256.847)", "--color-neutral-content": "oklch(85.561% 0.005 256.847)", "--color-info": "oklch(72.06% 0.191 231.6)", "--color-info-content": "oklch(0% 0 0)", "--color-success": "oklch(64.8% 0.15 160)", "--color-success-content": "oklch(0% 0 0)", "--color-warning": "oklch(84.71% 0.199 83.87)", "--color-warning-content": "oklch(0% 0 0)", "--color-error": "oklch(71.76% 0.221 22.18)", "--color-error-content": "oklch(0% 0 0)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, bumblebee: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(97% 0 0)", "--color-base-300": "oklch(92% 0 0)", "--color-base-content": "oklch(20% 0 0)", "--color-primary": "oklch(85% 0.199 91.936)", "--color-primary-content": "oklch(42% 0.095 57.708)", "--color-secondary": "oklch(75% 0.183 55.934)", "--color-secondary-content": "oklch(40% 0.123 38.172)", "--color-accent": "oklch(0% 0 0)", "--color-accent-content": "oklch(100% 0 0)", "--color-neutral": "oklch(37% 0.01 67.558)", "--color-neutral-content": "oklch(92% 0.003 48.717)", "--color-info": "oklch(74% 0.16 232.661)", "--color-info-content": "oklch(39% 0.09 240.876)", "--color-success": "oklch(76% 0.177 163.223)", "--color-success-content": "oklch(37% 0.077 168.94)", "--color-warning": "oklch(82% 0.189 84.429)", "--color-warning-content": "oklch(41% 0.112 45.904)", "--color-error": "oklch(70% 0.191 22.216)", "--color-error-content": "oklch(39% 0.141 25.723)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, sunset: { "color-scheme": "dark", "--color-base-100": "oklch(22% 0.019 237.69)", "--color-base-200": "oklch(20% 0.019 237.69)", "--color-base-300": "oklch(18% 0.019 237.69)", "--color-base-content": "oklch(77.383% 0.043 245.096)", "--color-primary": "oklch(74.703% 0.158 39.947)", "--color-primary-content": "oklch(14.94% 0.031 39.947)", "--color-secondary": "oklch(72.537% 0.177 2.72)", "--color-secondary-content": "oklch(14.507% 0.035 2.72)", "--color-accent": "oklch(71.294% 0.166 299.844)", "--color-accent-content": "oklch(14.258% 0.033 299.844)", "--color-neutral": "oklch(26% 0.019 237.69)", "--color-neutral-content": "oklch(70% 0.019 237.69)", "--color-info": "oklch(85.559% 0.085 206.015)", "--color-info-content": "oklch(17.111% 0.017 206.015)", "--color-success": "oklch(85.56% 0.085 144.778)", "--color-success-content": "oklch(17.112% 0.017 144.778)", "--color-warning": "oklch(85.569% 0.084 74.427)", "--color-warning-content": "oklch(17.113% 0.016 74.427)", "--color-error": "oklch(85.511% 0.078 16.886)", "--color-error-content": "oklch(17.102% 0.015 16.886)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, retro: { "color-scheme": "light", "--color-base-100": "oklch(91.637% 0.034 90.515)", "--color-base-200": "oklch(88.272% 0.049 91.774)", "--color-base-300": "oklch(84.133% 0.065 90.856)", "--color-base-content": "oklch(41% 0.112 45.904)", "--color-primary": "oklch(80% 0.114 19.571)", "--color-primary-content": "oklch(39% 0.141 25.723)", "--color-secondary": "oklch(92% 0.084 155.995)", "--color-secondary-content": "oklch(44% 0.119 151.328)", "--color-accent": "oklch(68% 0.162 75.834)", "--color-accent-content": "oklch(41% 0.112 45.904)", "--color-neutral": "oklch(44% 0.011 73.639)", "--color-neutral-content": "oklch(86% 0.005 56.366)", "--color-info": "oklch(58% 0.158 241.966)", "--color-info-content": "oklch(96% 0.059 95.617)", "--color-success": "oklch(51% 0.096 186.391)", "--color-success-content": "oklch(96% 0.059 95.617)", "--color-warning": "oklch(64% 0.222 41.116)", "--color-warning-content": "oklch(96% 0.059 95.617)", "--color-error": "oklch(70% 0.191 22.216)", "--color-error-content": "oklch(40% 0.123 38.172)", "--radius-selector": "0.25rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, nord: { "color-scheme": "light", "--color-base-100": "oklch(95.127% 0.007 260.731)", "--color-base-200": "oklch(93.299% 0.01 261.788)", "--color-base-300": "oklch(89.925% 0.016 262.749)", "--color-base-content": "oklch(32.437% 0.022 264.182)", "--color-primary": "oklch(59.435% 0.077 254.027)", "--color-primary-content": "oklch(11.887% 0.015 254.027)", "--color-secondary": "oklch(69.651% 0.059 248.687)", "--color-secondary-content": "oklch(13.93% 0.011 248.687)", "--color-accent": "oklch(77.464% 0.062 217.469)", "--color-accent-content": "oklch(15.492% 0.012 217.469)", "--color-neutral": "oklch(45.229% 0.035 264.131)", "--color-neutral-content": "oklch(89.925% 0.016 262.749)", "--color-info": "oklch(69.207% 0.062 332.664)", "--color-info-content": "oklch(13.841% 0.012 332.664)", "--color-success": "oklch(76.827% 0.074 131.063)", "--color-success-content": "oklch(15.365% 0.014 131.063)", "--color-warning": "oklch(85.486% 0.089 84.093)", "--color-warning-content": "oklch(17.097% 0.017 84.093)", "--color-error": "oklch(60.61% 0.12 15.341)", "--color-error-content": "oklch(12.122% 0.024 15.341)", "--radius-selector": "1rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, dim: { "color-scheme": "dark", "--color-base-100": "oklch(30.857% 0.023 264.149)", "--color-base-200": "oklch(28.036% 0.019 264.182)", "--color-base-300": "oklch(26.346% 0.018 262.177)", "--color-base-content": "oklch(82.901% 0.031 222.959)", "--color-primary": "oklch(86.133% 0.141 139.549)", "--color-primary-content": "oklch(17.226% 0.028 139.549)", "--color-secondary": "oklch(73.375% 0.165 35.353)", "--color-secondary-content": "oklch(14.675% 0.033 35.353)", "--color-accent": "oklch(74.229% 0.133 311.379)", "--color-accent-content": "oklch(14.845% 0.026 311.379)", "--color-neutral": "oklch(24.731% 0.02 264.094)", "--color-neutral-content": "oklch(82.901% 0.031 222.959)", "--color-info": "oklch(86.078% 0.142 206.182)", "--color-info-content": "oklch(17.215% 0.028 206.182)", "--color-success": "oklch(86.171% 0.142 166.534)", "--color-success-content": "oklch(17.234% 0.028 166.534)", "--color-warning": "oklch(86.163% 0.142 94.818)", "--color-warning-content": "oklch(17.232% 0.028 94.818)", "--color-error": "oklch(82.418% 0.099 33.756)", "--color-error-content": "oklch(16.483% 0.019 33.756)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, winter: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(97.466% 0.011 259.822)", "--color-base-300": "oklch(93.268% 0.016 262.751)", "--color-base-content": "oklch(41.886% 0.053 255.824)", "--color-primary": "oklch(56.86% 0.255 257.57)", "--color-primary-content": "oklch(91.372% 0.051 257.57)", "--color-secondary": "oklch(42.551% 0.161 282.339)", "--color-secondary-content": "oklch(88.51% 0.032 282.339)", "--color-accent": "oklch(59.939% 0.191 335.171)", "--color-accent-content": "oklch(11.988% 0.038 335.171)", "--color-neutral": "oklch(19.616% 0.063 257.651)", "--color-neutral-content": "oklch(83.923% 0.012 257.651)", "--color-info": "oklch(88.127% 0.085 214.515)", "--color-info-content": "oklch(17.625% 0.017 214.515)", "--color-success": "oklch(80.494% 0.077 197.823)", "--color-success-content": "oklch(16.098% 0.015 197.823)", "--color-warning": "oklch(89.172% 0.045 71.47)", "--color-warning-content": "oklch(17.834% 0.009 71.47)", "--color-error": "oklch(73.092% 0.11 20.076)", "--color-error-content": "oklch(14.618% 0.022 20.076)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, abyss: { "color-scheme": "dark", "--color-base-100": "oklch(20% 0.08 209)", "--color-base-200": "oklch(15% 0.08 209)", "--color-base-300": "oklch(10% 0.08 209)", "--color-base-content": "oklch(90% 0.076 70.697)", "--color-primary": "oklch(92% 0.2653 125)", "--color-primary-content": "oklch(50% 0.2653 125)", "--color-secondary": "oklch(83.27% 0.0764 298.3)", "--color-secondary-content": "oklch(43.27% 0.0764 298.3)", "--color-accent": "oklch(43% 0 0)", "--color-accent-content": "oklch(98% 0 0)", "--color-neutral": "oklch(30% 0.08 209)", "--color-neutral-content": "oklch(90% 0.076 70.697)", "--color-info": "oklch(74% 0.16 232.661)", "--color-info-content": "oklch(29% 0.066 243.157)", "--color-success": "oklch(79% 0.209 151.711)", "--color-success-content": "oklch(26% 0.065 152.934)", "--color-warning": "oklch(84.8% 0.1962 84.62)", "--color-warning-content": "oklch(44.8% 0.1962 84.62)", "--color-error": "oklch(65% 0.1985 24.22)", "--color-error-content": "oklch(27% 0.1985 24.22)", "--radius-selector": "2rem", "--radius-field": "0.25rem", "--radius-box": "0.5rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, valentine: { "color-scheme": "light", "--color-base-100": "oklch(97% 0.014 343.198)", "--color-base-200": "oklch(94% 0.028 342.258)", "--color-base-300": "oklch(89% 0.061 343.231)", "--color-base-content": "oklch(52% 0.223 3.958)", "--color-primary": "oklch(65% 0.241 354.308)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(62% 0.265 303.9)", "--color-secondary-content": "oklch(97% 0.014 308.299)", "--color-accent": "oklch(82% 0.111 230.318)", "--color-accent-content": "oklch(39% 0.09 240.876)", "--color-neutral": "oklch(40% 0.153 2.432)", "--color-neutral-content": "oklch(89% 0.061 343.231)", "--color-info": "oklch(86% 0.127 207.078)", "--color-info-content": "oklch(44% 0.11 240.79)", "--color-success": "oklch(84% 0.143 164.978)", "--color-success-content": "oklch(43% 0.095 166.913)", "--color-warning": "oklch(75% 0.183 55.934)", "--color-warning-content": "oklch(26% 0.079 36.259)", "--color-error": "oklch(63% 0.237 25.331)", "--color-error-content": "oklch(97% 0.013 17.38)", "--radius-selector": "1rem", "--radius-field": "2rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, cmyk: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(95% 0 0)", "--color-base-300": "oklch(90% 0 0)", "--color-base-content": "oklch(20% 0 0)", "--color-primary": "oklch(71.772% 0.133 239.443)", "--color-primary-content": "oklch(14.354% 0.026 239.443)", "--color-secondary": "oklch(64.476% 0.202 359.339)", "--color-secondary-content": "oklch(12.895% 0.04 359.339)", "--color-accent": "oklch(94.228% 0.189 105.306)", "--color-accent-content": "oklch(18.845% 0.037 105.306)", "--color-neutral": "oklch(21.778% 0 0)", "--color-neutral-content": "oklch(84.355% 0 0)", "--color-info": "oklch(68.475% 0.094 217.284)", "--color-info-content": "oklch(13.695% 0.018 217.284)", "--color-success": "oklch(46.949% 0.162 321.406)", "--color-success-content": "oklch(89.389% 0.032 321.406)", "--color-warning": "oklch(71.236% 0.159 52.023)", "--color-warning-content": "oklch(14.247% 0.031 52.023)", "--color-error": "oklch(62.013% 0.208 28.717)", "--color-error-content": "oklch(12.402% 0.041 28.717)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, wireframe: { "color-scheme": "light", "--color-base-100": "oklch(100% 0 0)", "--color-base-200": "oklch(97% 0 0)", "--color-base-300": "oklch(94% 0 0)", "--color-base-content": "oklch(20% 0 0)", "--color-primary": "oklch(87% 0 0)", "--color-primary-content": "oklch(26% 0 0)", "--color-secondary": "oklch(87% 0 0)", "--color-secondary-content": "oklch(26% 0 0)", "--color-accent": "oklch(87% 0 0)", "--color-accent-content": "oklch(26% 0 0)", "--color-neutral": "oklch(87% 0 0)", "--color-neutral-content": "oklch(26% 0 0)", "--color-info": "oklch(44% 0.11 240.79)", "--color-info-content": "oklch(90% 0.058 230.902)", "--color-success": "oklch(43% 0.095 166.913)", "--color-success-content": "oklch(90% 0.093 164.15)", "--color-warning": "oklch(47% 0.137 46.201)", "--color-warning-content": "oklch(92% 0.12 95.746)", "--color-error": "oklch(44% 0.177 26.899)", "--color-error-content": "oklch(88% 0.062 18.334)", "--radius-selector": "0rem", "--radius-field": "0.25rem", "--radius-box": "0.25rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, lemonade: { "color-scheme": "light", "--color-base-100": "oklch(98.71% 0.02 123.72)", "--color-base-200": "oklch(91.8% 0.018 123.72)", "--color-base-300": "oklch(84.89% 0.017 123.72)", "--color-base-content": "oklch(19.742% 0.004 123.72)", "--color-primary": "oklch(58.92% 0.199 134.6)", "--color-primary-content": "oklch(11.784% 0.039 134.6)", "--color-secondary": "oklch(77.75% 0.196 111.09)", "--color-secondary-content": "oklch(15.55% 0.039 111.09)", "--color-accent": "oklch(85.39% 0.201 100.73)", "--color-accent-content": "oklch(17.078% 0.04 100.73)", "--color-neutral": "oklch(30.98% 0.075 108.6)", "--color-neutral-content": "oklch(86.196% 0.015 108.6)", "--color-info": "oklch(86.19% 0.047 224.14)", "--color-info-content": "oklch(17.238% 0.009 224.14)", "--color-success": "oklch(86.19% 0.047 157.85)", "--color-success-content": "oklch(17.238% 0.009 157.85)", "--color-warning": "oklch(86.19% 0.047 102.15)", "--color-warning-content": "oklch(17.238% 0.009 102.15)", "--color-error": "oklch(86.19% 0.047 25.85)", "--color-error-content": "oklch(17.238% 0.009 25.85)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, dracula: { "color-scheme": "dark", "--color-base-100": "oklch(28.822% 0.022 277.508)", "--color-base-200": "oklch(26.805% 0.02 277.508)", "--color-base-300": "oklch(24.787% 0.019 277.508)", "--color-base-content": "oklch(97.747% 0.007 106.545)", "--color-primary": "oklch(75.461% 0.183 346.812)", "--color-primary-content": "oklch(15.092% 0.036 346.812)", "--color-secondary": "oklch(74.202% 0.148 301.883)", "--color-secondary-content": "oklch(14.84% 0.029 301.883)", "--color-accent": "oklch(83.392% 0.124 66.558)", "--color-accent-content": "oklch(16.678% 0.024 66.558)", "--color-neutral": "oklch(39.445% 0.032 275.524)", "--color-neutral-content": "oklch(87.889% 0.006 275.524)", "--color-info": "oklch(88.263% 0.093 212.846)", "--color-info-content": "oklch(17.652% 0.018 212.846)", "--color-success": "oklch(87.099% 0.219 148.024)", "--color-success-content": "oklch(17.419% 0.043 148.024)", "--color-warning": "oklch(95.533% 0.134 112.757)", "--color-warning-content": "oklch(19.106% 0.026 112.757)", "--color-error": "oklch(68.22% 0.206 24.43)", "--color-error-content": "oklch(13.644% 0.041 24.43)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" }, autumn: { "color-scheme": "light", "--color-base-100": "oklch(95.814% 0 0)", "--color-base-200": "oklch(89.107% 0 0)", "--color-base-300": "oklch(82.4% 0 0)", "--color-base-content": "oklch(19.162% 0 0)", "--color-primary": "oklch(40.723% 0.161 17.53)", "--color-primary-content": "oklch(88.144% 0.032 17.53)", "--color-secondary": "oklch(61.676% 0.169 23.865)", "--color-secondary-content": "oklch(12.335% 0.033 23.865)", "--color-accent": "oklch(73.425% 0.094 60.729)", "--color-accent-content": "oklch(14.685% 0.018 60.729)", "--color-neutral": "oklch(54.367% 0.037 51.902)", "--color-neutral-content": "oklch(90.873% 0.007 51.902)", "--color-info": "oklch(69.224% 0.097 207.284)", "--color-info-content": "oklch(13.844% 0.019 207.284)", "--color-success": "oklch(60.995% 0.08 174.616)", "--color-success-content": "oklch(12.199% 0.016 174.616)", "--color-warning": "oklch(70.081% 0.164 56.844)", "--color-warning-content": "oklch(14.016% 0.032 56.844)", "--color-error": "oklch(53.07% 0.241 24.16)", "--color-error-content": "oklch(90.614% 0.048 24.16)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, luxury: { "color-scheme": "dark", "--color-base-100": "oklch(14.076% 0.004 285.822)", "--color-base-200": "oklch(20.219% 0.004 308.229)", "--color-base-300": "oklch(23.219% 0.004 308.229)", "--color-base-content": "oklch(75.687% 0.123 76.89)", "--color-primary": "oklch(100% 0 0)", "--color-primary-content": "oklch(20% 0 0)", "--color-secondary": "oklch(27.581% 0.064 261.069)", "--color-secondary-content": "oklch(85.516% 0.012 261.069)", "--color-accent": "oklch(36.674% 0.051 338.825)", "--color-accent-content": "oklch(87.334% 0.01 338.825)", "--color-neutral": "oklch(24.27% 0.057 59.825)", "--color-neutral-content": "oklch(93.203% 0.089 90.861)", "--color-info": "oklch(79.061% 0.121 237.133)", "--color-info-content": "oklch(15.812% 0.024 237.133)", "--color-success": "oklch(78.119% 0.192 132.154)", "--color-success-content": "oklch(15.623% 0.038 132.154)", "--color-warning": "oklch(86.127% 0.136 102.891)", "--color-warning-content": "oklch(17.225% 0.027 102.891)", "--color-error": "oklch(71.753% 0.176 22.568)", "--color-error-content": "oklch(14.35% 0.035 22.568)", "--radius-selector": "1rem", "--radius-field": "0.5rem", "--radius-box": "1rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "1", "--noise": "0" }, black: { "color-scheme": "dark", "--color-base-100": "oklch(0% 0 0)", "--color-base-200": "oklch(19% 0 0)", "--color-base-300": "oklch(22% 0 0)", "--color-base-content": "oklch(87.609% 0 0)", "--color-primary": "oklch(35% 0 0)", "--color-primary-content": "oklch(100% 0 0)", "--color-secondary": "oklch(35% 0 0)", "--color-secondary-content": "oklch(100% 0 0)", "--color-accent": "oklch(35% 0 0)", "--color-accent-content": "oklch(100% 0 0)", "--color-neutral": "oklch(35% 0 0)", "--color-neutral-content": "oklch(100% 0 0)", "--color-info": "oklch(45.201% 0.313 264.052)", "--color-info-content": "oklch(89.04% 0.062 264.052)", "--color-success": "oklch(51.975% 0.176 142.495)", "--color-success-content": "oklch(90.395% 0.035 142.495)", "--color-warning": "oklch(96.798% 0.211 109.769)", "--color-warning-content": "oklch(19.359% 0.042 109.769)", "--color-error": "oklch(62.795% 0.257 29.233)", "--color-error-content": "oklch(12.559% 0.051 29.233)", "--radius-selector": "0rem", "--radius-field": "0rem", "--radius-box": "0rem", "--size-selector": "0.25rem", "--size-field": "0.25rem", "--border": "1px", "--depth": "0", "--noise": "0" } };

// packages/daisyui/theme/index.js
var theme_default = plugin.withOptions((options = {}) => {
  return ({ addBase }) => {
    const {
      name = "custom-theme",
      default: isDefault = false,
      prefersdark = false,
      "color-scheme": colorScheme = "normal",
      root = ":root",
      ...customThemeTokens
    } = options;
    let selector = `${root}:has(input.theme-controller[value=${name}]:checked),[data-theme="${name}"]`;
    if (isDefault) {
      selector = `:where(${root}),${selector}`;
    }
    let themeTokens = { ...customThemeTokens };
    if (object_default[name]) {
      const builtinTheme = object_default[name];
      themeTokens = {
        ...builtinTheme,
        ...customThemeTokens,
        "color-scheme": colorScheme || builtinTheme.colorScheme
      };
    }
    const baseStyles = {
      [selector]: {
        "color-scheme": themeTokens["color-scheme"] || colorScheme,
        ...themeTokens
      }
    };
    if (prefersdark) {
      const darkSelector = root === ":root" ? ":root:not([data-theme])" : `${root}:not([data-theme])`;
      addBase({
        "@media (prefers-color-scheme: dark)": {
          [darkSelector]: baseStyles[selector]
        }
      });
    }
    addBase(baseStyles);
  };
});
export {
  theme_default as default
};


/*
    
  MIT License
    
  Copyright (c) 2020 Pouya Saadeghi – https://daisyui.com
    
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
    
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
    
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.

*/

===== END app/assets/tailwind/daisyui-theme.mjs =====

===== BEGIN app/controllers/application_controller.rb =====
class ApplicationController < ActionController::Base
  # Only allow modern browsers supporting webp images, web push, badges, import maps, CSS nesting, and CSS :has.
  allow_browser versions: :modern
end

===== END app/controllers/application_controller.rb =====

===== SKIP (binary) app/controllers/concerns/.keep =====

===== BEGIN app/controllers/home_controller.rb =====
class HomeController < ApplicationController
  def index
  end
end

===== END app/controllers/home_controller.rb =====

===== BEGIN app/controllers/payments/ach_routings_controller.rb =====
# app/controllers/payments/ach_routings_controller.rb
module Payments
  class AchRoutingsController < ApplicationController
    def index
      @routings = AchRouting.active_view
                            .q(params[:q])
                            .state(params[:state])
                            .order(:routing_number)
                            .limit(limit)
                            .offset(offset)

      respond_to do |format|
        format.html # renders views/payments/ach_routings/index.html.erb
        format.json { render json: @routings.as_json(only: %i[public_id routing_number customer_name state_code city]) }
      end
    end

    def show
      @routing = AchRouting.find_by!(public_id: params[:public_id])
      respond_to do |format|
        format.html # renders views/payments/ach_routings/show.html.erb
        format.json { render json: @routing.as_json }
      end
    end

    private

    def limit   = [ [ params.fetch(:limit, 50).to_i, 1 ].max, 200 ].min
    def offset  = [ params.fetch(:offset, 0).to_i, 0 ].max
  end
end

===== END app/controllers/payments/ach_routings_controller.rb =====

===== BEGIN app/controllers/system/reference_lists_controller.rb =====
# app/controllers/system/reference_lists_controller.rb
class System::ReferenceListsController < ApplicationController
  before_action :set_list, only: %i[show edit update destroy]

  def index
    @lists = System::ReferenceList.order(:name)
  end

  def show; end
  def new  ; @list = System::ReferenceList.new end
  def edit ; end

  def create
    @list = System::ReferenceList.new(list_params)
    @list.save ? redirect_to([ :system, @list ], notice: "Saved") : render(:new, status: :unprocessable_entity)
  end

  def update
    @list.update(list_params) ? redirect_to([ :system, @list ], notice: "Updated") : render(:edit, status: :unprocessable_entity)
  end

  def destroy
    @list.destroy
    redirect_to system_reference_lists_path, notice: "Deleted"
  end

  private
  def set_list
    @list = System::ReferenceList.find_by!(public_id: params[:public_id])  # <- use :public_id
  end
  def list_params = params.require(:reference_list).permit(:name, :description, :active)
end

===== END app/controllers/system/reference_lists_controller.rb =====

===== BEGIN app/controllers/system/reference_values_controller.rb =====
# app/controllers/system/reference_values_controller.rb
class System::ReferenceValuesController < ApplicationController
  before_action :set_list
  before_action :set_value, only: %i[show edit update destroy]

  def index
    @values = @list.reference_values.order(:position, :key)
  end

  def show; end
  def new  ; @value = @list.reference_values.new end
  def edit ; end

  def create
    @value = @list.reference_values.new(value_params)
    @value.save ? redirect_to([ @list, @value ], notice: "Saved") : render(:new, status: :unprocessable_entity)
  end

  def update
    @value.update(value_params) ? redirect_to([ @list, @value ], notice: "Updated") : render(:edit, status: :unprocessable_entity)
  end


  def destroy
    @value.destroy
    redirect_to [ @list, :reference_values ], notice: "Deleted"
  end

  private
  def set_list
    @list = System::ReferenceList.find_by!(public_id: params[:reference_list_public_id])
  end
  def set_value
    @value = @list.reference_values.find_by!(public_id: params[:public_id])
  end
  def value_params = params.require(:reference_value).permit(:key, :label, :description, :position, :active, :metadata)
end

===== END app/controllers/system/reference_values_controller.rb =====

===== BEGIN app/helpers/application_helper.rb =====
module ApplicationHelper
end

===== END app/helpers/application_helper.rb =====

===== BEGIN app/helpers/home_helper.rb =====
module HomeHelper
end

===== END app/helpers/home_helper.rb =====

===== BEGIN app/javascript/application.js =====
// Configure your import map in config/importmap.rb. Read more: https://github.com/rails/importmap-rails
import "@hotwired/turbo-rails"
import "controllers"

===== END app/javascript/application.js =====

===== BEGIN app/javascript/controllers/application.js =====
import { Application } from "@hotwired/stimulus"

const application = Application.start()

// Configure Stimulus development experience
application.debug = false
window.Stimulus   = application

export { application }

===== END app/javascript/controllers/application.js =====

===== BEGIN app/javascript/controllers/hello_controller.js =====
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  connect() {
    this.element.textContent = "Hello World!"
  }
}

===== END app/javascript/controllers/hello_controller.js =====

===== BEGIN app/javascript/controllers/index.js =====
// Import and register all your controllers from the importmap via controllers/**/*_controller
import { application } from "controllers/application"
import { eagerLoadControllersFrom } from "@hotwired/stimulus-loading"
eagerLoadControllersFrom("controllers", application)

===== END app/javascript/controllers/index.js =====

===== BEGIN app/jobs/application_job.rb =====
class ApplicationJob < ActiveJob::Base
  # Automatically retry jobs that encountered a deadlock
  # retry_on ActiveRecord::Deadlocked

  # Most jobs are safe to ignore if the underlying records are no longer available
  # discard_on ActiveJob::DeserializationError
end

===== END app/jobs/application_job.rb =====

===== BEGIN app/mailers/application_mailer.rb =====
class ApplicationMailer < ActionMailer::Base
  default from: "from@example.com"
  layout "mailer"
end

===== END app/mailers/application_mailer.rb =====

===== BEGIN app/models/application_record.rb =====
class ApplicationRecord < ActiveRecord::Base
  primary_abstract_class
end

===== END app/models/application_record.rb =====

===== BEGIN app/models/concerns/has_public_id.rb =====
# app/models/concerns/has_public_id.rb
module HasPublicId
  extend ActiveSupport::Concern
  included do
    def to_param = public_id # ensures URL uses public_id
    validates :public_id, presence: true, uniqueness: true
  end
end

===== END app/models/concerns/has_public_id.rb =====

===== SKIP (binary) app/models/concerns/.keep =====

===== BEGIN app/models/payments/ach_routing.rb =====
# app/models/payments/ach_routing.rb
module Payments
  class AchRouting < ApplicationRecord
    self.table_name = "payments_ach_routings"
    include HasPublicId

    scope :q, ->(s) {
      return all if s.blank?
      where("routing_number = :s OR customer_name ILIKE :like OR state_code = :s",
            s: s, like: "%#{s}%")
    }
    scope :state, ->(abbrev) { abbrev.present? ? where(state_code: abbrev) : all }
    scope :active_view, -> { where(data_view_code: "1") }
  end
end

===== END app/models/payments/ach_routing.rb =====

===== BEGIN app/models/system/country.rb =====
# app/models/system/country.rb
module System
  class Country < ApplicationRecord
    self.table_name = "system_countries"
  end
end

# app/models/system/region.rb
module System
  class Region < ApplicationRecord
    self.table_name = "system_regions"
    belongs_to :country, class_name: "System::Country", foreign_key: :system_country_id
  end
end

===== END app/models/system/country.rb =====

===== BEGIN app/models/system/currency.rb =====
# app/models/system/currency.rb
module System
  class Currency < ApplicationRecord
    self.table_name = "system_currencies"
  end
end

===== END app/models/system/currency.rb =====

===== BEGIN app/models/system/naics_code.rb =====
# app/models/system/naics_code.rb
module System
  class NaicsCode < ApplicationRecord
    self.table_name = "system_naics_codes"
  end
end

===== END app/models/system/naics_code.rb =====

===== BEGIN app/models/system.rb =====
# app/models/system.rb
module System
  def self.table_name_prefix = "system_"
end

===== END app/models/system.rb =====

===== BEGIN app/models/system/reference_list.rb =====
# app/models/system/reference_list.rb
class System::ReferenceList < ApplicationRecord
  has_many :reference_values, class_name: "System::ReferenceValue", dependent: :destroy, inverse_of: :reference_list

  validates :name, presence: true
  validates :public_id, presence: true, uniqueness: true
  before_validation :ensure_public_id

  def to_param = public_id
  private
  def ensure_public_id = self.public_id ||= SecureRandom.uuid
end

===== END app/models/system/reference_list.rb =====

===== BEGIN app/models/system/reference_value.rb =====
# app/models/system/reference_value.rb
class System::ReferenceValue < ApplicationRecord
  belongs_to :reference_list, class_name: "System::ReferenceList", foreign_key: :reference_list_id

  # ensure polymorphic routing uses reference_values
  def self.model_name = ActiveModel::Name.new(self, nil, "ReferenceValue")

  validates :key, :label, presence: true
  validates :public_id, presence: true, uniqueness: true
  before_validation :ensure_public_id

  def to_param = public_id

  private
  def ensure_public_id = self.public_id ||= SecureRandom.uuid
end

===== END app/models/system/reference_value.rb =====

===== BEGIN app/views/home/index.html.erb =====
<div class="min-h-screen bg-base-200">
  <!-- Hero -->
  <section class="hero bg-gradient-to-b from-base-100 to-base-200">
    <div class="hero-content text-center">
      <div>
        <h1 class="text-5xl font-bold">BankEncore</h1>
        <p class="py-4 opacity-80">Modular banking platform</p>
        <div class="join">
          <a class="btn btn-primary join-item">Get started</a>
          <a class="btn btn-outline join-item">Docs</a>
        </div>
      </div>
    </div>
  </section>

  <!-- Key stats -->
  <section class="container mx-auto max-w-6xl p-6">
    <div class="stats stats-vertical lg:stats-horizontal shadow">
      <div class="stat">
        <div class="stat-title">Accounts</div>
        <div class="stat-value">0</div>
        <div class="stat-desc">seed pending</div>
      </div>
      <div class="stat">
        <div class="stat-title">Customers</div>
        <div class="stat-value">0</div>
        <div class="stat-desc">onboarding</div>
      </div>
      <div class="stat">
        <div class="stat-title">Latency</div>
        <div class="stat-value">~</div>
        <div class="stat-desc">dev mode</div>
      </div>
    </div>
  </section>

  <!-- Features -->
  <section class="container mx-auto max-w-6xl p-6">
    <div class="grid gap-6 md:grid-cols-3">
      <div class="card bg-base-100 shadow">
        <div class="card-body">
          <h3 class="card-title">CIF / Party</h3>
          <p>Customers, organizations, relationships, screenings.</p>
          <div class="card-actions"><a class="btn btn-outline btn-sm" href="#">Open</a></div>
        </div>
      </div>
      <div class="card bg-base-100 shadow">
        <div class="card-body">
          <h3 class="card-title">Core & Ledger</h3>
          <p>Postings, holds, balances, reconciliation.</p>
          <div class="card-actions"><a class="btn btn-outline btn-sm" href="#">Open</a></div>
        </div>
      </div>
      <div class="card bg-base-100 shadow">
        <div class="card-body">
          <h3 class="card-title">Compliance</h3>
          <p>KYC, beneficial ownership, audit trails.</p>
          <div class="card-actions"><a class="btn btn-outline btn-sm" href="#">Open</a></div>
        </div>
      </div>
    </div>
  </section>

  <!-- CTA -->
  <section class="container mx-auto max-w-6xl p-6">
    <div class="join flex flex-col md:flex-row items-center justify-between gap-3 bg-base-100 p-6 rounded-box border">
      <p class="text-base-content/80">Ready to wire up your first module?</p>
      <div class="join">
        <input class="input input-bordered join-item" placeholder="e.g. Parties" />
        <button class="btn btn-primary join-item">Create</button>
      </div>
    </div>
  </section>

  <!-- Footer note -->
  <section class="text-center text-sm text-base-content/60 pb-10">
    <p>Rails <%= Rails.version %> · Ruby <%= RUBY_VERSION %> · PostgreSQL 16</p>
  </section>
</div>

===== END app/views/home/index.html.erb =====

===== BEGIN app/views/layouts/application.html.erb =====
<!DOCTYPE html>
<html lang="en" data-theme="<%= content_for?(:theme) ? yield(:theme) : "encoreCool" %>">
  <head>
    <%= render "layouts/head" %>
  </head>
  <body class="min-h-screen bg-base-200 text-base-content">
    <%= render "layouts/navbar" %>

    <div class="container mx-auto max-w-5xl p-4">
      <%= render "layouts/flash" %>
      <main><%= yield %></main>
    </div>

    <%= render "layouts/footer" %>
    <%= yield :page_scripts %>
  </body>
</html>

===== END app/views/layouts/application.html.erb =====

===== BEGIN app/views/layouts/application.html.erb.old =====
<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Bankencore" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
  </head>

  <body>
    <main class="container mx-auto mt-28 px-5 flex">
      <%= yield %>
    </main>
  </body>
</html>

===== END app/views/layouts/application.html.erb.old =====

===== BEGIN app/views/layouts/_flash.html.erb =====
<% flash.each do |type, message| %>
  <% klass =
      case type.to_s
      when "notice" then "alert-info"
      when "alert"  then "alert-warning"
      when "error"  then "alert-error"
      else               "alert-success"
      end %>
  <div class="alert <%= klass %> mb-4"><span><%= message %></span></div>
<% end %>

===== END app/views/layouts/_flash.html.erb =====

===== BEGIN app/views/layouts/_footer.html.erb =====
<footer class="footer footer-center bg-base-100 text-base-content p-6 mt-12 border-t">
  <aside>
    <p>&copy; <%= Time.current.year %> BankEncore</p>
  </aside>
</footer>
<% content_for :page_scripts do %>
<script type="module">
const MAP = {
  cool: { light: "encoreCool",  dark: "encoreCoolDark" },
  warm: { light: "encoreWarm",  dark: "encoreWarmDark" }, // <-- fix here
};
const LS_PALETTE = "ui.theme.palette";
const LS_MODE = "ui.theme.mode"; // "light"|"dark"

function current() {
  const palette = localStorage.getItem(LS_PALETTE) || "cool";
  const mode = localStorage.getItem(LS_MODE) || "light";
  return { palette, mode, theme: (MAP[palette]||MAP.cool)[mode] };
}

function apply() {
  const { palette, mode, theme } = current();
  // set daisyUI theme via theme-controller
  const controller = document.querySelector('.theme-controller');
  if (controller) {
    controller.value = theme;
    controller.checked = true; // triggers daisyUI to set data-theme
    controller.dispatchEvent(new Event("change", { bubbles: true }));
  } else {
    document.documentElement.setAttribute("data-theme", theme);
  }
  // sync UI
  document.querySelectorAll('.theme-palette').forEach(r => r.checked = r.value === palette);
  const t = document.querySelector('.theme-mode'); if (t) t.checked = mode === "dark";
}

function init() {
  document.addEventListener("change", (e) => {
    if (e.target.matches(".theme-palette")) {
      localStorage.setItem(LS_PALETTE, e.target.value);
      apply();
    }
    if (e.target.matches(".theme-mode")) {
      localStorage.setItem(LS_MODE, e.target.checked ? "dark" : "light");
      apply();
    }
  });
  apply();
}

document.addEventListener("DOMContentLoaded", init);
document.addEventListener("turbo:load", init);
</script>
<% end %>

===== END app/views/layouts/_footer.html.erb =====

===== BEGIN app/views/layouts/_head.html.erb =====
<meta charset="utf-8">
<title><%= content_for?(:title) ? yield(:title) : "BankEncore" %></title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<%= csrf_meta_tags %>
<%= csp_meta_tag %>
<%= stylesheet_link_tag "tailwind", "data-turbo-track": "reload" %>
<%#= javascript_importmap_tags %>
===== END app/views/layouts/_head.html.erb =====

===== BEGIN app/views/layouts/mailer.html.erb =====
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <style>
      /* Email styles need to be inline */
    </style>
  </head>

  <body>
    <%= yield %>
  </body>
</html>

===== END app/views/layouts/mailer.html.erb =====

===== BEGIN app/views/layouts/mailer.text.erb =====
<%= yield %>

===== END app/views/layouts/mailer.text.erb =====

===== BEGIN app/views/layouts/_navbar.html.erb =====
<header class="navbar bg-base-100 shadow">
  <div class="flex-1">
    <%= link_to "BankEncore", root_path, class: "btn btn-ghost text-xl" %>
  </div>

  <!-- make this a flex row -->
  <div class="flex-none flex items-center gap-3">
    <form action="/search" method="get" class="hidden md:block">
      <label class="input input-bordered flex items-center gap-2 w-72">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="currentColor"><path d="M10 4a6 6 0 104.472 10.03l3.75 3.75 1.415-1.414-3.75-3.75A6 6 0 0010 4zm0 2a4 4 0 110 8 4 4 0 010-8z"/></svg>
        <input name="q" placeholder="Search" class="grow" />
      </label>
    </form>

    <div class="dropdown dropdown-end">
      <div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar">
        <div class="w-10 rounded-full bg-neutral text-neutral-content grid place-items-center">
          <span class="font-bold">U</span>
        </div>
      </div>
      <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-56">
        <li><%= link_to "Profile", "/profile" %></li>
        <li><%= link_to "Settings", "/settings" %></li>
        <li><%= link_to "Logout", "/logout", data: { turbo_method: :delete } %></li>
        <li><%= render "layouts/theme_switcher" %></li>
      </ul>
    </div>
  </div>
</header>

===== END app/views/layouts/_navbar.html.erb =====

===== BEGIN app/views/layouts/_theme_switcher.html.erb =====
<li>
  <details>
    <summary>Theme</summary>
    <div class="p-3 w-64 space-y-3">
      <div class="form-control">
        <div class="label-text mb-1">Palette</div>
        <label class="label cursor-pointer justify-start gap-2">
          <input type="radio" name="palette" value="cool" class="radio radio-xs theme-palette">
          <span>Encore Cool</span>
        </label>
        <div />
        <label class="label cursor-pointer justify-start gap-2">
          <input type="radio" name="palette" value="warm" class="radio radio-xs theme-palette">
          <span>Encore Warm</span>
        </label>
      </div>

      <div class="form-control">
        <label class="label cursor-pointer justify-between">
          <span class="label-text">Dark mode</span>
          <input type="checkbox" class="toggle theme-mode">
        </label>
      </div>

      <!-- daisyUI theme controller input (value = actual theme id) -->
      <input type="radio" name="theme" class="theme-controller hidden" value="encoreCool">
    </div>
  </details>
</li>

===== END app/views/layouts/_theme_switcher.html.erb =====

===== BEGIN app/views/payments/ach_routings/index.html.erb =====
<!-- app/views/payments/ach_routings/index.html.erb -->
<h1>ACH Routings</h1>
<form method="get">
  <input type="text" name="q" value="<%= h params[:q] %>" placeholder="routing, name, state">
  <input type="text" name="state" value="<%= h params[:state] %>" placeholder="MI">
  <button type="submit">Search</button>
</form>

<table>
  <thead><tr><th>Routing</th><th>Name</th><th>City</th><th>State</th></tr></thead>
  <tbody>
  <% @routings.each do |r| %>
    <tr>
      <td><%= link_to r.routing_number, payments_ach_routing_path(r) %></td>
      <td><%= r.customer_name %></td>
      <td><%= r.city %></td>
      <td><%= r.state_code %></td>
    </tr>
  <% end %>
  </tbody>
</table>

===== END app/views/payments/ach_routings/index.html.erb =====

===== BEGIN app/views/payments/ach_routings/show.html.erb =====
<!-- app/views/payments/ach_routings/show.html.erb -->
<h1><%= @routing.customer_name %></h1>
<pre><%= JSON.pretty_generate(@routing.attributes) %></pre>

===== END app/views/payments/ach_routings/show.html.erb =====

===== BEGIN app/views/pwa/manifest.json.erb =====
{
  "name": "Bankencore",
  "icons": [
    {
      "src": "/icon.png",
      "type": "image/png",
      "sizes": "512x512"
    },
    {
      "src": "/icon.png",
      "type": "image/png",
      "sizes": "512x512",
      "purpose": "maskable"
    }
  ],
  "start_url": "/",
  "display": "standalone",
  "scope": "/",
  "description": "Bankencore.",
  "theme_color": "red",
  "background_color": "red"
}

===== END app/views/pwa/manifest.json.erb =====

===== BEGIN app/views/pwa/service-worker.js =====
// Add a service worker for processing Web Push notifications:
//
// self.addEventListener("push", async (event) => {
//   const { title, options } = await event.data.json()
//   event.waitUntil(self.registration.showNotification(title, options))
// })
//
// self.addEventListener("notificationclick", function(event) {
//   event.notification.close()
//   event.waitUntil(
//     clients.matchAll({ type: "window" }).then((clientList) => {
//       for (let i = 0; i < clientList.length; i++) {
//         let client = clientList[i]
//         let clientPath = (new URL(client.url)).pathname
//
//         if (clientPath == event.notification.data.path && "focus" in client) {
//           return client.focus()
//         }
//       }
//
//       if (clients.openWindow) {
//         return clients.openWindow(event.notification.data.path)
//       }
//     })
//   )
// })

===== END app/views/pwa/service-worker.js =====

===== BEGIN app/views/system/reference_lists/edit.html.erb =====
<h1>Edit Reference List</h1>
<%= render "form", list: @list %>
<%= link_to "Back", system_reference_list_path(@list) %>

===== END app/views/system/reference_lists/edit.html.erb =====

===== BEGIN app/views/system/reference_lists/_form.html.erb =====
<div class="card bg-base-100 shadow">
  <div class="card-body">
    <%= form_with model: @list, class: "space-y-4" do |f| %>
      <% if @list.errors.any? %>
        <div class="alert alert-error">
          <span><%= pluralize(@list.errors.count, "error") %> prevented saving.</span>
        </div>
      <% end %>

      <label class="form-control">
        <span class="label-text">Key</span>
        <%= f.text_field :key, class: "input input-bordered" %>
      </label>

      <label class="form-control">
        <span class="label-text">Name</span>
        <%= f.text_field :name, class: "input input-bordered" %>
      </label>

      <label class="form-control">
        <span class="label-text">Description</span>
        <%= f.text_area :description, rows: 2, class: "textarea textarea-bordered" %>
      </label>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <label class="form-control">
          <span class="label-text">Visibility</span>
          <%= f.text_field :visibility, class: "input input-bordered" %>
        </label>
        <label class="form-control">
          <span class="label-text">Tags (comma-separated)</span>
          <%= f.text_field :tags, value: Array(@list.tags).join(", "), class: "input input-bordered" %>
        </label>
      </div>

      <div class="flex gap-2">
        <%= f.submit "Save", class: "btn btn-primary" %>
        <%= link_to "Cancel", (@list.persisted? ? system_reference_list_path(@list) : system_reference_lists_path), class: "btn" %>
      </div>
    <% end %>
  </div>
</div>

===== END app/views/system/reference_lists/_form.html.erb =====

===== BEGIN app/views/system/reference_lists/index.html.erb =====
<div class="flex items-center justify-between mb-4">
  <h1 class="text-2xl font-semibold">Reference Lists</h1>
  <%= link_to "New List", new_system_reference_list_path, class: "btn btn-primary" %>
</div>

<div class="card bg-base-100 shadow">
  <div class="card-body gap-4">
    <%= form_with url: system_reference_lists_path, method: :get, local: true, class: "flex gap-2" do %>
      <input type="text" name="q" value="<%= h params[:q] %>" placeholder="Search key or name" class="input input-bordered w-full max-w-md" />
      <button class="btn">Search</button>
    <% end %>

    <div class="overflow-x-auto">
      <table class="table">
        <thead>
          <tr>
            <th>Key</th>
            <th>Name</th>
            <th>Visibility</th>
            <th>Tags</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          <% @lists.each do |l| %>
            <tr>
              <td><code class="badge badge-ghost"><%= l.key %></code></td>
              <td><%= link_to l.name, system_reference_list_path(public_id: l.public_id), class: "link link-primary" %></td>
              <td><span class="badge badge-outline"><%= l.visibility %></span></td>
              <td>
                <% Array(l.tags).each do |t| %>
                  <span class="badge badge-neutral mr-1"><%= t %></span>
                <% end %>
              </td>
              <td class="text-right">
                <%= link_to "Edit", edit_system_reference_list_path(public_id: l.public_id), class: "btn btn-xs" %>
                <%= link_to "Delete", system_reference_list_path(public_id: l.public_id),
                      data: { turbo_method: :delete, turbo_confirm: "Delete list?" },
                      class: "btn btn-xs btn-error ml-2" %>
              </td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  </div>
</div>

===== END app/views/system/reference_lists/index.html.erb =====

===== BEGIN app/views/system/reference_lists/new.html.erb =====
<h1>New Reference List</h1>
<%= render "form", list: @list %>
<%= link_to "Back", system_reference_lists_path %>

===== END app/views/system/reference_lists/new.html.erb =====

===== BEGIN app/views/system/reference_lists/show.html.erb =====
<div class="breadcrumbs text-sm mb-4">
  <ul>
    <li><%= link_to "Reference Lists", system_reference_lists_path, class: "link" %></li>
    <li><%= @list.name %></li>
  </ul>
</div>

<div class="flex items-start justify-between mb-4">
  <div>
    <h1 class="text-2xl font-semibold"><%= @list.name %></h1>
    <p class="opacity-70"><code><%= @list.key %></code></p>
  </div>
  <div class="join">
    <%= link_to "Edit List", edit_system_reference_list_path(@list), class: "btn join-item" %>
    <%= link_to "Add Value", new_system_reference_list_reference_value_path(@list), class: "btn btn-primary join-item" %>
  </div>
</div>

<div class="card bg-base-100 shadow mb-6">
  <div class="card-body">
    <p><span class="font-medium">Visibility:</span> <span class="badge badge-outline ml-2"><%= @list.visibility %></span></p>
    <p class="mt-2"><span class="font-medium">Tags:</span>
      <% Array(@list.tags).each { |t| %><span class="badge badge-neutral ml-1"><%= t %></span><% } %>
    </p>
    <p class="mt-2"><%= @list.description %></p>
  </div>
</div>

<div class="card bg-base-100 shadow">
  <div class="card-body">
    <h2 class="card-title">Values</h2>
    <div class="overflow-x-auto">
      <table class="table">
        <thead>
          <tr><th>Key</th><th>Code</th><th>Label</th><th>Active</th><th>Pos</th><th></th></tr>
        </thead>
        <tbody>
          <% @list.reference_values.order(:position, :key).each do |v| %>
            <tr>
              <td><code class="badge badge-ghost"><%= v.key %></code></td>
              <td><%= v.code %></td>
              <td><%= link_to v.label, system_reference_list_reference_value_path(@list, v), class: "link link-primary" %></td>
              <td><span class="badge <%= v.active ? 'badge-success' : 'badge-ghost' %>"><%= v.active ? "Active" : "Inactive" %></span></td>
              <td><%= v.position %></td>
              <td class="text-right">
                <%= link_to "Edit", edit_system_reference_list_reference_value_path(@list, v), class: "btn btn-xs" %>
                <%= link_to "Delete", system_reference_list_reference_value_path(@list, v),
                      data: { turbo_method: :delete, turbo_confirm: "Delete value?" },
                      class: "btn btn-xs btn-error ml-2" %>
              </td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  </div>
</div>

===== END app/views/system/reference_lists/show.html.erb =====

===== BEGIN app/views/system/reference_values/edit.html.erb =====
<h1>Edit Value — <%= @list.name %></h1>
<%= render "form", list: @list, value: @value %>
<%= link_to "Back", system_reference_list_reference_value_path(@list, @value) %>

===== END app/views/system/reference_values/edit.html.erb =====

===== BEGIN app/views/system/reference_values/_form.html.erb =====
<!-- app/views/system/reference_values/_form.html.erb -->
<div class="card bg-base-100 shadow">
  <div class="card-body">
    <%= form_with model: [@list, @value], class: "space-y-4" do |f| %>
      <% if @value.errors.any? %>
        <div class="alert alert-error">
          <span><%= pluralize(@value.errors.count, "error") %> prevented saving.</span>
        </div>
      <% end %>

      <div class="grid gap-4">
        <div><%= f.label :key %><%= f.text_field :key, class: "input input-bordered w-full" %></div>
        <div><%= f.label :label %><%= f.text_field :label, class: "input input-bordered w-full" %></div>
        <div><%= f.label :description %><%= f.text_area :description, class: "textarea textarea-bordered w-full" %></div>
        <div><%= f.label :position %><%= f.number_field :position, class: "input input-bordered w-full" %></div>
        <div><%= f.label :active %><%= f.check_box :active, class: "toggle" %></div>
      </div>

      <div class="flex gap-2">
        <%= f.submit class: "btn btn-primary" %>
        <%= link_to "Cancel", system_reference_list_reference_values_path(@list), class: "btn" %>
      </div>
    <% end %>
  </div>
</div>

===== END app/views/system/reference_values/_form.html.erb =====

===== BEGIN app/views/system/reference_values/index.html.erb =====
<h1 class="text-2xl font-semibold mb-4">Values — <%= @list.name %></h1>
<div class="mb-3">
  <%= link_to "Add Value", new_system_reference_list_reference_value_path(@list), class: "btn btn-primary" %>
  <%= link_to "Back to List", system_reference_list_path(@list), class: "btn ml-2" %>
</div>

<div class="card bg-base-100 shadow">
  <div class="card-body">
    <div class="overflow-x-auto">
      <table class="table">
        <thead><tr><th>Key</th><th>Label</th><th>Code</th><th>Active</th><th>Pos</th><th></th></tr></thead>
        <tbody>
          <% @values.each do |v| %>
            <tr>
              <td><code class="badge badge-ghost"><%= v.key %></code></td>
              <td><%= link_to v.label, system_reference_list_reference_value_path(@list, v), class: "link link-primary" %></td>
              <td><%= v.code %></td>
              <td><span class="badge <%= v.active ? 'badge-success' : 'badge-ghost' %>"><%= v.active ? "Active" : "Inactive" %></span></td>
              <td><%= v.position %></td>
              <td class="text-right">
                <%= link_to "Edit", edit_system_reference_list_reference_value_path(@list, v), class: "btn btn-xs" %>
              </td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>
  </div>
</div>

===== END app/views/system/reference_values/index.html.erb =====

===== BEGIN app/views/system/reference_values/new.html.erb =====
<h1>New Value — <%= @list.name %></h1>
<%= render "form", list: @list, value: @value %>
<%= link_to "Back", system_reference_list_reference_values_path(@list) %>

===== END app/views/system/reference_values/new.html.erb =====

===== BEGIN app/views/system/reference_values/show.html.erb =====
<div class="breadcrumbs text-sm mb-4">
  <ul>
    <li><%= link_to "Reference Lists", system_reference_lists_path, class: "link" %></li>
    <li><%= link_to @list.name, system_reference_list_path(@list), class: "link" %></li>
    <li><%= @value.label %></li>
  </ul>
</div>

<div class="card bg-base-100 shadow">
  <div class="card-body">
    <div class="flex items-center justify-between">
      <h1 class="text-2xl font-semibold"><%= @value.label %></h1>
      <div class="join">
        <%= link_to "Edit", edit_system_reference_list_reference_value_path(@list, @value), class: "btn join-item" %>
        <%= link_to "Delete", system_reference_list_reference_value_path(@list, @value),
              data: { turbo_method: :delete, turbo_confirm: "Delete value?" },
              class: "btn btn-error join-item" %>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
      <div class="stats shadow w-full">
        <div class="stat">
          <div class="stat-title">Key</div>
          <div class="stat-value text-base"><code><%= @value.key %></code></div>
        </div>
        <div class="stat">
          <div class="stat-title">Code</div>
          <div class="stat-value text-base"><%= @value.code %></div>
        </div>
        <div class="stat">
          <div class="stat-title">Active</div>
          <div class="stat-value text-base"><span class="badge <%= @value.active ? 'badge-success' : 'badge-ghost' %>"><%= @value.active ? "Active" : "Inactive" %></span></div>
        </div>
        <div class="stat">
          <div class="stat-title">Position</div>
          <div class="stat-value text-base"><%= @value.position %></div>
        </div>
      </div>

      <div>
        <div class="mb-2 font-medium">Effective</div>
        <div class="join">
          <span class="join-item badge badge-outline">From: <%= @value.effective_from %></span>
          <span class="join-item badge badge-outline">To: <%= @value.effective_to %></span>
        </div>
        <div class="mt-4">
          <div class="font-medium mb-1">Metadata</div>
          <pre class="p-3 bg-base-200 rounded"><%= JSON.pretty_generate(@value.metadata || {}) %></pre>
        </div>
      </div>
    </div>
  </div>
</div>

===== END app/views/system/reference_values/show.html.erb =====

===== BEGIN bin/autorubo =====
#!/bin/bash
bundle exec rubocop $1

===== END bin/autorubo =====

===== BEGIN bin/brakeman =====
#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"

ARGV.unshift("--ensure-latest")

load Gem.bin_path("brakeman", "brakeman")

===== END bin/brakeman =====

===== BEGIN bin/ci =====
#!/usr/bin/env bash
#!/usr/bin/env bash
set -euo pipefail

echo "== Ruby deps =="
bundle check || bundle install

echo "== DB prepare =="
bin/rails db:prepare
RAILS_ENV=test bin/rails db:prepare

echo "== Code quality =="
bundle exec rubocop
bundle exec brakeman -q
bundle exec bundler-audit check --update || true   # fail only on real vulns if you prefer

echo "== Safety checks =="
bin/rails zeitwerk:check
bundle exec rake -T strong_migrations

echo "== Tests =="
if [ -f bin/rspec ]; then
  bundle exec rspec
else
  bin/rails test
fi

# echo "== Frontend build =="
# Tailwind (add this script once in package.json)
# "tailwind:build:ci": "tailwindcss -i app/assets/stylesheets/application.tailwind.css -o app/assets/builds/tailwind.css --minify"
# npm run -s tailwind:build:ci

# If you use Vite:
# bin/vite build

echo "OK"

===== END bin/ci =====

===== BEGIN bin/dev =====
#!/usr/bin/env sh

if ! gem list foreman -i --silent; then
  echo "Installing foreman..."
  gem install foreman
fi

# Default to port 3000 if not specified
export PORT="${PORT:-3000}"

# Let the debug gem allow remote connections,
# but avoid loading until `debugger` is called
export RUBY_DEBUG_OPEN="true"
export RUBY_DEBUG_LAZY="true"

exec bundle exec foreman start -f Procfile.dev "$@"

===== END bin/dev =====

===== BEGIN bin/docker-entrypoint =====
#!/bin/bash -e

# Enable jemalloc for reduced memory usage and latency.
if [ -z "${LD_PRELOAD+x}" ]; then
    LD_PRELOAD=$(find /usr/lib -name libjemalloc.so.2 -print -quit)
    export LD_PRELOAD
fi

# If running the rails server then create or migrate existing database
if [ "${@: -2:1}" == "./bin/rails" ] && [ "${@: -1:1}" == "server" ]; then
  ./bin/rails db:prepare
fi

exec "${@}"

===== END bin/docker-entrypoint =====

===== BEGIN bin/importmap =====
#!/usr/bin/env ruby

require_relative "../config/application"
require "importmap/commands"

===== END bin/importmap =====

===== BEGIN bin/jobs =====
#!/usr/bin/env ruby

require_relative "../config/environment"
require "solid_queue/cli"

SolidQueue::Cli.start(ARGV)

===== END bin/jobs =====

===== BEGIN bin/kamal =====
#!/usr/bin/env ruby
# frozen_string_literal: true

#
# This file was generated by Bundler.
#
# The application 'kamal' is installed as part of a gem, and
# this file is here to facilitate running it.
#

ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)

require "rubygems"
require "bundler/setup"

load Gem.bin_path("kamal", "kamal")

===== END bin/kamal =====

===== BEGIN bin/rails =====
#!/usr/bin/env ruby
APP_PATH = File.expand_path("../config/application", __dir__)
require_relative "../config/boot"
require "rails/commands"

===== END bin/rails =====

===== BEGIN bin/rake =====
#!/usr/bin/env ruby
require_relative "../config/boot"
require "rake"
Rake.application.run

===== END bin/rake =====

===== BEGIN bin/rubocop =====
#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"

# explicit rubocop config increases performance slightly while avoiding config confusion.
ARGV.unshift("--config", File.expand_path("../.rubocop.yml", __dir__))

load Gem.bin_path("rubocop", "rubocop")

===== END bin/rubocop =====

===== BEGIN bin/setup =====
#!/usr/bin/env ruby
require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args, exception: true)
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  system("bundle check") || system!("bundle install")

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  unless ARGV.include?("--skip-server")
    puts "\n== Starting development server =="
    STDOUT.flush # flush the output before exec(2) so that it displays
    exec "bin/dev"
  end
end

===== END bin/setup =====

===== BEGIN bin/thrust =====
#!/usr/bin/env ruby
require "rubygems"
require "bundler/setup"

load Gem.bin_path("thruster", "thrust")

===== END bin/thrust =====

===== BEGIN config/application.rb =====
require_relative "boot"

require "rails/all"

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

module Bankencore
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 8.0

    # Please, add to the `ignore` list any other `lib` subdirectories that do
    # not contain `.rb` files, or that should not be reloaded or eager loaded.
    # Common ones are `templates`, `generators`, or `middleware`, for example.
    config.autoload_lib(ignore: %w[assets tasks])

    # Configuration for the application, engines, and railties goes here.
    #
    # These settings can be overridden in specific environments using the files
    # in config/environments, which are processed later.
    #
    # config.time_zone = "Central Time (US & Canada)"
    # config.eager_load_paths << Rails.root.join("extras")
    # config/application.rb
    config.time_zone = "Eastern Time (US & Canada)"
    config.active_record.default_timezone = :utc
  end
end

===== END config/application.rb =====

===== BEGIN config/boot.rb =====
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)

require "bundler/setup" # Set up gems listed in the Gemfile.
require "bootsnap/setup" # Speed up boot time by caching expensive operations.

===== END config/boot.rb =====

===== BEGIN config/cable.yml =====
# Async adapter only works within the same process, so for manually triggering cable updates from a console,
# and seeing results in the browser, you must do so from the web console (running inside the dev process),
# not a terminal started via bin/rails console! Add "console" to any action or any ERB template view
# to make the web console appear.
development:
  adapter: async

test:
  adapter: test

production:
  adapter: solid_cable
  connects_to:
    database:
      writing: cable
  polling_interval: 0.1.seconds
  message_retention: 1.day

===== END config/cable.yml =====

===== BEGIN config/cache.yml =====
default: &default
  store_options:
    # Cap age of oldest cache entry to fulfill retention policies
    # max_age: <%= 60.days.to_i %>
    max_size: <%= 256.megabytes %>
    namespace: <%= Rails.env %>

development:
  <<: *default

test:
  <<: *default

production:
  database: cache
  <<: *default

===== END config/cache.yml =====

===== BEGIN config/credentials.yml.enc =====
ug/gZP5E9OQ6Zm3XdLvvl6rDivEeazNvEHkBWzVkWtoYoD1ZOMTP8g4shlBqdqz6HKm0IBQskm0GQ9TCt8PY33bieRIO7h7p4tl+pw5L9xUPR+HXSzW3VEIgvlFwgMP9+ZHVY5W5rSSn6r7pJYO+SqquaSyjtuAeoNIWPaj9Hib3nVxz7NXFyo2V4E3Z+ME5Xncn+stZtnBCq2LVRUEpCr8pr3oMq992pHlW+AwzuK3swOBu0sk7MK/f5aKUxePiAzDrdKWx41u38oFTrpfIME9gErN/nhchvjGCGSzqB4rYSxOHeRtrvDGFc4Yl7Ko2QN5fgkEywwWpsFIzSUvy8WpDL08NwBFsHocjPOBGcqRyvySQdRgAuI8Lzlbgx2LXAVyUEBNdG7zHBO1X9uvYhWOJAIMQinQwRU0DDgAnQ2NH/G0R//4E1Z3/vkdUKt9FmhToetjIkCBtF4wI3q40Ct9M2d8OIChG1Enwyfh3Xr9wKEXZetIkVkmqzBWg45XOFL+LgZNfFMXdCJebsYVOmaFYSsFvDNARGUlXeChrO2zun9F2/Mt0C6okIBzkOkRWbdPU9kx0lsQWBhsxUYFLaqz98ClpztyEoz87YjKvtCZnfK9WTjIn3/VlWDIQB9W7fYnqVhfwVyJYOBFnR7JtFtmYJn8U7YXDJ6Ky2vlcZUdJfkONLpqVLuCYOvq1yqr56DV6VqkUEP1L5OBk8fO/Jb3SHQAk01B3mWIRS+L097m/rxM=--0EUVS9VkQp7Y8bbe--ySx3R60Vrd9IDADINvWqyg==
===== END config/credentials.yml.enc =====

===== BEGIN config/database.yml =====
# PostgreSQL. Versions 9.3 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem "pg"
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>


development:
  <<: *default
  database: bankencore_development

  # The specified database role being used to connect to PostgreSQL.
  # To create additional roles in PostgreSQL see `$ createuser --help`.
  # When left blank, PostgreSQL will use the default role. This is
  # the same name as the operating system user running Rails.
  #username: bankencore

  # The password associated with the PostgreSQL role (username).
  #password:

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  #port: 5432

  # Schema search path. The server defaults to $user,public
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: bankencore_test

# As with config/credentials.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password or a full connection URL as an environment
# variable when you boot the app. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# If the connection URL is provided in the special DATABASE_URL environment
# variable, Rails will automatically merge its configuration values on top of
# the values provided in this file. Alternatively, you can specify a connection
# URL environment variable explicitly:
#
#   production:
#     url: <%= ENV["MY_APP_DATABASE_URL"] %>
#
# Read https://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full overview on how database connection configuration can be specified.
#
production:
  primary: &primary_production
    <<: *default
    database: bankencore_production
    username: bankencore
    password: <%= ENV["BANKENCORE_DATABASE_PASSWORD"] %>
  cache:
    <<: *primary_production
    database: bankencore_production_cache
    migrations_paths: db/cache_migrate
  queue:
    <<: *primary_production
    database: bankencore_production_queue
    migrations_paths: db/queue_migrate
  cable:
    <<: *primary_production
    database: bankencore_production_cable
    migrations_paths: db/cable_migrate

===== END config/database.yml =====

===== BEGIN config/deploy.yml =====
# Name of your application. Used to uniquely configure containers.
service: bankencore

# Name of the container image.
image: your-user/bankencore

# Deploy to these servers.
servers:
  web:
    - 192.168.0.1
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: app.example.com

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: your-user

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use bankencore-db for a db accessory server on same machine via local kamal docker network.
    # DB_HOST: 192.168.0.2

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "bankencore_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: 3.4.7
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data

===== END config/deploy.yml =====

===== BEGIN config/environment.rb =====
# Load the Rails application.
require_relative "application"

# Initialize the Rails application.
Rails.application.initialize!

===== END config/environment.rb =====

===== BEGIN config/environments/development.rb =====
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Make code changes take effect immediately without server restart.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Enable/disable Action Controller caching. By default Action Controller caching is disabled.
  # Run rails dev:cache to toggle Action Controller caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true
    config.public_file_server.headers = { "cache-control" => "public, max-age=#{2.days.to_i}" }
  else
    config.action_controller.perform_caching = false
  end

  # Change to :null_store to avoid any caching.
  config.cache_store = :memory_store

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Don't care if the mailer can't send.
  config.action_mailer.raise_delivery_errors = false

  # Make template changes take effect immediately.
  config.action_mailer.perform_caching = false

  # Set localhost to be used by links generated in mailer templates.
  config.action_mailer.default_url_options = { host: "localhost", port: 3000 }

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Append comments with runtime information tags to SQL queries in logs.
  config.active_record.query_log_tags_enabled = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  # config.generators.apply_rubocop_autocorrect_after_generate!
end

===== END config/environments/development.rb =====

===== BEGIN config/environments/production.rb =====
require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Code is not reloaded between requests.
  config.enable_reloading = false

  # Eager load code on boot for better performance and memory savings (ignored by Rake tasks).
  config.eager_load = true

  # Full error reports are disabled.
  config.consider_all_requests_local = false

  # Turn on fragment caching in view templates.
  config.action_controller.perform_caching = true

  # Cache assets for far-future expiry since they are all digest stamped.
  config.public_file_server.headers = { "cache-control" => "public, max-age=#{1.year.to_i}" }

  # Enable serving of images, stylesheets, and JavaScripts from an asset server.
  # config.asset_host = "http://assets.example.com"

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Assume all access to the app is happening through a SSL-terminating reverse proxy.
  config.assume_ssl = true

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = true

  # Skip http-to-https redirect for the default health check endpoint.
  # config.ssl_options = { redirect: { exclude: ->(request) { request.path == "/up" } } }

  # Log to STDOUT with the current request id as a default log tag.
  config.log_tags = [ :request_id ]
  config.logger   = ActiveSupport::TaggedLogging.logger(STDOUT)

  # Change to "debug" to log everything (including potentially personally-identifiable information!)
  config.log_level = ENV.fetch("RAILS_LOG_LEVEL", "info")

  # Prevent health checks from clogging up the logs.
  config.silence_healthcheck_path = "/up"

  # Don't log any deprecations.
  config.active_support.report_deprecations = false

  # Replace the default in-process memory cache store with a durable alternative.
  config.cache_store = :solid_cache_store

  # Replace the default in-process and non-durable queuing backend for Active Job.
  config.active_job.queue_adapter = :solid_queue
  config.solid_queue.connects_to = { database: { writing: :queue } }

  # Ignore bad email addresses and do not raise email delivery errors.
  # Set this to true and configure the email server for immediate delivery to raise delivery errors.
  # config.action_mailer.raise_delivery_errors = false

  # Set host to be used by links generated in mailer templates.
  config.action_mailer.default_url_options = { host: "example.com" }

  # Specify outgoing SMTP server. Remember to add smtp/* credentials via rails credentials:edit.
  # config.action_mailer.smtp_settings = {
  #   user_name: Rails.application.credentials.dig(:smtp, :user_name),
  #   password: Rails.application.credentials.dig(:smtp, :password),
  #   address: "smtp.example.com",
  #   port: 587,
  #   authentication: :plain
  # }

  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
  # the I18n.default_locale when a translation cannot be found).
  config.i18n.fallbacks = true

  # Do not dump schema after migrations.
  config.active_record.dump_schema_after_migration = false

  # Only use :id for inspections in production.
  config.active_record.attributes_for_inspect = [ :id ]

  # Enable DNS rebinding protection and other `Host` header attacks.
  # config.hosts = [
  #   "example.com",     # Allow requests from example.com
  #   /.*\.example\.com/ # Allow requests from subdomains like `www.example.com`
  # ]
  #
  # Skip DNS rebinding protection for the default health check endpoint.
  # config.host_authorization = { exclude: ->(request) { request.path == "/up" } }
end

===== END config/environments/production.rb =====

===== BEGIN config/environments/test.rb =====
# The test environment is used exclusively to run your application's
# test suite. You never need to work with it otherwise. Remember that
# your test database is "scratch space" for the test suite and is wiped
# and recreated between test runs. Don't rely on the data there!

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # While tests run files are not watched, reloading is not necessary.
  config.enable_reloading = false

  # Eager loading loads your entire application. When running a single test locally,
  # this is usually not necessary, and can slow down your test suite. However, it's
  # recommended that you enable it in continuous integration systems to ensure eager
  # loading is working properly before deploying your code.
  config.eager_load = ENV["CI"].present?

  # Configure public file server for tests with cache-control for performance.
  config.public_file_server.headers = { "cache-control" => "public, max-age=3600" }

  # Show full error reports.
  config.consider_all_requests_local = true
  config.cache_store = :null_store

  # Render exception templates for rescuable exceptions and raise for other exceptions.
  config.action_dispatch.show_exceptions = :rescuable

  # Disable request forgery protection in test environment.
  config.action_controller.allow_forgery_protection = false

  # Store uploaded files on the local file system in a temporary directory.
  config.active_storage.service = :test

  # Tell Action Mailer not to deliver emails to the real world.
  # The :test delivery method accumulates sent emails in the
  # ActionMailer::Base.deliveries array.
  config.action_mailer.delivery_method = :test

  # Set host to be used by links generated in mailer templates.
  config.action_mailer.default_url_options = { host: "example.com" }

  # Print deprecation notices to the stderr.
  config.active_support.deprecation = :stderr

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true
end

===== END config/environments/test.rb =====

===== BEGIN config/importmap.rb =====
# Pin npm packages by running ./bin/importmap

pin "application"
pin "@hotwired/turbo-rails", to: "turbo.min.js"
pin "@hotwired/stimulus", to: "stimulus.min.js"
pin "@hotwired/stimulus-loading", to: "stimulus-loading.js"
pin_all_from "app/javascript/controllers", under: "controllers"

===== END config/importmap.rb =====

===== BEGIN config/initializers/assets.rb =====
# Be sure to restart your server when you modify this file.

# Version of your assets, change this if you want to expire all your assets.
Rails.application.config.assets.version = "1.0"

# Add additional assets to the asset load path.
# Rails.application.config.assets.paths << Emoji.images_path

===== END config/initializers/assets.rb =====

===== BEGIN config/initializers/content_security_policy.rb =====
# Be sure to restart your server when you modify this file.

# Define an application-wide content security policy.
# See the Securing Rails Applications Guide for more information:
# https://guides.rubyonrails.org/security.html#content-security-policy-header

# Rails.application.configure do
#   config.content_security_policy do |policy|
#     policy.default_src :self, :https
#     policy.font_src    :self, :https, :data
#     policy.img_src     :self, :https, :data
#     policy.object_src  :none
#     policy.script_src  :self, :https
#     policy.style_src   :self, :https
#     # Specify URI for violation reports
#     # policy.report_uri "/csp-violation-report-endpoint"
#   end
#
#   # Generate session nonces for permitted importmap, inline scripts, and inline styles.
#   config.content_security_policy_nonce_generator = ->(request) { request.session.id.to_s }
#   config.content_security_policy_nonce_directives = %w(script-src style-src)
#
#   # Report violations without enforcing the policy.
#   # config.content_security_policy_report_only = true
# end

===== END config/initializers/content_security_policy.rb =====

===== BEGIN config/initializers/filter_parameter_logging.rb =====
# Be sure to restart your server when you modify this file.

# Configure parameters to be partially matched (e.g. passw matches password) and filtered from the log file.
# Use this to limit dissemination of sensitive information.
# See the ActiveSupport::ParameterFilter documentation for supported notations and behaviors.
Rails.application.config.filter_parameters += [
  :passw, :email, :secret, :token, :_key, :crypt, :salt, :certificate, :otp, :ssn, :cvv, :cvc
]

===== END config/initializers/filter_parameter_logging.rb =====

===== BEGIN config/initializers/inflections.rb =====
# Be sure to restart your server when you modify this file.

# Add new inflection rules using the following format. Inflections
# are locale specific, and you may define rules for as many different
# locales as you wish. All of these examples are active by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.plural /^(ox)$/i, "\\1en"
#   inflect.singular /^(ox)en/i, "\\1"
#   inflect.irregular "person", "people"
#   inflect.uncountable %w( fish sheep )
# end

# These inflection rules are supported but not enabled by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.acronym "RESTful"
# end

===== END config/initializers/inflections.rb =====

===== BEGIN config/initializers/strong_migrations.rb =====
# Mark existing migrations as safe
StrongMigrations.start_after = 20251016181026

# Set timeouts for migrations
# If you use PgBouncer in transaction mode, delete these lines and set timeouts on the database user
StrongMigrations.lock_timeout = 10.seconds
StrongMigrations.statement_timeout = 1.hour

# Analyze tables after indexes are added
# Outdated statistics can sometimes hurt performance
StrongMigrations.auto_analyze = true

# Set the version of the production database
# so the right checks are run in development
# StrongMigrations.target_version = 10

# Add custom checks
# StrongMigrations.add_check do |method, args|
#   if method == :add_index && args[0].to_s == "users"
#     stop! "No more indexes on the users table"
#   end
# end

# Remove invalid indexes when rerunning migrations
# StrongMigrations.remove_invalid_indexes = true

# Make some operations safe by default
# See https://github.com/ankane/strong_migrations#safe-by-default
# StrongMigrations.safe_by_default = true

===== END config/initializers/strong_migrations.rb =====

===== BEGIN config/locales/en.yml =====
# Files in the config/locales directory are used for internationalization and
# are automatically loaded by Rails. If you want to use locales other than
# English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t "hello"
#
# In views, this is aliased to just `t`:
#
#     <%= t("hello") %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# To learn more about the API, please read the Rails Internationalization guide
# at https://guides.rubyonrails.org/i18n.html.
#
# Be aware that YAML interprets the following case-insensitive strings as
# booleans: `true`, `false`, `on`, `off`, `yes`, `no`. Therefore, these strings
# must be quoted to be interpreted as strings. For example:
#
#     en:
#       "yes": yup
#       enabled: "ON"

en:
  hello: "Hello world"

===== END config/locales/en.yml =====

===== BEGIN config/master.key =====
0070054fb951a7d3048063ab0509f281
===== END config/master.key =====

===== BEGIN config/puma.rb =====
# This configuration file will be evaluated by Puma. The top-level methods that
# are invoked here are part of Puma's configuration DSL. For more information
# about methods provided by the DSL, see https://puma.io/puma/Puma/DSL.html.
#
# Puma starts a configurable number of processes (workers) and each process
# serves each request in a thread from an internal thread pool.
#
# You can control the number of workers using ENV["WEB_CONCURRENCY"]. You
# should only set this value when you want to run 2 or more workers. The
# default is already 1.
#
# The ideal number of threads per worker depends both on how much time the
# application spends waiting for IO operations and on how much you wish to
# prioritize throughput over latency.
#
# As a rule of thumb, increasing the number of threads will increase how much
# traffic a given process can handle (throughput), but due to CRuby's
# Global VM Lock (GVL) it has diminishing returns and will degrade the
# response time (latency) of the application.
#
# The default is set to 3 threads as it's deemed a decent compromise between
# throughput and latency for the average Rails application.
#
# Any libraries that use a connection pool or another resource pool should
# be configured to provide at least as many connections as the number of
# threads. This includes Active Record's `pool` parameter in `database.yml`.
threads_count = ENV.fetch("RAILS_MAX_THREADS", 3)
threads threads_count, threads_count

# Specifies the `port` that Puma will listen on to receive requests; default is 3000.
port ENV.fetch("PORT", 3000)

# Allow puma to be restarted by `bin/rails restart` command.
plugin :tmp_restart

# Run the Solid Queue supervisor inside of Puma for single-server deployments
plugin :solid_queue if ENV["SOLID_QUEUE_IN_PUMA"]

# Specify the PID file. Defaults to tmp/pids/server.pid in development.
# In other environments, only set the PID file if requested.
pidfile ENV["PIDFILE"] if ENV["PIDFILE"]

===== END config/puma.rb =====

===== BEGIN config/queue.yml =====
default: &default
  dispatchers:
    - polling_interval: 1
      batch_size: 500
  workers:
    - queues: "*"
      threads: 3
      processes: <%= ENV.fetch("JOB_CONCURRENCY", 1) %>
      polling_interval: 0.1

development:
  <<: *default

test:
  <<: *default

production:
  <<: *default

===== END config/queue.yml =====

===== BEGIN config/recurring.yml =====
# examples:
#   periodic_cleanup:
#     class: CleanSoftDeletedRecordsJob
#     queue: background
#     args: [ 1000, { batch_size: 500 } ]
#     schedule: every hour
#   periodic_cleanup_with_command:
#     command: "SoftDeletedRecord.due.delete_all"
#     priority: 2
#     schedule: at 5am every day

production:
  clear_solid_queue_finished_jobs:
    command: "SolidQueue::Job.clear_finished_in_batches(sleep_between_batches: 0.3)"
    schedule: every hour at minute 12

===== END config/recurring.yml =====

===== BEGIN config/routes.rb =====
Rails.application.routes.draw do
  get "home/index"
  # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html

  # Reveal health status on /up that returns 200 if the app boots with no exceptions, otherwise 500.
  # Can be used by load balancers and uptime monitors to verify that the app is live.
  get "up" => "rails/health#show", as: :rails_health_check

  # Render dynamic PWA files from app/views/pwa/* (remember to link manifest in application.html.erb)
  # get "manifest" => "rails/pwa#manifest", as: :pwa_manifest
  # get "service-worker" => "rails/pwa#service_worker", as: :pwa_service_worker

  # Defines the root path route ("/")

  root "home#index"

  namespace :payments do
    resources :ach_routings, param: :public_id, only: [ :index, :show ]
  end

  namespace :system do
    resources :reference_lists, param: :public_id do
      resources :reference_values, param: :public_id
    end
  end
end

===== END config/routes.rb =====

===== BEGIN config/storage.yml =====
test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>

local:
  service: Disk
  root: <%= Rails.root.join("storage") %>

# Use bin/rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
# amazon:
#   service: S3
#   access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
#   secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
#   region: us-east-1
#   bucket: your_own_bucket-<%= Rails.env %>

# Remember not to checkin your GCS keyfile to a repository
# google:
#   service: GCS
#   project: your_project
#   credentials: <%= Rails.root.join("path/to/gcs.keyfile") %>
#   bucket: your_own_bucket-<%= Rails.env %>

# Use bin/rails credentials:edit to set the Azure Storage secret (as azure_storage:storage_access_key)
# microsoft:
#   service: AzureStorage
#   storage_account_name: your_account_name
#   storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :storage_access_key) %>
#   container: your_container_name-<%= Rails.env %>

# mirror:
#   service: Mirror
#   primary: local
#   mirrors: [ amazon, google, microsoft ]

===== END config/storage.yml =====

===== BEGIN db/cable_schema.rb =====
ActiveRecord::Schema[7.1].define(version: 1) do
  create_table "solid_cable_messages", force: :cascade do |t|
    t.binary "channel", limit: 1024, null: false
    t.binary "payload", limit: 536870912, null: false
    t.datetime "created_at", null: false
    t.integer "channel_hash", limit: 8, null: false
    t.index ["channel"], name: "index_solid_cable_messages_on_channel"
    t.index ["channel_hash"], name: "index_solid_cable_messages_on_channel_hash"
    t.index ["created_at"], name: "index_solid_cable_messages_on_created_at"
  end
end

===== END db/cable_schema.rb =====

===== BEGIN db/cache_schema.rb =====
# frozen_string_literal: true

ActiveRecord::Schema[7.2].define(version: 1) do
  create_table "solid_cache_entries", force: :cascade do |t|
    t.binary "key", limit: 1024, null: false
    t.binary "value", limit: 536870912, null: false
    t.datetime "created_at", null: false
    t.integer "key_hash", limit: 8, null: false
    t.integer "byte_size", limit: 4, null: false
    t.index ["byte_size"], name: "index_solid_cache_entries_on_byte_size"
    t.index ["key_hash", "byte_size"], name: "index_solid_cache_entries_on_key_hash_and_byte_size"
    t.index ["key_hash"], name: "index_solid_cache_entries_on_key_hash", unique: true
  end
end

===== END db/cache_schema.rb =====

===== BEGIN db/migrate/20251017022102_enable_pgcrypto.rb =====
class EnablePgcrypto < ActiveRecord::Migration[8.0]
  def change
    enable_extension "pgcrypto" unless extension_enabled?("pgcrypto")
  end
end

===== END db/migrate/20251017022102_enable_pgcrypto.rb =====

===== BEGIN db/migrate/20251017022119_create_system_reference_backbone.rb =====
# db/migrate/20251017022119_create_system_reference_backbone.rb
class CreateSystemReferenceBackbone < ActiveRecord::Migration[8.0]
  def change
    create_table :system_reference_lists do |t|
      t.uuid   :public_id, default: "gen_random_uuid()", null: false
      t.string :key, null: false
      t.string :name, null: false
      t.string :description
      t.string :schema_version
      t.string :visibility, null: false, default: "public"
      t.string :tags, array: true, default: []
      t.timestamps
    end
    add_index :system_reference_lists, :public_id, unique: true
    add_index :system_reference_lists, :key,       unique: true

    create_table :system_reference_values do |t|
      t.uuid    :public_id, default: "gen_random_uuid()", null: false
      t.bigint  :system_reference_list_id, null: false    # FK added later
      t.bigint  :parent_id                                     # self-FK added later
      t.string  :key,        null: false
      t.string  :code
      t.string  :label,      null: false
      t.string  :short_label
      t.text    :description
      t.integer :position,   null: false, default: 0
      t.boolean :active,     null: false, default: true
      t.date    :effective_from
      t.date    :effective_to
      t.jsonb   :metadata,   null: false, default: {}
      t.timestamps
    end

    add_index :system_reference_values, :public_id, unique: true
    add_index :system_reference_values, [ :system_reference_list_id, :key ], unique: true, name: "idx_srv_list_key"
    add_index :system_reference_values, [ :system_reference_list_id, :code ], name: "idx_srv_list_code"
    add_index :system_reference_values, :metadata, using: :gin
    add_index :system_reference_values, :parent_id
  end
end

===== END db/migrate/20251017022119_create_system_reference_backbone.rb =====

===== BEGIN db/migrate/20251017022136_create_system_countries_and_regions.rb =====
class CreateSystemCountriesAndRegions < ActiveRecord::Migration[8.0]
  def change
    create_table :system_countries do |t|
      t.uuid   :public_id,   default: "gen_random_uuid()", null: false
      t.string :iso2,        null: false, limit: 2
      t.string :iso3,        null: false, limit: 3
      t.string :numeric,                 limit: 3
      t.string :name,        null: false
      t.string :official_name
      t.string :calling_code            # e.g., "+1"
      t.string :currency_code, limit: 3 # ISO-4217
      t.string :region                   # UN region
      t.string :subregion
      t.string :tlds, array: true, default: []
      t.boolean :active, null: false, default: true
      t.timestamps
    end
    add_index :system_countries, :public_id, unique: true
    add_index :system_countries, :iso2,      unique: true
    add_index :system_countries, :iso3,      unique: true
    add_index :system_countries, :numeric

    create_table :system_regions do |t|
      t.uuid :public_id, default: "gen_random_uuid()", null: false
      t.references :system_country, null: false, foreign_key: true
      t.string  :code,       null: false                  # postal/ISO-3166-2 code
      t.string  :name,       null: false
      t.string  :type_name,  null: false, default: "state" # state|province|territory
      t.string  :iso_3166_2                                # e.g., "US-MI"
      t.string  :fips_code
      t.boolean :active,     null: false, default: true
      t.timestamps
    end
    add_index :system_regions, :public_id, unique: true
    add_index :system_regions, [ :system_country_id, :code ], unique: true
  end
end

===== END db/migrate/20251017022136_create_system_countries_and_regions.rb =====

===== BEGIN db/migrate/20251017022158_create_system_naics_codes.rb =====
class CreateSystemNaicsCodes < ActiveRecord::Migration[8.0]
  def change
    create_table :system_naics_codes do |t|
      t.uuid :public_id, default: "gen_random_uuid()", null: false
      t.integer :year,     null: false, default: 2022
      t.string  :code,     null: false                  # 2–6 digits
      t.string  :title,    null: false
      t.string  :sector                               # optional parsed sector name
      t.string  :parent_code                          # for hierarchy
      t.integer :level,   null: false                 # 2..6
      t.timestamps
    end
    add_index :system_naics_codes, :public_id, unique: true
    add_index :system_naics_codes, [ :year, :code ], unique: true
    add_index :system_naics_codes, [ :year, :parent_code ]
  end
end

===== END db/migrate/20251017022158_create_system_naics_codes.rb =====

===== BEGIN db/migrate/20251017023119_add_fks_to_system_reference_values.rb =====
# db/migrate/20251017023119_add_fks_to_system_reference_values.rb
class AddFksToSystemReferenceValues < ActiveRecord::Migration[8.0]
  disable_ddl_transaction!

  def up
    add_foreign_key :system_reference_values, :system_reference_lists,
      column: :system_reference_list_id, validate: false, name: "fk_srv_to_lists"

    add_foreign_key :system_reference_values, :system_reference_values,
      column: :parent_id, validate: false, name: "fk_srv_to_parent"
  end

  def down
    remove_foreign_key :system_reference_values, name: "fk_srv_to_parent"
    remove_foreign_key :system_reference_values, name: "fk_srv_to_lists"
  end
end

===== END db/migrate/20251017023119_add_fks_to_system_reference_values.rb =====

===== BEGIN db/migrate/20251017023136_create_payments_ach_routings.rb =====
# db/migrate/20251016150000_create_payments_ach_routings.rb
class CreatePaymentsAchRoutings < ActiveRecord::Migration[8.0]
  def change
    enable_extension "pgcrypto" unless extension_enabled?("pgcrypto")

    create_table :payments_ach_routings do |t|
      t.uuid   :public_id,              null: false, default: "gen_random_uuid()"

      t.string :routing_number,         null: false, limit: 9,  comment: "Institution’s ABA routing number"
      t.string :office_code,            null: false, limit: 1,  comment: "'O' main office, 'B' branch"
      t.string :servicing_frb_number,                 limit: 9,  comment: "Servicing Federal Reserve Bank routing number"
      t.string :record_type_code,       null: false, limit: 1,  comment: "0=Fed, 1=send to customer, 2=send using new routing number"
      t.date   :change_date,                                        comment: "Last update date (MMDDYY source)"
      t.string :new_routing_number,                   limit: 9,  comment: "Updated routing number (e.g., merger)"
      t.string :customer_name,          null: false, limit: 36, comment: "Abbreviated institution name"
      t.string :address,                              limit: 36, comment: "Delivery address"
      t.string :city,                                 limit: 20, comment: "City name"

      # Region linkage
      t.string :state_code,            null: false, limit: 2,  comment: "Two-letter state abbreviation"
      t.references :system_region, foreign_key: true, null: true, comment: "Optional FK to SystemRegion (US)"

      t.string :zip_code,                            limit: 10, comment: "ZIP code"
      t.string :phone_number,                        limit: 10, comment: "Contact phone, digits only"
      t.string :institution_status_code,             limit: 1,  comment: "1 = Receives gov/commercial ACH data"
      t.string :data_view_code,                      limit: 1,  comment: "1 = Current view"

      t.boolean :us_treasury,          null: false, default: false, comment: "ACH number is U.S. Treasury payment"
      t.boolean :us_postal_service,    null: false, default: false, comment: "ACH number is U.S. Postal Service money order"
      t.boolean :federal_reserve_bank, null: false, default: false, comment: "ACH number is a Federal Reserve Bank"
      t.boolean :on_us,                null: false, default: false, comment: '"On-us" account'
      t.boolean :local,                null: false, default: false, comment: "Considered a local check"
      t.boolean :special_handling,     null: false, default: false, comment: "Docs require special handling"

      t.text :notes, comment: "Internal notes"

      t.timestamps
    end

    add_index :payments_ach_routings, :public_id, unique: true
    add_index :payments_ach_routings, :routing_number, unique: true
    add_index :payments_ach_routings, :customer_name
    add_index :payments_ach_routings, :state_code

    # Data quality checks
    add_check_constraint :payments_ach_routings, "routing_number ~ '^[0-9]{9}$'", name: "chk_par_routing_number_digits"
    add_check_constraint :payments_ach_routings, "servicing_frb_number IS NULL OR servicing_frb_number ~ '^[0-9]{9}$'", name: "chk_par_frb_digits"
    add_check_constraint :payments_ach_routings, "new_routing_number IS NULL OR new_routing_number ~ '^[0-9]{9}$'", name: "chk_par_new_rtn_digits"
    add_check_constraint :payments_ach_routings, "office_code IN ('O','B')", name: "chk_par_office_code"
    add_check_constraint :payments_ach_routings, "record_type_code IN ('0','1','2')", name: "chk_par_record_type_code"
    add_check_constraint :payments_ach_routings, "data_view_code IS NULL OR data_view_code IN ('1')", name: "chk_par_data_view_code"
    add_check_constraint :payments_ach_routings, "state_code ~ '^[A-Z]{2}$'", name: "chk_par_state_code"
    add_check_constraint :payments_ach_routings, "phone_number IS NULL OR phone_number ~ '^[0-9]{10}$'", name: "chk_par_phone_digits"
  end
end

===== END db/migrate/20251017023136_create_payments_ach_routings.rb =====

===== BEGIN db/migrate/20251017023219_validate_fks_to_system_reference_values.rb =====
# db/migrate/20251017023219_validate_fks_to_system_reference_values.rb
class ValidateFksToSystemReferenceValues < ActiveRecord::Migration[8.0]
  def change
    validate_foreign_key :system_reference_values, :system_reference_lists, name: "fk_srv_to_lists"
    validate_foreign_key :system_reference_values, :system_reference_values, name: "fk_srv_to_parent"
  end
end

===== END db/migrate/20251017023219_validate_fks_to_system_reference_values.rb =====

===== BEGIN db/migrate/20251017034321_relax_state_code_on_ach.rb =====
# db/migrate/20251017040000_relax_state_code_on_ach.rb
class RelaxStateCodeOnAch < ActiveRecord::Migration[8.0]
  disable_ddl_transaction!

  def up
    change_column_null :payments_ach_routings, :state_code, true

    # drop old validated constraint (if present)
    remove_check_constraint :payments_ach_routings, name: "chk_par_state_code", if_exists: true

    # add new UNVALIDATED constraint
    add_check_constraint :payments_ach_routings,
      "state_code IS NULL OR state_code ~ '^[A-Z]{2}$'",
      name: "chk_par_state_code",
      validate: false
  end

  def down
    remove_check_constraint :payments_ach_routings, name: "chk_par_state_code", if_exists: true
    change_column_null :payments_ach_routings, :state_code, false
    add_check_constraint :payments_ach_routings,
      "state_code ~ '^[A-Z]{2}$'",
      name: "chk_par_state_code"
  end
end

===== END db/migrate/20251017034321_relax_state_code_on_ach.rb =====

===== BEGIN db/migrate/20251017034618_validate_state_code_check_on_ach.rb =====
# db/migrate/20251017040100_validate_state_code_check_on_ach.rb
class ValidateStateCodeCheckOnAch < ActiveRecord::Migration[8.0]
  def change
    validate_check_constraint :payments_ach_routings, name: "chk_par_state_code"
  end
end

===== END db/migrate/20251017034618_validate_state_code_check_on_ach.rb =====

===== BEGIN db/migrate/20251017061907_create_system_currencies.rb =====
# db/migrate/20251017050000_create_system_currencies.rb
class CreateSystemCurrencies < ActiveRecord::Migration[8.0]
  def change
    create_table :system_currencies do |t|
      t.uuid   :public_id,    null: false, default: "gen_random_uuid()"
      t.string :code,         null: false, limit: 3    # ISO-4217 code
      t.string :numeric,                     limit: 3
      t.string :name,         null: false
      t.integer :minor_units,  null: false, default: 2  # exponent
      t.string :symbol
      t.timestamps
    end
    add_index :system_currencies, :public_id, unique: true
    add_index :system_currencies, :code,      unique: true
  end
end

===== END db/migrate/20251017061907_create_system_currencies.rb =====

===== BEGIN db/migrate/20251017203407_add_check_ref_values_ref_list_id_not_null.rb =====
# db/migrate/20251017_add_check_ref_values_ref_list_id_not_null.rb
class AddCheckRefValuesRefListIdNotNull < ActiveRecord::Migration[7.1]
  def change
    add_check_constraint :system_reference_values,
      "reference_list_id IS NOT NULL",
      name: "system_reference_values_reference_list_id_null",
      validate: false
  end
end

===== END db/migrate/20251017203407_add_check_ref_values_ref_list_id_not_null.rb =====

===== BEGIN db/migrate/20251017203416_validate_and_enforce_ref_values_ref_list_id_not_null.rb =====
# db/migrate/20251017_validate_and_enforce_ref_values_ref_list_id_not_null.rb
class ValidateAndEnforceRefValuesRefListIdNotNull < ActiveRecord::Migration[7.1]
  disable_ddl_transaction!

  def up
    safety_assured do
      # backfill any remaining NULLs from the old column
      execute <<~SQL
        UPDATE system_reference_values
        SET reference_list_id = system_reference_list_id
        WHERE reference_list_id IS NULL AND system_reference_list_id IS NOT NULL
      SQL

      # fail fast if any NULLs remain
      nulls = select_value("SELECT COUNT(*) FROM system_reference_values WHERE reference_list_id IS NULL").to_i
      raise "Abort: #{nulls} rows still NULL in reference_list_id" if nulls.positive?

      validate_check_constraint :system_reference_values, name: "system_reference_values_reference_list_id_null"
      change_column_null :system_reference_values, :reference_list_id, false
      remove_check_constraint :system_reference_values, name: "system_reference_values_reference_list_id_null"
    end
  end

  def down
    safety_assured do
      add_check_constraint :system_reference_values, "reference_list_id IS NOT NULL",
        name: "system_reference_values_reference_list_id_null", validate: true
      change_column_null :system_reference_values, :reference_list_id, true
    end
  end
end

===== END db/migrate/20251017203416_validate_and_enforce_ref_values_ref_list_id_not_null.rb =====

===== BEGIN db/migrate/20251017203635_drop_system_reference_list_id.rb =====
# db/migrate/20251017_drop_system_reference_list_id.rb
class DropSystemReferenceListId < ActiveRecord::Migration[7.1]
  disable_ddl_transaction!
  def change
    safety_assured { remove_column :system_reference_values, :system_reference_list_id, :bigint }
  end
end

===== END db/migrate/20251017203635_drop_system_reference_list_id.rb =====

===== BEGIN db/migrate/20251017_add_reference_list_id_to_system_reference_values.rb =====
# db/migrate/20251017_add_reference_list_id_to_system_reference_values.rb
class AddReferenceListIdToSystemReferenceValues < ActiveRecord::Migration[7.1]
  disable_ddl_transaction!

  def change
    add_column :system_reference_values, :reference_list_id, :bigint

    # backfill 1:1 copy if old column exists
    execute <<~SQL
      UPDATE system_reference_values
      SET reference_list_id = system_reference_list_id
      WHERE reference_list_id IS NULL
        AND system_reference_list_id IS NOT NULL
    SQL

    # index + fk
    add_index :system_reference_values, :reference_list_id, algorithm: :concurrently
    add_foreign_key :system_reference_values, :system_reference_lists, column: :reference_list_id
  end
end

===== END db/migrate/20251017_add_reference_list_id_to_system_reference_values.rb =====

===== BEGIN db/queue_schema.rb =====
ActiveRecord::Schema[7.1].define(version: 1) do
  create_table "solid_queue_blocked_executions", force: :cascade do |t|
    t.bigint "job_id", null: false
    t.string "queue_name", null: false
    t.integer "priority", default: 0, null: false
    t.string "concurrency_key", null: false
    t.datetime "expires_at", null: false
    t.datetime "created_at", null: false
    t.index [ "concurrency_key", "priority", "job_id" ], name: "index_solid_queue_blocked_executions_for_release"
    t.index [ "expires_at", "concurrency_key" ], name: "index_solid_queue_blocked_executions_for_maintenance"
    t.index [ "job_id" ], name: "index_solid_queue_blocked_executions_on_job_id", unique: true
  end

  create_table "solid_queue_claimed_executions", force: :cascade do |t|
    t.bigint "job_id", null: false
    t.bigint "process_id"
    t.datetime "created_at", null: false
    t.index [ "job_id" ], name: "index_solid_queue_claimed_executions_on_job_id", unique: true
    t.index [ "process_id", "job_id" ], name: "index_solid_queue_claimed_executions_on_process_id_and_job_id"
  end

  create_table "solid_queue_failed_executions", force: :cascade do |t|
    t.bigint "job_id", null: false
    t.text "error"
    t.datetime "created_at", null: false
    t.index [ "job_id" ], name: "index_solid_queue_failed_executions_on_job_id", unique: true
  end

  create_table "solid_queue_jobs", force: :cascade do |t|
    t.string "queue_name", null: false
    t.string "class_name", null: false
    t.text "arguments"
    t.integer "priority", default: 0, null: false
    t.string "active_job_id"
    t.datetime "scheduled_at"
    t.datetime "finished_at"
    t.string "concurrency_key"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index [ "active_job_id" ], name: "index_solid_queue_jobs_on_active_job_id"
    t.index [ "class_name" ], name: "index_solid_queue_jobs_on_class_name"
    t.index [ "finished_at" ], name: "index_solid_queue_jobs_on_finished_at"
    t.index [ "queue_name", "finished_at" ], name: "index_solid_queue_jobs_for_filtering"
    t.index [ "scheduled_at", "finished_at" ], name: "index_solid_queue_jobs_for_alerting"
  end

  create_table "solid_queue_pauses", force: :cascade do |t|
    t.string "queue_name", null: false
    t.datetime "created_at", null: false
    t.index [ "queue_name" ], name: "index_solid_queue_pauses_on_queue_name", unique: true
  end

  create_table "solid_queue_processes", force: :cascade do |t|
    t.string "kind", null: false
    t.datetime "last_heartbeat_at", null: false
    t.bigint "supervisor_id"
    t.integer "pid", null: false
    t.string "hostname"
    t.text "metadata"
    t.datetime "created_at", null: false
    t.string "name", null: false
    t.index [ "last_heartbeat_at" ], name: "index_solid_queue_processes_on_last_heartbeat_at"
    t.index [ "name", "supervisor_id" ], name: "index_solid_queue_processes_on_name_and_supervisor_id", unique: true
    t.index [ "supervisor_id" ], name: "index_solid_queue_processes_on_supervisor_id"
  end

  create_table "solid_queue_ready_executions", force: :cascade do |t|
    t.bigint "job_id", null: false
    t.string "queue_name", null: false
    t.integer "priority", default: 0, null: false
    t.datetime "created_at", null: false
    t.index [ "job_id" ], name: "index_solid_queue_ready_executions_on_job_id", unique: true
    t.index [ "priority", "job_id" ], name: "index_solid_queue_poll_all"
    t.index [ "queue_name", "priority", "job_id" ], name: "index_solid_queue_poll_by_queue"
  end

  create_table "solid_queue_recurring_executions", force: :cascade do |t|
    t.bigint "job_id", null: false
    t.string "task_key", null: false
    t.datetime "run_at", null: false
    t.datetime "created_at", null: false
    t.index [ "job_id" ], name: "index_solid_queue_recurring_executions_on_job_id", unique: true
    t.index [ "task_key", "run_at" ], name: "index_solid_queue_recurring_executions_on_task_key_and_run_at", unique: true
  end

  create_table "solid_queue_recurring_tasks", force: :cascade do |t|
    t.string "key", null: false
    t.string "schedule", null: false
    t.string "command", limit: 2048
    t.string "class_name"
    t.text "arguments"
    t.string "queue_name"
    t.integer "priority", default: 0
    t.boolean "static", default: true, null: false
    t.text "description"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index [ "key" ], name: "index_solid_queue_recurring_tasks_on_key", unique: true
    t.index [ "static" ], name: "index_solid_queue_recurring_tasks_on_static"
  end

  create_table "solid_queue_scheduled_executions", force: :cascade do |t|
    t.bigint "job_id", null: false
    t.string "queue_name", null: false
    t.integer "priority", default: 0, null: false
    t.datetime "scheduled_at", null: false
    t.datetime "created_at", null: false
    t.index [ "job_id" ], name: "index_solid_queue_scheduled_executions_on_job_id", unique: true
    t.index [ "scheduled_at", "priority", "job_id" ], name: "index_solid_queue_dispatch_all"
  end

  create_table "solid_queue_semaphores", force: :cascade do |t|
    t.string "key", null: false
    t.integer "value", default: 1, null: false
    t.datetime "expires_at", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index [ "expires_at" ], name: "index_solid_queue_semaphores_on_expires_at"
    t.index [ "key", "value" ], name: "index_solid_queue_semaphores_on_key_and_value"
    t.index [ "key" ], name: "index_solid_queue_semaphores_on_key", unique: true
  end

  add_foreign_key "solid_queue_blocked_executions", "solid_queue_jobs", column: "job_id", on_delete: :cascade
  add_foreign_key "solid_queue_claimed_executions", "solid_queue_jobs", column: "job_id", on_delete: :cascade
  add_foreign_key "solid_queue_failed_executions", "solid_queue_jobs", column: "job_id", on_delete: :cascade
  add_foreign_key "solid_queue_ready_executions", "solid_queue_jobs", column: "job_id", on_delete: :cascade
  add_foreign_key "solid_queue_recurring_executions", "solid_queue_jobs", column: "job_id", on_delete: :cascade
  add_foreign_key "solid_queue_scheduled_executions", "solid_queue_jobs", column: "job_id", on_delete: :cascade
end

===== END db/queue_schema.rb =====

===== BEGIN db/schema.rb =====
# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# This file is the source Rails uses to define your schema when running `bin/rails
# db:schema:load`. When creating a new database, `bin/rails db:schema:load` tends to
# be faster and is potentially less error prone than running all of your
# migrations from scratch. Old migrations may fail to apply correctly if those
# migrations use external dependencies or application code.
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema[8.0].define(version: 2025_10_17_203635) do
  # These are extensions that must be enabled in order to support this database
  enable_extension "pg_catalog.plpgsql"
  enable_extension "pgcrypto"

  create_table "payments_ach_routings", force: :cascade do |t|
    t.uuid "public_id", default: -> { "gen_random_uuid()" }, null: false
    t.string "routing_number", limit: 9, null: false, comment: "Institution’s ABA routing number"
    t.string "office_code", limit: 1, null: false, comment: "'O' main office, 'B' branch"
    t.string "servicing_frb_number", limit: 9, comment: "Servicing Federal Reserve Bank routing number"
    t.string "record_type_code", limit: 1, null: false, comment: "0=Fed, 1=send to customer, 2=send using new routing number"
    t.date "change_date", comment: "Last update date (MMDDYY source)"
    t.string "new_routing_number", limit: 9, comment: "Updated routing number (e.g., merger)"
    t.string "customer_name", limit: 36, null: false, comment: "Abbreviated institution name"
    t.string "address", limit: 36, comment: "Delivery address"
    t.string "city", limit: 20, comment: "City name"
    t.string "state_code", limit: 2, comment: "Two-letter state abbreviation"
    t.bigint "system_region_id", comment: "Optional FK to SystemRegion (US)"
    t.string "zip_code", limit: 10, comment: "ZIP code"
    t.string "phone_number", limit: 10, comment: "Contact phone, digits only"
    t.string "institution_status_code", limit: 1, comment: "1 = Receives gov/commercial ACH data"
    t.string "data_view_code", limit: 1, comment: "1 = Current view"
    t.boolean "us_treasury", default: false, null: false, comment: "ACH number is U.S. Treasury payment"
    t.boolean "us_postal_service", default: false, null: false, comment: "ACH number is U.S. Postal Service money order"
    t.boolean "federal_reserve_bank", default: false, null: false, comment: "ACH number is a Federal Reserve Bank"
    t.boolean "on_us", default: false, null: false, comment: "\"On-us\" account"
    t.boolean "local", default: false, null: false, comment: "Considered a local check"
    t.boolean "special_handling", default: false, null: false, comment: "Docs require special handling"
    t.text "notes", comment: "Internal notes"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["customer_name"], name: "index_payments_ach_routings_on_customer_name"
    t.index ["public_id"], name: "index_payments_ach_routings_on_public_id", unique: true
    t.index ["routing_number"], name: "index_payments_ach_routings_on_routing_number", unique: true
    t.index ["state_code"], name: "index_payments_ach_routings_on_state_code"
    t.index ["system_region_id"], name: "index_payments_ach_routings_on_system_region_id"
    t.check_constraint "data_view_code IS NULL OR data_view_code::text = '1'::text", name: "chk_par_data_view_code"
    t.check_constraint "new_routing_number IS NULL OR new_routing_number::text ~ '^[0-9]{9}$'::text", name: "chk_par_new_rtn_digits"
    t.check_constraint "office_code::text = ANY (ARRAY['O'::character varying::text, 'B'::character varying::text])", name: "chk_par_office_code"
    t.check_constraint "phone_number IS NULL OR phone_number::text ~ '^[0-9]{10}$'::text", name: "chk_par_phone_digits"
    t.check_constraint "record_type_code::text = ANY (ARRAY['0'::character varying::text, '1'::character varying::text, '2'::character varying::text])", name: "chk_par_record_type_code"
    t.check_constraint "routing_number::text ~ '^[0-9]{9}$'::text", name: "chk_par_routing_number_digits"
    t.check_constraint "servicing_frb_number IS NULL OR servicing_frb_number::text ~ '^[0-9]{9}$'::text", name: "chk_par_frb_digits"
    t.check_constraint "state_code IS NULL OR state_code::text ~ '^[A-Z]{2}$'::text", name: "chk_par_state_code"
  end

  create_table "system_countries", force: :cascade do |t|
    t.uuid "public_id", default: -> { "gen_random_uuid()" }, null: false
    t.string "iso2", limit: 2, null: false
    t.string "iso3", limit: 3, null: false
    t.string "numeric", limit: 3
    t.string "name", null: false
    t.string "official_name"
    t.string "calling_code"
    t.string "currency_code", limit: 3
    t.string "region"
    t.string "subregion"
    t.string "tlds", default: [], array: true
    t.boolean "active", default: true, null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["iso2"], name: "index_system_countries_on_iso2", unique: true
    t.index ["iso3"], name: "index_system_countries_on_iso3", unique: true
    t.index ["numeric"], name: "index_system_countries_on_numeric"
    t.index ["public_id"], name: "index_system_countries_on_public_id", unique: true
  end

  create_table "system_currencies", force: :cascade do |t|
    t.uuid "public_id", default: -> { "gen_random_uuid()" }, null: false
    t.string "code", limit: 3, null: false
    t.string "numeric", limit: 3
    t.string "name", null: false
    t.integer "minor_units", default: 2, null: false
    t.string "symbol"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["code"], name: "index_system_currencies_on_code", unique: true
    t.index ["public_id"], name: "index_system_currencies_on_public_id", unique: true
  end

  create_table "system_naics_codes", force: :cascade do |t|
    t.uuid "public_id", default: -> { "gen_random_uuid()" }, null: false
    t.integer "year", default: 2022, null: false
    t.string "code", null: false
    t.string "title", null: false
    t.string "sector"
    t.string "parent_code"
    t.integer "level", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["public_id"], name: "index_system_naics_codes_on_public_id", unique: true
    t.index ["year", "code"], name: "index_system_naics_codes_on_year_and_code", unique: true
    t.index ["year", "parent_code"], name: "index_system_naics_codes_on_year_and_parent_code"
  end

  create_table "system_reference_lists", force: :cascade do |t|
    t.uuid "public_id", default: -> { "gen_random_uuid()" }, null: false
    t.string "key", null: false
    t.string "name", null: false
    t.string "description"
    t.string "schema_version"
    t.string "visibility", default: "public", null: false
    t.string "tags", default: [], array: true
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["key"], name: "index_system_reference_lists_on_key", unique: true
    t.index ["public_id"], name: "index_system_reference_lists_on_public_id", unique: true
  end

  create_table "system_reference_values", force: :cascade do |t|
    t.uuid "public_id", default: -> { "gen_random_uuid()" }, null: false
    t.bigint "parent_id"
    t.string "key", null: false
    t.string "code"
    t.string "label", null: false
    t.string "short_label"
    t.text "description"
    t.integer "position", default: 0, null: false
    t.boolean "active", default: true, null: false
    t.date "effective_from"
    t.date "effective_to"
    t.jsonb "metadata", default: {}, null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.bigint "reference_list_id", null: false
    t.index ["metadata"], name: "index_system_reference_values_on_metadata", using: :gin
    t.index ["parent_id"], name: "index_system_reference_values_on_parent_id"
    t.index ["public_id"], name: "index_system_reference_values_on_public_id", unique: true
    t.index ["reference_list_id"], name: "index_system_reference_values_on_reference_list_id"
  end

  create_table "system_regions", force: :cascade do |t|
    t.uuid "public_id", default: -> { "gen_random_uuid()" }, null: false
    t.bigint "system_country_id", null: false
    t.string "code", null: false
    t.string "name", null: false
    t.string "type_name", default: "state", null: false
    t.string "iso_3166_2"
    t.string "fips_code"
    t.boolean "active", default: true, null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["public_id"], name: "index_system_regions_on_public_id", unique: true
    t.index ["system_country_id", "code"], name: "index_system_regions_on_system_country_id_and_code", unique: true
    t.index ["system_country_id"], name: "index_system_regions_on_system_country_id"
  end

  add_foreign_key "payments_ach_routings", "system_regions"
  add_foreign_key "system_reference_values", "system_reference_lists", column: "reference_list_id"
  add_foreign_key "system_reference_values", "system_reference_values", column: "parent_id", name: "fk_srv_to_parent"
  add_foreign_key "system_regions", "system_countries"
end

===== END db/schema.rb =====

===== BEGIN db/seeds/countries_regions_from_gems.rb =====
# frozen_string_literal: true

require "countries"
require "carmen"

def pick(*vals) = vals.find { |v| v.present? }

def upsert_country(c)
  d = c.data # raw hash

  name          = pick(d["name"], d["iso_short_name"], d["official_name"], d["common_name"])
  official_name = pick(d["official_name"], d["iso_long_name"], d["common_name"], name)
  # country code can be string or array; ensure "+<digits>"
  cc_raw = Array(d["country_code"] || d["country_codes"]).first.to_s.strip
  calling = cc_raw.empty? ? nil : (cc_raw.start_with?("+") ? cc_raw : "+#{cc_raw}")
  # currency can be string or array under different keys
  cur = Array(d["currency"] || d["currencies"]).first
  # TLD key varies
  tlds = Array(d["tld"] || d["tlds"])

  rec = System::Country.find_or_initialize_by(iso2: c.alpha2)
  rec.iso3          = c.alpha3
  rec.numeric       = d["number"].to_s.presence
  rec.name          = name || "Unknown #{c.alpha2}"
  rec.official_name = official_name || rec.name
  rec.calling_code  = calling
  rec.currency_code = cur.to_s[0, 3].presence
  rec.region        = d["region"]
  rec.subregion     = d["subregion"]
  rec.tlds          = tlds
  rec.active        = true
  rec.save!
end

def upsert_regions_for(iso2)
  co = Carmen::Country.coded(iso2)
  return unless co
  sc = System::Country.find_by!(iso2: iso2)
  co.subregions.each do |sr|
    rec = System::Region.find_or_initialize_by(system_country_id: sc.id, code: sr.code)
    rec.name       = sr.name
    rec.type_name  = sr.type.presence || "state"
    rec.iso_3166_2 = "#{iso2}-#{sr.code}"
    rec.active     = true
    rec.save!
  end
end

ISO3166::Country.all.each { |c| upsert_country(c) }
ISO3166::Country.all.each { |c| upsert_regions_for(c.alpha2) }
puts "Seeded countries: #{System::Country.count}, regions: #{System::Region.count}"

===== END db/seeds/countries_regions_from_gems.rb =====

===== BEGIN db/seeds/currencies.rb =====
require "money"

def iso_num(val)
  s = val.to_s.strip
  /\A\d{1,3}\z/.match?(s) ? s : nil
end

Money::Currency.table.each_value do |c|
  System::Currency.find_or_create_by!(code: c[:iso_code].to_s[0, 3].upcase) do |r|
    r.numeric     = iso_num(c[:iso_numeric])
    r.name        = c[:name].to_s
    r.minor_units = c[:subunit_to_unit] ? Math.log10(c[:subunit_to_unit]).to_i : 0
    r.symbol      = c[:symbol].to_s
  end
end

puts "Loaded currencies: #{System::Currency.count}"

===== END db/seeds/currencies.rb =====

===== SKIP (binary) db/seeds/data/2-6 digit_2022_Codes.xlsx =====

===== SKIP (size) db/seeds/data/FedACHdir.txt (2857086 bytes) =====

===== BEGIN db/seeds/data/references/parties.address_types.yml =====
list: { key: parties.address_types, name: Address Types }
values:
  - { key: primary,   label: Primary }
  - { key: secondary, label: Secondary }
===== END db/seeds/data/references/parties.address_types.yml =====

===== BEGIN db/seeds/data/references/parties.address_uses.yml =====
# parties.address_uses.yml
list: { key: parties.address_uses, name: Address Uses }
values:
  - { key: mailing,  label: Mailing }
  - { key: physical, label: Physical }
  - { key: billing,  label: Billing }

===== END db/seeds/data/references/parties.address_uses.yml =====

===== BEGIN db/seeds/data/references/parties.consent_types.yml =====
list: { key: parties.consent_types, name: Consent Types, description: Catalog of consent records }
values:
  - { key: terms_of_service, label: Terms of Service, metadata: { jurisdiction: "US", required: true, typical_channels: [web, app, paper] } }
  - { key: privacy_policy_consent, label: Privacy Policy Consent, metadata: { jurisdiction: "US/GLBA", required: true, typical_channels: [web, app, paper] } }
  - { key: esign_consent, label: E-Sign Consent, metadata: { jurisdiction: "US/ESIGN+UETA", required: true, typical_channels: [web, app] } }
  - { key: credit_pull_consent, label: Credit Pull Consent, metadata: { jurisdiction: "US/FCRA", required: true, typical_channels: [web, app, voice] } }
  - { key: background_check_consent, label: Background Check Consent, metadata: { jurisdiction: "US/FCRA", required: false, typical_channels: [web, app, paper] } }
  - { key: kyc_data_use, label: KYC Data Use, metadata: { jurisdiction: "US/BSA-AML", required: true, typical_channels: [web, app, paper] } }
  - { key: ach_debit_authorization, label: ACH Debit Authorization, metadata: { jurisdiction: "US/NACHA", required: "yes-if ACH", typical_channels: [web, app, paper] } }
  - { key: card_autopay_authorization, label: Card Autopay Authorization, metadata: { jurisdiction: "US/Network", required: false, typical_channels: [web, app] } }
  - { key: overdraft_opt_in, label: Overdraft Opt-In, metadata: { jurisdiction: "US/Reg E §1005.17", required: false, typical_channels: [web, app, branch] } }
  - { key: marketing_email_opt_in, label: Marketing Email Opt-In, metadata: { jurisdiction: "US/CAN-SPAM", required: false, typical_channels: [web, app] } }
  - { key: marketing_sms_opt_in, label: Marketing SMS Opt-In, metadata: { jurisdiction: "US/TCPA", required: false, typical_channels: [web, app] } }
  - { key: marketing_call_opt_in, label: Marketing Call Opt-In, metadata: { jurisdiction: "US/TCPA", required: false, typical_channels: [web, app, voice] } }
  - { key: data_sharing_affiliates_opt_out, label: Affiliate Sharing Opt-Out }

===== END db/seeds/data/references/parties.consent_types.yml =====

===== BEGIN db/seeds/data/references/parties.email_types.yml =====
# parties.email_types.yml
list: { key: parties.email_types, name: Email Types }
values:
  - { key: business, label: Business }
  - { key: personal, label: Personal }

===== END db/seeds/data/references/parties.email_types.yml =====

===== BEGIN db/seeds/data/references/parties.identity_types.yml =====
list:
  key: parties.identity_types
  name: Identity Types
  description: Issued identity documents and registrations
values:
  - key: driver_license
    label: Driver License
    metadata:
      applies_to: ["person"]
      requires: { country: required, region: required, issue_date: optional, expiration_date: required, issuer_freeflow: optional, number: required }
      assurance: high
      number_format: '^\d{3,9}$'
  - key: passport
    label: Passport
    metadata:
      applies_to: ["person"]
      requires: { country: required, region: none, issue_date: optional, expiration_date: required, issuer_freeflow: optional, number: required }
      assurance: high
  - key: military_id
    label: U.S. Uniformed Services ID/CAC
    metadata:
      applies_to: ["person"]
      requires: { country: optional, region: none, number: required }
      assurance: high
  - key: lei
    label: Legal Entity Identifier
    metadata:
      applies_to: ["organization"]
      requires: { number: required, country: none, region: none }
      assurance: high

===== END db/seeds/data/references/parties.identity_types.yml =====

===== BEGIN db/seeds/data/references/parties.name_types.yml =====
list: { key: parties.name_types, name: Name Types }
values:
  - { key: legal,     label: Legal }
  - { key: preferred, label: Preferred }
  - { key: previous,  label: Previous }
===== END db/seeds/data/references/parties.name_types.yml =====

===== BEGIN db/seeds/data/references/parties.organization_types.yml =====
# parties.organization_types.yml
list: { key: parties.organization_types, name: Organization Types }
values:
  - { key: c_corp,   label: C-Corp }
  - { key: s_corp,   label: S-Corp }
  - { key: llc,      label: LLC }
  - { key: partnership, label: Partnership }
  - { key: nonprofit,   label: Nonprofit }
  - { key: trust,    label: Trust }
  - { key: other,    label: Other }

===== END db/seeds/data/references/parties.organization_types.yml =====

===== BEGIN db/seeds/data/references/parties.phone_types.yml =====
list: { key: parties.phone_types, name: Phone Types }
values:
  - { key: mobile, label: Mobile }
  - { key: home,   label: Home }
  - { key: work,   label: Work }
  - { key: fax,    label: Fax }
  - { key: other,  label: Other }
===== END db/seeds/data/references/parties.phone_types.yml =====

===== BEGIN db/seeds/data/references/parties.relationship_types.yml =====
list:
  key: parties.relationship_types
  name: Relationship Types
  description: Party↔Party relationship catalog with directed inverses
values:
  - key: beneficial_owner
    label: Beneficial Owner
    metadata: { direction: "person→org", inverse: { code: beneficially_owned_entity, name: "Beneficially Owned Entity" } }
  - key: control_person
    label: Control Person
    metadata: { direction: "person→org", inverse: { code: controlled_entity, name: "Controlled Entity" } }
  - key: authorized_signer
    label: Authorized Signer
    metadata: { direction: "person→org", inverse: { code: signing_principal, name: "Signing Principal" } }
  - key: guarantor
    label: Guarantor
    metadata: { direction: "person→org", inverse: { code: obligor, name: "Obligor" } }
  - key: custodian
    label: Custodian
    metadata: { direction: "org/person→org/person", inverse: { code: asset_owner, name: "Asset Owner" }, symmetric: false }
  - key: trustee
    label: Trustee
    metadata: { direction: "person/org→trust", inverse: { code: trust_with_trustee, name: "Trust With Trustee" } }
  - key: settlor
    label: Settlor
    metadata: { direction: "person→trust", inverse: { code: trust_with_settlor, name: "Trust With Settlor" } }
  - key: beneficiary
    label: Beneficiary
    metadata: { direction: "person/org→trust/estate", inverse: { code: instrument_with_beneficiary, name: "Instrument With Beneficiary" } }
  - key: executor
    label: Executor
    metadata: { direction: "person→estate", inverse: { code: estate_with_executor, name: "Estate With Executor" } }
  - key: administrator
    label: Administrator
    metadata: { direction: "person→estate", inverse: { code: estate_with_administrator, name: "Estate With Administrator" } }
  - key: guardian
    label: Guardian
    metadata: { direction: "person→person", inverse: { code: ward, name: "Ward" } }
  - key: power_of_attorney
    label: Power of Attorney
    metadata: { direction: "person→person", inverse: { code: principal_person, name: "Principal" } }

===== END db/seeds/data/references/parties.relationship_types.yml =====

===== BEGIN db/seeds/data/references/parties.tax_id_types.yml =====
list:
  key: parties.tax_id_types
  name: Tax ID Types
  description: Personal and organization tax identifiers
values:
  - key: ssn
    label: U.S. SSN
    metadata:
      profile_types: ["person"]
      format: '^\d{3}-?\d{2}-?\d{4}$'
      mask: '***-**-####'
  - key: itin
    label: U.S. ITIN
    metadata:
      profile_types: ["person"]
      format: '^(9\d{2})-?\d{2}-?\d{4}$'
      mask: '***-**-####'
  - key: ein
    label: U.S. EIN
    metadata:
      profile_types: ["organization"]
      format: '^\d{2}-?\d{7}$'
      mask: '##-#######'
  - key: foreign
    label: Foreign Tax ID
    metadata:
      profile_types: ["person", "organization"]
      format: '^[A-Za-z0-9\-]{1,20}$'
      mask: '*************####'
===== END db/seeds/data/references/parties.tax_id_types.yml =====

===== BEGIN db/seeds/data/references/relationship_statuses.yml =====
list: { key: relationship_statuses, name: Relationship Statuses }
values:
  - { key: active, label: Active }
  - { key: ended,  label: Ended }

===== END db/seeds/data/references/relationship_statuses.yml =====

===== BEGIN db/seeds/fedach.rb =====
# db/seeds/fedach.rb
# frozen_string_literal: true

PATH = Rails.root.join("db/seeds/data/FedACHdir.txt")

def slice(s, a, b) = s && s.byteslice(a-1, b-a+1).to_s # 1-based inclusive
def s(s, a, b, max = nil) = slice(s, a, b).strip.then { |v| max ? v[0, max] : v }
def d(s, a, b, max = nil) = slice(s, a, b).gsub(/\D/, "").then { |v| max ? v[0, max] : v }
def mmddyy(v) = v.blank? ? nil : Date.strptime(v, "%m%d%y")

raise "Missing #{PATH}" unless File.exist?(PATH)

count = 0
File.foreach(PATH, encoding: "ISO-8859-1:utf-8") do |line|
  next if line.strip.empty?

  routing_number        = d(line,   1,  9, 9)
  office_code           = s(line,  10, 10, 1)
  servicing_frb_number  = d(line,  11, 19, 9).presence
  record_type_code      = s(line,  20, 20, 1)
  change_date           = mmddyy(s(line, 21, 26))
  new_routing_number    = d(line,  27, 35, 9).presence
  customer_name         = s(line,  36, 71, 36)
  address               = s(line,  72, 107, 36).presence
  city                  = s(line, 108, 127, 20).presence
  state_code_raw        = s(line, 128, 129, 2)
    state_code          = /\A[A-Z]{2}\z/.match?(state_code_raw) ? state_code_raw : nil
  zip5                  = s(line, 130, 134, 5)
  zip4                  = s(line, 135, 138, 4).presence
  phone_number          = d(line, 139, 148, 10).presence
  institution_status    = s(line, 149, 149, 1).presence
  data_view_code        = s(line, 150, 150, 1).presence

  Payments::AchRouting.upsert(
    {
      routing_number:,
      office_code:,
      servicing_frb_number:,
      record_type_code:,
      change_date:,
      new_routing_number:,
      customer_name:,
      address:,
      city:,
      state_code: state_code,
      zip_code: zip4 ? "#{zip5}-#{zip4}" : zip5,
      phone_number:,
      institution_status_code: institution_status,
      data_view_code: data_view_code,
      us_treasury: false,
      us_postal_service: false,
      federal_reserve_bank: false,
      on_us: false,
      local: false,
      special_handling: false,
      created_at: Time.current,
      updated_at: Time.current
    },
    unique_by: :routing_number
  )
  count += 1
end

puts "FedACH loaded rows: #{count}"

===== END db/seeds/fedach.rb =====

===== BEGIN db/seeds/naics_from_xlsx.rb =====
require "roo"

path = Rails.root.join("db/seeds/data/2-6 digit_2022_Codes.xlsx")
raise "File not found: #{path}" unless File.exist?(path)

sheet = Roo::Excelx.new(path)
sheet.each_row_streaming(offset: 1) do |row|
  # Adjust if header order differs
  code  = row[0].cell_value.to_s.strip
  title = row[1].cell_value.to_s.strip
  next if code.empty?

  level  = code.length
  parent = code.length > 2 ? code[0, code.length - 1] : nil
  sector = code[0, 2]

  rec = System::NaicsCode.find_or_initialize_by(year: 2022, code: code)
  rec.title       = title
  rec.parent_code = parent
  rec.sector      = sector
  rec.level       = level
  rec.save!
end

puts "Loaded NAICS 2022 codes: #{System::NaicsCode.where(year: 2022).count}"

===== END db/seeds/naics_from_xlsx.rb =====

===== BEGIN db/seeds.rb =====
# This file should ensure the existence of records required to run the application in every environment (production,
# development, test). The code here should be idempotent so that it can be executed at any point in every environment.
# The data can then be loaded with the bin/rails db:seed command (or created alongside the database with db:setup).
#
# Example:
#
#   ["Action", "Comedy", "Drama", "Horror"].each do |genre_name|
#     MovieGenre.find_or_create_by!(name: genre_name)
load Rails.root.join("db/seeds/countries_regions_from_gems.rb")
load Rails.root.join("db/seeds/references.rb")
load Rails.root.join("db/seeds/fedach.rb")
load Rails.root.join("db/seeds/currencies.rb")
load Rails.root.join("db/seeds/naics_from_xlsx.rb")
#   end

===== END db/seeds.rb =====

===== BEGIN db/seeds/references.rb =====
# frozen_string_literal: true

require "yaml"
require "active_support/core_ext/hash/indifferent_access"

module Seeds
  module References
    module_function

    def bool(v) = ActiveModel::Type::Boolean.new.cast(v)
    def date(v) = v.present? ? Date.parse(v.to_s) : nil

    def upsert_list(h)
      h = h.with_indifferent_access
      rec = ::System::ReferenceList.find_or_initialize_by(key: h.fetch(:key))
      rec.name           = h.fetch(:name)
      rec.description    = h[:description]
      rec.schema_version = h[:schema_version]
      rec.visibility     = h[:visibility] if h[:visibility].present?
      rec.tags           = Array(h[:tags]).map(&:to_s)
      rec.save!
      rec
    end

    def upsert_value(list_id, h)
      h = h.with_indifferent_access
      rec = ::System::ReferenceValue.find_or_initialize_by(system_reference_list_id: list_id, key: h.fetch(:key))
      rec.code           = h[:code]
      rec.label          = h.fetch(:label)
      rec.short_label    = h[:short_label]
      rec.description    = h[:description]
      rec.position       = (h[:position] || 0).to_i
      rec.active         = h.key?(:active) ? bool(h[:active]) : true
      rec.effective_from = date(h[:effective_from])
      rec.effective_to   = date(h[:effective_to])
      rec.parent_id      = h[:parent_id] if h.key?(:parent_id)
      rec.metadata       = (h[:metadata] || {}).to_h
      rec.save!
      rec
    end

    def load_yaml_file(path)
      doc = YAML.load_file(path)
      unless doc.is_a?(Hash) && doc["list"].is_a?(Hash)
        puts "SKIP invalid YAML: #{path}"
        return [ 0, 0 ]
      end
      list = upsert_list(doc.fetch("list"))
      v = Array(doc["values"])
      v.each { |row| upsert_value(list.id, row) }
      [ 1, v.size ]
    rescue => e
      warn "ERROR in #{path}: #{e.class}: #{e.message}"
      raise
    end

    def run(dir: Rails.root.join("db/seeds/data/references"))
      files = Dir.glob(File.join(dir, "*.yml")).sort
      puts "Reference seed path: #{dir}"
      puts "Files: #{files.size}"
      total_lists = 0
      total_vals  = 0
      files.each do |p|
        lists, vals = load_yaml_file(p)
        total_lists += lists
        total_vals  += vals
        puts "Loaded #{File.basename(p)} -> lists:+#{lists}, values:+#{vals}"
      end
      puts "Totals -> lists: #{::System::ReferenceList.count}, values: #{::System::ReferenceValue.count}"
      puts "Session adds -> lists:+#{total_lists}, values:+#{total_vals}"
    end
  end
end

Seeds::References.run

===== END db/seeds/references.rb =====

===== BEGIN .env.example =====
# --- App runtime ---
RAILS_ENV=development
APP_NAME=BankEncore
HOST=192.168.1.43
PORT=3000
BINDING=0.0.0.0
RAILS_LOG_LEVEL=debug

# --- Secrets (generate; do NOT commit real values) ---
# bin/rails secret
SECRET_KEY_BASE=replace_with_output_of_rails_secret
# If using Rails credentials in dev without master.key file:
# RAILS_MASTER_KEY=replace_if_you_choose_env_key_loading

# --- Database (PostgreSQL 16) ---
PGHOST=127.0.0.1
PGPORT=5432
PGUSER=bankencore
PGPASSWORD=devpass
PGDATABASE=bankencore_development
# Optional single URL (overrides the above if set)
# DATABASE_URL=postgres://bankencore:devpass@127.0.0.1:5432/bankencore_development

# --- Mailer (dev SMTP or Mailhog) ---
MAIL_FROM=dev@bankencore.local
SMTP_ADDRESS=127.0.0.1
SMTP_PORT=1025
SMTP_USER=
SMTP_PASSWORD=
SMTP_AUTH=plain
SMTP_ENABLE_STARTTLS_AUTO=false

# --- URL options for generators and mailers ---
DEFAULT_URL_HOST=192.168.1.43
DEFAULT_URL_PROTOCOL=http

# --- CSRF / CORS (adjust if you serve from other origins) ---
CORS_ALLOWED_ORIGINS=http://192.168.1.43:3000

# --- JS toolchain ---
# If using Vite:
VITE_RUBY_HOST=0.0.0.0
VITE_RUBY_PORT=5173
# If using esbuild instead, omit the Vite vars.

# --- Active Storage (pick one; dev often local disk) ---
ACTIVE_STORAGE_SERVICE=local
# For S3 later:
# AWS_REGION=
# AWS_ACCESS_KEY_ID=
# AWS_SECRET_ACCESS_KEY=
# AWS_S3_BUCKET=

# --- Security / sessions ---
# Rotate periodically; keep cookie scope tight in production.
SESSION_SAME_SITE=lax
SESSION_SECURE=false

# --- Rate limiting (rack-attack toggles) ---
RACK_ATTACK_ENABLED=true

===== END .env.example =====

===== BEGIN Gemfile =====
source "https://rubygems.org"

# Bundle edge Rails instead: gem "rails", github: "rails/rails", branch: "main"
gem "rails", "~> 8.0.3"
# The modern asset pipeline for Rails [https://github.com/rails/propshaft]
gem "propshaft"
# Use postgresql as the database for Active Record
gem "pg", "~> 1.1"
# Use the Puma web server [https://github.com/puma/puma]
gem "puma", ">= 5.0"
# Use JavaScript with ESM import maps [https://github.com/rails/importmap-rails]
gem "importmap-rails"
# Hotwire's SPA-like page accelerator [https://turbo.hotwired.dev]
gem "turbo-rails"
# Hotwire's modest JavaScript framework [https://stimulus.hotwired.dev]
gem "stimulus-rails"
# Build JSON APIs with ease [https://github.com/rails/jbuilder]
gem "jbuilder"

# Use Active Model has_secure_password [https://guides.rubyonrails.org/active_model_basics.html#securepassword]
# gem "bcrypt", "~> 3.1.7"

# Windows does not include zoneinfo files, so bundle the tzinfo-data gem
gem "tzinfo-data", platforms: %i[ windows jruby ]

# Use the database-backed adapters for Rails.cache, Active Job, and Action Cable
gem "solid_cache"
gem "solid_queue"
gem "solid_cable"

# Reduces boot times through caching; required in config/boot.rb
gem "bootsnap", require: false

# Deploy this application anywhere as a Docker container [https://kamal-deploy.org]
gem "kamal", require: false

# Add HTTP asset caching/compression and X-Sendfile acceleration to Puma [https://github.com/basecamp/thruster/]
gem "thruster", require: false

# Use Active Storage variants [https://guides.rubyonrails.org/active_storage_overview.html#transforming-images]
# gem "image_processing", "~> 1.2"

# DB safety and ops
gem "strong_migrations"        # blocks dangerous schema changes
gem "pg_trunk", require: false # Postgres features via SQL helpers (views, FKs, etc.)
gem "rack-attack"              # DoS/rate limiting

# Money and locales
gem "money"                     # money gem
gem "money-rails"               # integrates money gem with Rails
gem "countries"                # ISO 3166 data for country validation

# AuthZ / AuthN (pick one stack)
gem "pundit"                   # authorization (RBAC policies)
# gem "cancancan"              # alternative to Pundit
# gem "devise"                 # authentication if you want turnkey
# gem "sorcery"                # lighter auth alternative

# Auditing and trails
gem "paper_trail"              # versioning for compliance

# CSS
gem "tailwindcss-rails"        # Tailwind CSS via Propshaft

group :development, :test do
  # See https://guides.rubyonrails.org/debugging_rails_applications.html#debugging-with-the-debug-gem
  gem "debug", platforms: %i[ mri windows ], require: "debug/prelude"

  # Static analysis for security vulnerabilities [https://brakemanscanner.org/]
  gem "brakeman", require: false

  # Omakase Ruby styling [https://github.com/rails/rubocop-rails-omakase/]
  gem "rubocop-rails-omakase", require: false

  # Additional recommnded from ChatGPT
  gem "rspec-rails"            # if you prefer RSpec
  gem "factory_bot_rails"
  gem "faker"
  gem "bundler-audit", require: false
  gem "annotate", require: false
  gem "shoulda-matchers"       # simplifies model tests
end

group :development do
  # Use console on exceptions pages [https://github.com/rails/web-console]
  gem "web-console"
  gem "foreman", require: false
end

group :test do
  # Use system testing [https://guides.rubyonrails.org/testing.html#system-testing]
  gem "capybara"
  gem "selenium-webdriver"
end

# Gemfile
group :tools do
  gem "carmen"                  # countries, states, and provinces
  gem "phonelib"                # phone number validation
  gem "routing_numbers"         # routing number validation
  gem "naics"                   # North American Industry Classification System
end

gem "roo", "~> 3.0"

===== END Gemfile =====

===== BEGIN Gemfile.lock =====
GEM
  remote: https://rubygems.org/
  specs:
    actioncable (8.0.3)
      actionpack (= 8.0.3)
      activesupport (= 8.0.3)
      nio4r (~> 2.0)
      websocket-driver (>= 0.6.1)
      zeitwerk (~> 2.6)
    actionmailbox (8.0.3)
      actionpack (= 8.0.3)
      activejob (= 8.0.3)
      activerecord (= 8.0.3)
      activestorage (= 8.0.3)
      activesupport (= 8.0.3)
      mail (>= 2.8.0)
    actionmailer (8.0.3)
      actionpack (= 8.0.3)
      actionview (= 8.0.3)
      activejob (= 8.0.3)
      activesupport (= 8.0.3)
      mail (>= 2.8.0)
      rails-dom-testing (~> 2.2)
    actionpack (8.0.3)
      actionview (= 8.0.3)
      activesupport (= 8.0.3)
      nokogiri (>= 1.8.5)
      rack (>= 2.2.4)
      rack-session (>= 1.0.1)
      rack-test (>= 0.6.3)
      rails-dom-testing (~> 2.2)
      rails-html-sanitizer (~> 1.6)
      useragent (~> 0.16)
    actiontext (8.0.3)
      actionpack (= 8.0.3)
      activerecord (= 8.0.3)
      activestorage (= 8.0.3)
      activesupport (= 8.0.3)
      globalid (>= 0.6.0)
      nokogiri (>= 1.8.5)
    actionview (8.0.3)
      activesupport (= 8.0.3)
      builder (~> 3.1)
      erubi (~> 1.11)
      rails-dom-testing (~> 2.2)
      rails-html-sanitizer (~> 1.6)
    activejob (8.0.3)
      activesupport (= 8.0.3)
      globalid (>= 0.3.6)
    activemodel (8.0.3)
      activesupport (= 8.0.3)
    activerecord (8.0.3)
      activemodel (= 8.0.3)
      activesupport (= 8.0.3)
      timeout (>= 0.4.0)
    activestorage (8.0.3)
      actionpack (= 8.0.3)
      activejob (= 8.0.3)
      activerecord (= 8.0.3)
      activesupport (= 8.0.3)
      marcel (~> 1.0)
    activesupport (8.0.3)
      base64
      benchmark (>= 0.3)
      bigdecimal
      concurrent-ruby (~> 1.0, >= 1.3.1)
      connection_pool (>= 2.2.5)
      drb
      i18n (>= 1.6, < 2)
      logger (>= 1.4.2)
      minitest (>= 5.1)
      securerandom (>= 0.3)
      tzinfo (~> 2.0, >= 2.0.5)
      uri (>= 0.13.1)
    addressable (2.8.7)
      public_suffix (>= 2.0.2, < 7.0)
    annotate (2.6.5)
      activerecord (>= 2.3.0)
      rake (>= 0.8.7)
    ast (2.4.3)
    base64 (0.3.0)
    bcrypt_pbkdf (1.1.1)
    benchmark (0.4.1)
    bigdecimal (3.3.1)
    bindex (0.8.1)
    bootsnap (1.18.6)
      msgpack (~> 1.2)
    brakeman (7.1.0)
      racc
    builder (3.3.0)
    bundler-audit (0.9.2)
      bundler (>= 1.2.0, < 3)
      thor (~> 1.0)
    capybara (3.40.0)
      addressable
      matrix
      mini_mime (>= 0.1.3)
      nokogiri (~> 1.11)
      rack (>= 1.6.0)
      rack-test (>= 0.6.3)
      regexp_parser (>= 1.5, < 3.0)
      xpath (~> 3.2)
    carmen (1.1.3)
      activesupport (>= 3.0.0)
    concurrent-ruby (1.3.5)
    connection_pool (2.5.4)
    countries (8.0.4)
      unaccent (~> 0.3)
    crass (1.0.6)
    csv (3.3.5)
    date (3.4.1)
    debug (1.11.0)
      irb (~> 1.10)
      reline (>= 0.3.8)
    diff-lcs (1.6.2)
    domain_name (0.6.20240107)
    dotenv (3.1.8)
    drb (2.2.3)
    ed25519 (1.4.0)
    erb (5.1.1)
    erubi (1.13.1)
    et-orbi (1.4.0)
      tzinfo
    factory_bot (6.5.5)
      activesupport (>= 6.1.0)
    factory_bot_rails (6.5.1)
      factory_bot (~> 6.5)
      railties (>= 6.1.0)
    faker (3.5.2)
      i18n (>= 1.8.11, < 2)
    foreman (0.90.0)
      thor (~> 1.4)
    fugit (1.11.2)
      et-orbi (~> 1, >= 1.2.11)
      raabro (~> 1.4)
    globalid (1.3.0)
      activesupport (>= 6.1)
    http-accept (1.7.0)
    http-cookie (1.1.0)
      domain_name (~> 0.5)
    httparty (0.23.2)
      csv
      mini_mime (>= 1.0.0)
      multi_xml (>= 0.5.2)
    i18n (1.14.7)
      concurrent-ruby (~> 1.0)
    importmap-rails (2.2.2)
      actionpack (>= 6.0.0)
      activesupport (>= 6.0.0)
      railties (>= 6.0.0)
    io-console (0.8.1)
    irb (1.15.2)
      pp (>= 0.6.0)
      rdoc (>= 4.0.0)
      reline (>= 0.4.2)
    jbuilder (2.14.1)
      actionview (>= 7.0.0)
      activesupport (>= 7.0.0)
    json (2.13.2)
    kamal (2.7.0)
      activesupport (>= 7.0)
      base64 (~> 0.2)
      bcrypt_pbkdf (~> 1.0)
      concurrent-ruby (~> 1.2)
      dotenv (~> 3.1)
      ed25519 (~> 1.4)
      net-ssh (~> 7.3)
      sshkit (>= 1.23.0, < 2.0)
      thor (~> 1.3)
      zeitwerk (>= 2.6.18, < 3.0)
    language_server-protocol (3.17.0.5)
    lint_roller (1.1.0)
    logger (1.7.0)
    loofah (2.24.1)
      crass (~> 1.0.2)
      nokogiri (>= 1.12.0)
    mail (2.8.1)
      mini_mime (>= 0.1.1)
      net-imap
      net-pop
      net-smtp
    marcel (1.1.0)
    matrix (0.4.3)
    mime-types (3.7.0)
      logger
      mime-types-data (~> 3.2025, >= 3.2025.0507)
    mime-types-data (3.2025.0924)
    mini_mime (1.1.5)
    minitest (5.26.0)
    monetize (1.13.0)
      money (~> 6.12)
    money (6.19.0)
      i18n (>= 0.6.4, <= 2)
    money-rails (1.15.0)
      activesupport (>= 3.0)
      monetize (~> 1.9)
      money (~> 6.13)
      railties (>= 3.0)
    msgpack (1.8.0)
    multi_xml (0.7.2)
      bigdecimal (~> 3.1)
    naics (1.0.1)
      httparty (~> 0.14)
      nokogiri (~> 1.7)
      slop (~> 4.4)
    net-imap (0.5.12)
      date
      net-protocol
    net-pop (0.1.2)
      net-protocol
    net-protocol (0.2.2)
      timeout
    net-scp (4.1.0)
      net-ssh (>= 2.6.5, < 8.0.0)
    net-sftp (4.0.0)
      net-ssh (>= 5.0.0, < 8.0.0)
    net-smtp (0.5.1)
      net-protocol
    net-ssh (7.3.0)
    netrc (0.11.0)
    nio4r (2.7.4)
    nokogiri (1.18.10-aarch64-linux-gnu)
      racc (~> 1.4)
    nokogiri (1.18.10-aarch64-linux-musl)
      racc (~> 1.4)
    nokogiri (1.18.10-arm-linux-gnu)
      racc (~> 1.4)
    nokogiri (1.18.10-arm-linux-musl)
      racc (~> 1.4)
    nokogiri (1.18.10-x86_64-linux-gnu)
      racc (~> 1.4)
    nokogiri (1.18.10-x86_64-linux-musl)
      racc (~> 1.4)
    oj (3.16.11)
      bigdecimal (>= 3.0)
      ostruct (>= 0.2)
    ostruct (0.6.3)
    paper_trail (16.0.0)
      activerecord (>= 6.1)
      request_store (~> 1.4)
    parallel (1.27.0)
    parser (3.3.9.0)
      ast (~> 2.4.1)
      racc
    pg (1.6.2)
    pg (1.6.2-aarch64-linux)
    pg (1.6.2-aarch64-linux-musl)
    pg (1.6.2-x86_64-linux)
    pg (1.6.2-x86_64-linux-musl)
    pg_trunk (0.2.0)
      activerecord (>= 4.0.0)
      pg
      railties (>= 4.0.0)
    phonelib (0.10.12)
    pp (0.6.3)
      prettyprint
    prettyprint (0.2.0)
    prism (1.4.0)
    propshaft (1.3.1)
      actionpack (>= 7.0.0)
      activesupport (>= 7.0.0)
      rack
    psych (5.2.6)
      date
      stringio
    public_suffix (6.0.2)
    puma (7.0.4)
      nio4r (~> 2.0)
    pundit (2.5.2)
      activesupport (>= 3.0.0)
    raabro (1.4.0)
    racc (1.8.1)
    rack (3.2.3)
    rack-attack (6.8.0)
      rack (>= 1.0, < 4)
    rack-session (2.1.1)
      base64 (>= 0.1.0)
      rack (>= 3.0.0)
    rack-test (2.2.0)
      rack (>= 1.3)
    rackup (2.2.1)
      rack (>= 3)
    rails (8.0.3)
      actioncable (= 8.0.3)
      actionmailbox (= 8.0.3)
      actionmailer (= 8.0.3)
      actionpack (= 8.0.3)
      actiontext (= 8.0.3)
      actionview (= 8.0.3)
      activejob (= 8.0.3)
      activemodel (= 8.0.3)
      activerecord (= 8.0.3)
      activestorage (= 8.0.3)
      activesupport (= 8.0.3)
      bundler (>= 1.15.0)
      railties (= 8.0.3)
    rails-dom-testing (2.3.0)
      activesupport (>= 5.0.0)
      minitest
      nokogiri (>= 1.6)
    rails-html-sanitizer (1.6.2)
      loofah (~> 2.21)
      nokogiri (>= 1.15.7, != 1.16.7, != 1.16.6, != 1.16.5, != 1.16.4, != 1.16.3, != 1.16.2, != 1.16.1, != 1.16.0.rc1, != 1.16.0)
    railties (8.0.3)
      actionpack (= 8.0.3)
      activesupport (= 8.0.3)
      irb (~> 1.13)
      rackup (>= 1.0.0)
      rake (>= 12.2)
      thor (~> 1.0, >= 1.2.2)
      tsort (>= 0.2)
      zeitwerk (~> 2.6)
    rainbow (3.1.1)
    rake (13.3.0)
    rdoc (6.15.0)
      erb
      psych (>= 4.0.0)
      tsort
    regexp_parser (2.11.3)
    reline (0.6.2)
      io-console (~> 0.5)
    request_store (1.7.0)
      rack (>= 1.4)
    rest-client (2.1.0)
      http-accept (>= 1.7.0, < 2.0)
      http-cookie (>= 1.0.2, < 2.0)
      mime-types (>= 1.16, < 4.0)
      netrc (~> 0.8)
    rexml (3.4.4)
    roo (3.0.0)
      base64 (~> 0.2)
      csv (~> 3)
      logger (~> 1)
      nokogiri (~> 1)
      rubyzip (>= 3.0.0, < 4.0.0)
    routing_numbers (0.1.0)
      addressable
      oj
      rest-client
    rspec-core (3.13.5)
      rspec-support (~> 3.13.0)
    rspec-expectations (3.13.5)
      diff-lcs (>= 1.2.0, < 2.0)
      rspec-support (~> 3.13.0)
    rspec-mocks (3.13.6)
      diff-lcs (>= 1.2.0, < 2.0)
      rspec-support (~> 3.13.0)
    rspec-rails (8.0.2)
      actionpack (>= 7.2)
      activesupport (>= 7.2)
      railties (>= 7.2)
      rspec-core (~> 3.13)
      rspec-expectations (~> 3.13)
      rspec-mocks (~> 3.13)
      rspec-support (~> 3.13)
    rspec-support (3.13.6)
    rubocop (1.81.1)
      json (~> 2.3)
      language_server-protocol (~> 3.17.0.2)
      lint_roller (~> 1.1.0)
      parallel (~> 1.10)
      parser (>= 3.3.0.2)
      rainbow (>= 2.2.2, < 4.0)
      regexp_parser (>= 2.9.3, < 3.0)
      rubocop-ast (>= 1.47.1, < 2.0)
      ruby-progressbar (~> 1.7)
      unicode-display_width (>= 2.4.0, < 4.0)
    rubocop-ast (1.47.1)
      parser (>= 3.3.7.2)
      prism (~> 1.4)
    rubocop-performance (1.26.0)
      lint_roller (~> 1.1)
      rubocop (>= 1.75.0, < 2.0)
      rubocop-ast (>= 1.44.0, < 2.0)
    rubocop-rails (2.33.4)
      activesupport (>= 4.2.0)
      lint_roller (~> 1.1)
      rack (>= 1.1)
      rubocop (>= 1.75.0, < 2.0)
      rubocop-ast (>= 1.44.0, < 2.0)
    rubocop-rails-omakase (1.1.0)
      rubocop (>= 1.72)
      rubocop-performance (>= 1.24)
      rubocop-rails (>= 2.30)
    ruby-progressbar (1.13.0)
    rubyzip (3.2.0)
    securerandom (0.4.1)
    selenium-webdriver (4.36.0)
      base64 (~> 0.2)
      json (<= 2.13.2)
      logger (~> 1.4)
      prism (~> 1.0, < 1.5)
      rexml (~> 3.2, >= 3.2.5)
      rubyzip (>= 1.2.2, < 4.0)
      websocket (~> 1.0)
    shoulda-matchers (6.5.0)
      activesupport (>= 5.2.0)
    slop (4.10.1)
    solid_cable (3.0.12)
      actioncable (>= 7.2)
      activejob (>= 7.2)
      activerecord (>= 7.2)
      railties (>= 7.2)
    solid_cache (1.0.8)
      activejob (>= 7.2)
      activerecord (>= 7.2)
      railties (>= 7.2)
    solid_queue (1.2.1)
      activejob (>= 7.1)
      activerecord (>= 7.1)
      concurrent-ruby (>= 1.3.1)
      fugit (~> 1.11.0)
      railties (>= 7.1)
      thor (>= 1.3.1)
    sshkit (1.24.0)
      base64
      logger
      net-scp (>= 1.1.2)
      net-sftp (>= 2.1.2)
      net-ssh (>= 2.8.0)
      ostruct
    stimulus-rails (1.3.4)
      railties (>= 6.0.0)
    stringio (3.1.7)
    strong_migrations (2.5.1)
      activerecord (>= 7.1)
    tailwindcss-rails (4.3.0)
      railties (>= 7.0.0)
      tailwindcss-ruby (~> 4.0)
    tailwindcss-ruby (4.1.13)
    tailwindcss-ruby (4.1.13-aarch64-linux-gnu)
    tailwindcss-ruby (4.1.13-aarch64-linux-musl)
    tailwindcss-ruby (4.1.13-x86_64-linux-gnu)
    tailwindcss-ruby (4.1.13-x86_64-linux-musl)
    thor (1.4.0)
    thruster (0.1.15)
    thruster (0.1.15-aarch64-linux)
    thruster (0.1.15-x86_64-linux)
    timeout (0.4.3)
    tsort (0.2.0)
    turbo-rails (2.0.17)
      actionpack (>= 7.1.0)
      railties (>= 7.1.0)
    tzinfo (2.0.6)
      concurrent-ruby (~> 1.0)
    unaccent (0.4.0)
    unicode-display_width (3.2.0)
      unicode-emoji (~> 4.1)
    unicode-emoji (4.1.0)
    uri (1.0.4)
    useragent (0.16.11)
    web-console (4.2.1)
      actionview (>= 6.0.0)
      activemodel (>= 6.0.0)
      bindex (>= 0.4.0)
      railties (>= 6.0.0)
    websocket (1.2.11)
    websocket-driver (0.8.0)
      base64
      websocket-extensions (>= 0.1.0)
    websocket-extensions (0.1.5)
    xpath (3.2.0)
      nokogiri (~> 1.8)
    zeitwerk (2.7.3)

PLATFORMS
  aarch64-linux
  aarch64-linux-gnu
  aarch64-linux-musl
  arm-linux-gnu
  arm-linux-musl
  x86_64-linux
  x86_64-linux-gnu
  x86_64-linux-musl

DEPENDENCIES
  annotate
  bootsnap
  brakeman
  bundler-audit
  capybara
  carmen
  countries
  debug
  factory_bot_rails
  faker
  foreman
  importmap-rails
  jbuilder
  kamal
  money
  money-rails
  naics
  paper_trail
  pg (~> 1.1)
  pg_trunk
  phonelib
  propshaft
  puma (>= 5.0)
  pundit
  rack-attack
  rails (~> 8.0.3)
  roo (~> 3.0)
  routing_numbers
  rspec-rails
  rubocop-rails-omakase
  selenium-webdriver
  shoulda-matchers
  solid_cable
  solid_cache
  solid_queue
  stimulus-rails
  strong_migrations
  tailwindcss-rails
  thruster
  turbo-rails
  tzinfo-data
  web-console

BUNDLED WITH
   2.7.2

===== END Gemfile.lock =====

===== SKIP (binary) lib/tasks/.keep =====

===== BEGIN Rakefile =====
# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

require_relative "config/application"

Rails.application.load_tasks

===== END Rakefile =====

===== BEGIN .rubocop.yml =====
# Omakase Ruby styling for Rails
inherit_gem: { rubocop-rails-omakase: rubocop.yml }

# Overwrite or add rules to create your own house style
#
# # Use `[a, [b, c]]` not `[ a, [ b, c ] ]`
# Layout/SpaceInsideArrayLiteralBrackets:
#   Enabled: false

===== END .rubocop.yml =====

===== BEGIN spec/factories/reference_lists.rb =====
# spec/factories/reference_lists.rb
FactoryBot.define do
  factory :system_reference_list, class: "System::ReferenceList" do
    public_id { SecureRandom.uuid }
    key       { "id_types_#{SecureRandom.uuid}" }   # unique, non-sequential
    name      { "ID Types" }

    # optional: deterministic override when needed
    trait :with_key do
      transient { forced_key { "custom_#{SecureRandom.hex(4)}" } }
      key { forced_key }
    end
  end
end

===== END spec/factories/reference_lists.rb =====

===== BEGIN spec/factories/reference_values.rb =====
FactoryBot.define do
  factory :system_reference_value, class: "System::ReferenceValue" do
    association :reference_list, factory: :system_reference_list
    public_id { SecureRandom.uuid }
    key { "military_id" }
    label { "U.S. Uniformed Services ID/CAC" }
    # keep :position only if the column exists; otherwise drop it
    # position { 0 }
    # remove :active unless the column exists
  end
end

===== END spec/factories/reference_values.rb =====

===== BEGIN spec/helpers/home_helper_spec.rb =====
require 'rails_helper'

# Specs in this file have access to a helper object that includes
# the HomeHelper. For example:
#
# describe HomeHelper do
#   describe "string concat" do
#     it "concats two strings with spaces" do
#       expect(helper.concat_strings("this","that")).to eq("this that")
#     end
#   end
# end
RSpec.describe HomeHelper, type: :helper do
  pending "add some examples to (or delete) #{__FILE__}"
end

===== END spec/helpers/home_helper_spec.rb =====

===== BEGIN spec/integration/reference_values_db_spec.rb =====
# spec/integration/reference_values_db_spec.rb
require "rails_helper"

RSpec.describe "DB constraints" do
  it "has FK to system_reference_lists" do
    fks = ActiveRecord::Base.connection.foreign_keys("system_reference_values")
    names = fks.map(&:to_table)
    expect(names).to include("system_reference_lists")
  end

  it "enforces NOT NULL on reference_list_id" do
    null_ok = ActiveRecord::Base.connection.columns("system_reference_values")
                 .find { |c| c.name == "reference_list_id" }&.null
    expect(null_ok).to be(false)
  end
end

===== END spec/integration/reference_values_db_spec.rb =====

===== BEGIN spec/models/system/reference_list_spec.rb =====
require "rails_helper"

RSpec.describe System::ReferenceList, type: :model do
  it { is_expected.to have_many(:reference_values).dependent(:destroy) }
  it { is_expected.to validate_presence_of(:name) }
  it "uses public_id for to_param" do
    list = build(:system_reference_list)
    expect(list.to_param).to eq(list.public_id)
  end
end

===== END spec/models/system/reference_list_spec.rb =====

===== BEGIN spec/models/system/reference_value_spec.rb =====
require "rails_helper"

RSpec.describe System::ReferenceValue, type: :model do
  it { is_expected.to belong_to(:reference_list).class_name("System::ReferenceList") }
  it { is_expected.to validate_presence_of(:key) }
  it { is_expected.to validate_presence_of(:label) }

  it "uses public_id for to_param" do
    v = build(:system_reference_value)
    expect(v.to_param).to eq(v.public_id)
  end
end

===== END spec/models/system/reference_value_spec.rb =====

===== BEGIN spec/rails_helper.rb =====
ENV["RAILS_ENV"] ||= "test"
require File.expand_path("../config/environment", __dir__)
abort("The Rails environment is running in production mode!") if Rails.env.production?
require "rspec/rails"

Dir[Rails.root.join("spec/support/**/*.rb")].sort.each { |f| require f }

# FactoryBot
RSpec.configure do |config|
  config.include FactoryBot::Syntax::Methods
end

RSpec.configure do |config|
  config.use_transactional_fixtures = true
end

# Shoulda
Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :rails
  end
end

===== END spec/rails_helper.rb =====

===== BEGIN spec/requests/home_spec.rb =====
require 'rails_helper'

RSpec.describe "Homes", type: :request do
  describe "GET /index" do
    it "returns http success" do
      get "/home/index"
      expect(response).to have_http_status(:success)
    end
  end
end

===== END spec/requests/home_spec.rb =====

===== BEGIN spec/requests/system/reference_values_spec.rb =====
# spec/requests/system/reference_values_spec.rb
require "rails_helper"

RSpec.describe "System::ReferenceValues", type: :request do
  let!(:list)  { create(:system_reference_list) }
  let!(:value) { create(:system_reference_value, reference_list: list) }

  it "shows index" do
    get system_reference_list_reference_values_path(list)
    expect(response).to have_http_status(:ok)
  end

  it "updates and redirects via polymorphic helper" do
    patch system_reference_list_reference_value_path(list, value),
          params: { reference_value: { label: "Updated" } }
    expect(response).to redirect_to([ list, value ])
    follow_redirect!
    expect(request.path).to eq(system_reference_list_reference_value_path(list, value))
    expect(response.body).to include("Updated")
  end

  it "creates and redirects to show" do
    post system_reference_list_reference_values_path(list),
         params: { reference_value: { key: "passport", label: "Passport" } }
    expect(response).to have_http_status(:found)
    follow_redirect!
    expect(request.path).to match(%r{\A/system/reference_lists/#{list.public_id}/reference_values/[^/]+\z})
    expect(response.body).to include("Passport")
  end
end

===== END spec/requests/system/reference_values_spec.rb =====

===== BEGIN spec/routing/system/reference_values_routing_spec.rb =====
require "rails_helper"
RSpec.describe System::ReferenceValuesController, type: :routing do
  it "routes nested paths" do
    expect(get: "/system/reference_lists/abc/reference_values").
      to route_to("system/reference_values#index", reference_list_public_id: "abc")
    expect(get: "/system/reference_lists/abc/reference_values/def/edit").
      to route_to("system/reference_values#edit", reference_list_public_id: "abc", public_id: "def")
  end
end

===== END spec/routing/system/reference_values_routing_spec.rb =====

===== BEGIN spec/support/capybara.rb =====
# spec/support/capybara.rb
require "capybara/rspec"
require "selenium-webdriver"

Capybara.default_max_wait_time = 5

Capybara.register_driver :chrome_headless_safe do |app|
  opts = Selenium::WebDriver::Chrome::Options.new
  opts.add_argument "--headless=new"
  opts.add_argument "--disable-gpu"
  opts.add_argument "--no-sandbox"
  opts.add_argument "--disable-dev-shm-usage"
  opts.add_argument "--window-size=1400,1400"
  opts.add_argument "--remote-debugging-port=0"
  Capybara::Selenium::Driver.new(app, browser: :chrome, options: opts)
end

RSpec.configure do |config|
  config.before(:each, type: :system) { driven_by :rack_test }         # default: no JS
  config.before(:each, type: :system, js: true) { driven_by :chrome_headless_safe } # opt-in
end

===== END spec/support/capybara.rb =====

===== BEGIN spec/system/reference_values_spec.rb =====
# spec/system/reference_values_spec.rb
require "rails_helper"

RSpec.describe "Reference values UI", type: :system do
  before { driven_by :rack_test }   # <— forces non-Selenium driver

  let!(:list)  { create(:system_reference_list) }
  let!(:value) { create(:system_reference_value, reference_list: list) }

  it "edits then cancels to index" do
    visit edit_system_reference_list_reference_value_path(list, value)
    click_link "Cancel"
    expect(page).to have_current_path(system_reference_list_reference_values_path(list), ignore_query: true)
  end
end

===== END spec/system/reference_values_spec.rb =====

===== BEGIN spec/views/home/index.html.tailwindcss_spec.rb =====
require 'rails_helper'

RSpec.describe "home/index.html.tailwindcss", type: :view do
  pending "add some examples to (or delete) #{__FILE__}"
end

===== END spec/views/home/index.html.tailwindcss_spec.rb =====

===== BEGIN test/application_system_test_case.rb =====
require "test_helper"

class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
  driven_by :selenium, using: :headless_chrome, screen_size: [ 1400, 1400 ]
end

===== END test/application_system_test_case.rb =====

===== SKIP (binary) test/controllers/.keep =====

===== SKIP (binary) test/fixtures/files/.keep =====

===== SKIP (binary) test/helpers/.keep =====

===== SKIP (binary) test/integration/.keep =====

===== SKIP (binary) test/mailers/.keep =====

===== SKIP (binary) test/models/.keep =====

===== SKIP (binary) test/system/.keep =====

===== BEGIN test/test_helper.rb =====
ENV["RAILS_ENV"] ||= "test"
require_relative "../config/environment"
require "rails/test_help"

module ActiveSupport
  class TestCase
    # Run tests in parallel with specified workers
    parallelize(workers: :number_of_processors)

    # Setup all fixtures in test/fixtures/*.yml for all tests in alphabetical order.
    fixtures :all

    # Add more helper methods to be used by all tests here...
  end
end

===== END test/test_helper.rb =====

